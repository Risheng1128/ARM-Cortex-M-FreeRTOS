ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	100
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.xPendedTicks,"aw",%nobits
 103              		.align	2
 106              	xPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.global	uxTopUsedPriority
 139              		.section	.data.uxTopUsedPriority,"aw"
 140              		.align	2
 143              	uxTopUsedPriority:
 144 0000 04000000 		.word	4
 145              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 146              		.align	2
 149              	uxSchedulerSuspended:
 150 0000 00000000 		.space	4
 151              		.section	.text.xTaskCreate,"ax",%progbits
 152              		.align	1
 153              		.global	xTaskCreate
 154              		.arch armv7e-m
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv4-sp-d16
 160              	xTaskCreate:
 161              	.LFB5:
 162              		.file 1 "./Drivers/FreeRTOS/tasks.c"
   1:./Drivers/FreeRTOS/tasks.c **** /*
   2:./Drivers/FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.4.6
   3:./Drivers/FreeRTOS/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Drivers/FreeRTOS/tasks.c ****  *
   5:./Drivers/FreeRTOS/tasks.c ****  * SPDX-License-Identifier: MIT
   6:./Drivers/FreeRTOS/tasks.c ****  *
   7:./Drivers/FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:./Drivers/FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:./Drivers/FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:./Drivers/FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:./Drivers/FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:./Drivers/FreeRTOS/tasks.c ****  * subject to the following conditions:
  13:./Drivers/FreeRTOS/tasks.c ****  *
  14:./Drivers/FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:./Drivers/FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  16:./Drivers/FreeRTOS/tasks.c ****  *
  17:./Drivers/FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:./Drivers/FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:./Drivers/FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:./Drivers/FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:./Drivers/FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:./Drivers/FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:./Drivers/FreeRTOS/tasks.c ****  *
  24:./Drivers/FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  25:./Drivers/FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  26:./Drivers/FreeRTOS/tasks.c ****  *
  27:./Drivers/FreeRTOS/tasks.c ****  */
  28:./Drivers/FreeRTOS/tasks.c **** 
  29:./Drivers/FreeRTOS/tasks.c **** /* Standard includes. */
  30:./Drivers/FreeRTOS/tasks.c **** #include <stdlib.h>
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 4


  31:./Drivers/FreeRTOS/tasks.c **** #include <string.h>
  32:./Drivers/FreeRTOS/tasks.c **** 
  33:./Drivers/FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:./Drivers/FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:./Drivers/FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  36:./Drivers/FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:./Drivers/FreeRTOS/tasks.c **** 
  38:./Drivers/FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:./Drivers/FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:./Drivers/FreeRTOS/tasks.c **** #include "task.h"
  41:./Drivers/FreeRTOS/tasks.c **** #include "timers.h"
  42:./Drivers/FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:./Drivers/FreeRTOS/tasks.c **** 
  44:./Drivers/FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:./Drivers/FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:./Drivers/FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:./Drivers/FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:./Drivers/FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:./Drivers/FreeRTOS/tasks.c **** 
  50:./Drivers/FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:./Drivers/FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  52:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:./Drivers/FreeRTOS/tasks.c **** 
  54:./Drivers/FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:./Drivers/FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:./Drivers/FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:./Drivers/FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:./Drivers/FreeRTOS/tasks.c ****     #include <stdio.h>
  59:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:./Drivers/FreeRTOS/tasks.c **** 
  61:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:./Drivers/FreeRTOS/tasks.c **** 
  63:./Drivers/FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:./Drivers/FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:./Drivers/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:./Drivers/FreeRTOS/tasks.c **** #else
  67:./Drivers/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:./Drivers/FreeRTOS/tasks.c **** #endif
  69:./Drivers/FreeRTOS/tasks.c **** 
  70:./Drivers/FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:./Drivers/FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:./Drivers/FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:./Drivers/FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:./Drivers/FreeRTOS/tasks.c **** 
  75:./Drivers/FreeRTOS/tasks.c **** /*
  76:./Drivers/FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:./Drivers/FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:./Drivers/FreeRTOS/tasks.c ****  */
  79:./Drivers/FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:./Drivers/FreeRTOS/tasks.c **** 
  81:./Drivers/FreeRTOS/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:./Drivers/FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:./Drivers/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:./Drivers/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:./Drivers/FreeRTOS/tasks.c **** 
  86:./Drivers/FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:./Drivers/FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 5


  88:./Drivers/FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:./Drivers/FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:./Drivers/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:./Drivers/FreeRTOS/tasks.c **** #else
  92:./Drivers/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:./Drivers/FreeRTOS/tasks.c **** #endif
  94:./Drivers/FreeRTOS/tasks.c **** 
  95:./Drivers/FreeRTOS/tasks.c **** /*
  96:./Drivers/FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:./Drivers/FreeRTOS/tasks.c ****  */
  98:./Drivers/FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:./Drivers/FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:./Drivers/FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:./Drivers/FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:./Drivers/FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:./Drivers/FreeRTOS/tasks.c **** 
 104:./Drivers/FreeRTOS/tasks.c **** /*
 105:./Drivers/FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:./Drivers/FreeRTOS/tasks.c ****  * be global, rather than file scope.
 107:./Drivers/FreeRTOS/tasks.c ****  */
 108:./Drivers/FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:./Drivers/FreeRTOS/tasks.c ****     #define static
 110:./Drivers/FreeRTOS/tasks.c **** #endif
 111:./Drivers/FreeRTOS/tasks.c **** 
 112:./Drivers/FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:./Drivers/FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:./Drivers/FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:./Drivers/FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:./Drivers/FreeRTOS/tasks.c **** #endif
 117:./Drivers/FreeRTOS/tasks.c **** 
 118:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:./Drivers/FreeRTOS/tasks.c **** 
 120:./Drivers/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:./Drivers/FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:./Drivers/FreeRTOS/tasks.c ****  * microcontroller architecture. */
 123:./Drivers/FreeRTOS/tasks.c **** 
 124:./Drivers/FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:./Drivers/FreeRTOS/tasks.c ****  * state task. */
 126:./Drivers/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:./Drivers/FreeRTOS/tasks.c ****     {                                               \
 128:./Drivers/FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:./Drivers/FreeRTOS/tasks.c ****         {                                           \
 130:./Drivers/FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:./Drivers/FreeRTOS/tasks.c ****         }                                           \
 132:./Drivers/FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:./Drivers/FreeRTOS/tasks.c **** 
 134:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 135:./Drivers/FreeRTOS/tasks.c **** 
 136:./Drivers/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:./Drivers/FreeRTOS/tasks.c ****     {                                                                         \
 138:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:./Drivers/FreeRTOS/tasks.c ****                                                                               \
 140:./Drivers/FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:./Drivers/FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:./Drivers/FreeRTOS/tasks.c ****         {                                                                     \
 143:./Drivers/FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:./Drivers/FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 6


 145:./Drivers/FreeRTOS/tasks.c ****         }                                                                     \
 146:./Drivers/FreeRTOS/tasks.c ****                                                                               \
 147:./Drivers/FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:./Drivers/FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:./Drivers/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:./Drivers/FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:./Drivers/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:./Drivers/FreeRTOS/tasks.c **** 
 153:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 154:./Drivers/FreeRTOS/tasks.c **** 
 155:./Drivers/FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:./Drivers/FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:./Drivers/FreeRTOS/tasks.c ****  * being used. */
 158:./Drivers/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:./Drivers/FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:./Drivers/FreeRTOS/tasks.c **** 
 161:./Drivers/FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:./Drivers/FreeRTOS/tasks.c **** 
 163:./Drivers/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:./Drivers/FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:./Drivers/FreeRTOS/tasks.c ****  * architecture being used. */
 166:./Drivers/FreeRTOS/tasks.c **** 
 167:./Drivers/FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:./Drivers/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 169:./Drivers/FreeRTOS/tasks.c **** 
 170:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 171:./Drivers/FreeRTOS/tasks.c **** 
 172:./Drivers/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:./Drivers/FreeRTOS/tasks.c ****     {                                                                                           \
 174:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:./Drivers/FreeRTOS/tasks.c ****                                                                                                 \
 176:./Drivers/FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:./Drivers/FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:./Drivers/FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:./Drivers/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:./Drivers/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:./Drivers/FreeRTOS/tasks.c **** 
 182:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 183:./Drivers/FreeRTOS/tasks.c **** 
 184:./Drivers/FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:./Drivers/FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:./Drivers/FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:./Drivers/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:./Drivers/FreeRTOS/tasks.c ****     {                                                                                              
 189:./Drivers/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:./Drivers/FreeRTOS/tasks.c ****         {                                                                                          
 191:./Drivers/FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:./Drivers/FreeRTOS/tasks.c ****         }                                                                                          
 193:./Drivers/FreeRTOS/tasks.c ****     }
 194:./Drivers/FreeRTOS/tasks.c **** 
 195:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:./Drivers/FreeRTOS/tasks.c **** 
 197:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 198:./Drivers/FreeRTOS/tasks.c **** 
 199:./Drivers/FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:./Drivers/FreeRTOS/tasks.c ****  * count overflows. */
 201:./Drivers/FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 7


 202:./Drivers/FreeRTOS/tasks.c ****     {                                                                             \
 203:./Drivers/FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
 204:./Drivers/FreeRTOS/tasks.c ****                                                                                   \
 205:./Drivers/FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:./Drivers/FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:./Drivers/FreeRTOS/tasks.c ****                                                                                   \
 208:./Drivers/FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:./Drivers/FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:./Drivers/FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:./Drivers/FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 212:./Drivers/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:./Drivers/FreeRTOS/tasks.c ****     }
 214:./Drivers/FreeRTOS/tasks.c **** 
 215:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 216:./Drivers/FreeRTOS/tasks.c **** 
 217:./Drivers/FreeRTOS/tasks.c **** /*
 218:./Drivers/FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:./Drivers/FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:./Drivers/FreeRTOS/tasks.c ****  */
 221:./Drivers/FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:./Drivers/FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:./Drivers/FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:./Drivers/FreeRTOS/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:./Drivers/FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 227:./Drivers/FreeRTOS/tasks.c **** 
 228:./Drivers/FreeRTOS/tasks.c **** /*
 229:./Drivers/FreeRTOS/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:./Drivers/FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:./Drivers/FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:./Drivers/FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:./Drivers/FreeRTOS/tasks.c ****  */
 234:./Drivers/FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:./Drivers/FreeRTOS/tasks.c **** 
 236:./Drivers/FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:./Drivers/FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:./Drivers/FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:./Drivers/FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:./Drivers/FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:./Drivers/FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:./Drivers/FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:./Drivers/FreeRTOS/tasks.c ****  * to its original value when it is released. */
 244:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:./Drivers/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:./Drivers/FreeRTOS/tasks.c **** #else
 247:./Drivers/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:./Drivers/FreeRTOS/tasks.c **** #endif
 249:./Drivers/FreeRTOS/tasks.c **** 
 250:./Drivers/FreeRTOS/tasks.c **** /*
 251:./Drivers/FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:./Drivers/FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:./Drivers/FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 254:./Drivers/FreeRTOS/tasks.c ****  */
 255:./Drivers/FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:./Drivers/FreeRTOS/tasks.c **** {
 257:./Drivers/FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 8


 259:./Drivers/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:./Drivers/FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 261:./Drivers/FreeRTOS/tasks.c ****     #endif
 262:./Drivers/FreeRTOS/tasks.c **** 
 263:./Drivers/FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:./Drivers/FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:./Drivers/FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:./Drivers/FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:./Drivers/FreeRTOS/tasks.c **** 
 269:./Drivers/FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:./Drivers/FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:./Drivers/FreeRTOS/tasks.c ****     #endif
 272:./Drivers/FreeRTOS/tasks.c **** 
 273:./Drivers/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:./Drivers/FreeRTOS/tasks.c ****     #endif
 276:./Drivers/FreeRTOS/tasks.c **** 
 277:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:./Drivers/FreeRTOS/tasks.c ****     #endif
 281:./Drivers/FreeRTOS/tasks.c **** 
 282:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:./Drivers/FreeRTOS/tasks.c ****     #endif
 286:./Drivers/FreeRTOS/tasks.c **** 
 287:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:./Drivers/FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:./Drivers/FreeRTOS/tasks.c ****     #endif
 290:./Drivers/FreeRTOS/tasks.c **** 
 291:./Drivers/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:./Drivers/FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:./Drivers/FreeRTOS/tasks.c ****     #endif
 294:./Drivers/FreeRTOS/tasks.c **** 
 295:./Drivers/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:./Drivers/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:./Drivers/FreeRTOS/tasks.c ****     #endif
 298:./Drivers/FreeRTOS/tasks.c **** 
 299:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 300:./Drivers/FreeRTOS/tasks.c **** 
 301:./Drivers/FreeRTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 302:./Drivers/FreeRTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 303:./Drivers/FreeRTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 304:./Drivers/FreeRTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 305:./Drivers/FreeRTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 306:./Drivers/FreeRTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 307:./Drivers/FreeRTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 308:./Drivers/FreeRTOS/tasks.c ****          *
 309:./Drivers/FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 310:./Drivers/FreeRTOS/tasks.c ****          * for additional information. */
 311:./Drivers/FreeRTOS/tasks.c ****         struct  _reent xNewLib_reent;
 312:./Drivers/FreeRTOS/tasks.c ****     #endif
 313:./Drivers/FreeRTOS/tasks.c **** 
 314:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 315:./Drivers/FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 9


 316:./Drivers/FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 317:./Drivers/FreeRTOS/tasks.c ****     #endif
 318:./Drivers/FreeRTOS/tasks.c **** 
 319:./Drivers/FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 320:./Drivers/FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 321:./Drivers/FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 322:./Drivers/FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 323:./Drivers/FreeRTOS/tasks.c ****     #endif
 324:./Drivers/FreeRTOS/tasks.c **** 
 325:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 326:./Drivers/FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 327:./Drivers/FreeRTOS/tasks.c ****     #endif
 328:./Drivers/FreeRTOS/tasks.c **** 
 329:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 330:./Drivers/FreeRTOS/tasks.c ****         int iTaskErrno;
 331:./Drivers/FreeRTOS/tasks.c ****     #endif
 332:./Drivers/FreeRTOS/tasks.c **** } tskTCB;
 333:./Drivers/FreeRTOS/tasks.c **** 
 334:./Drivers/FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 335:./Drivers/FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 336:./Drivers/FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 337:./Drivers/FreeRTOS/tasks.c **** 
 338:./Drivers/FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 339:./Drivers/FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 340:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 341:./Drivers/FreeRTOS/tasks.c **** 
 342:./Drivers/FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 343:./Drivers/FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 344:./Drivers/FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 345:./Drivers/FreeRTOS/tasks.c ****  * the static qualifier. */
 346:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 347:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 348:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 349:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 350:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 351:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 352:./Drivers/FreeRTOS/tasks.c **** 
 353:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 354:./Drivers/FreeRTOS/tasks.c **** 
 355:./Drivers/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 356:./Drivers/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 357:./Drivers/FreeRTOS/tasks.c **** 
 358:./Drivers/FreeRTOS/tasks.c **** #endif
 359:./Drivers/FreeRTOS/tasks.c **** 
 360:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 361:./Drivers/FreeRTOS/tasks.c **** 
 362:./Drivers/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 363:./Drivers/FreeRTOS/tasks.c **** 
 364:./Drivers/FreeRTOS/tasks.c **** #endif
 365:./Drivers/FreeRTOS/tasks.c **** 
 366:./Drivers/FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 367:./Drivers/FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 368:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 369:./Drivers/FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 370:./Drivers/FreeRTOS/tasks.c **** #endif
 371:./Drivers/FreeRTOS/tasks.c **** 
 372:./Drivers/FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 10


 373:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 374:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 375:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 376:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 377:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 378:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 379:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 380:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 381:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 382:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 383:./Drivers/FreeRTOS/tasks.c **** 
 384:./Drivers/FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 385:./Drivers/FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 386:./Drivers/FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 387:./Drivers/FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 388:./Drivers/FreeRTOS/tasks.c **** 
 389:./Drivers/FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 390:./Drivers/FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 391:./Drivers/FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 392:./Drivers/FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 393:./Drivers/FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 394:./Drivers/FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 395:./Drivers/FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 396:./Drivers/FreeRTOS/tasks.c ****  * accessed from a critical section. */
 397:./Drivers/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 398:./Drivers/FreeRTOS/tasks.c **** 
 399:./Drivers/FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 400:./Drivers/FreeRTOS/tasks.c **** 
 401:./Drivers/FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 402:./Drivers/FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 403:./Drivers/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 404:./Drivers/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 405:./Drivers/FreeRTOS/tasks.c **** 
 406:./Drivers/FreeRTOS/tasks.c **** #endif
 407:./Drivers/FreeRTOS/tasks.c **** 
 408:./Drivers/FreeRTOS/tasks.c **** /*lint -restore */
 409:./Drivers/FreeRTOS/tasks.c **** 
 410:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 411:./Drivers/FreeRTOS/tasks.c **** 
 412:./Drivers/FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 413:./Drivers/FreeRTOS/tasks.c **** 
 414:./Drivers/FreeRTOS/tasks.c **** /**
 415:./Drivers/FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 416:./Drivers/FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 417:./Drivers/FreeRTOS/tasks.c ****  * is in any other state.
 418:./Drivers/FreeRTOS/tasks.c ****  */
 419:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 420:./Drivers/FreeRTOS/tasks.c **** 
 421:./Drivers/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 422:./Drivers/FreeRTOS/tasks.c **** 
 423:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 424:./Drivers/FreeRTOS/tasks.c **** 
 425:./Drivers/FreeRTOS/tasks.c **** /*
 426:./Drivers/FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 427:./Drivers/FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 428:./Drivers/FreeRTOS/tasks.c ****  */
 429:./Drivers/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 11


 430:./Drivers/FreeRTOS/tasks.c **** 
 431:./Drivers/FreeRTOS/tasks.c **** /*
 432:./Drivers/FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 433:./Drivers/FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 434:./Drivers/FreeRTOS/tasks.c ****  * creation of the first user task.
 435:./Drivers/FreeRTOS/tasks.c ****  *
 436:./Drivers/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 437:./Drivers/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 438:./Drivers/FreeRTOS/tasks.c ****  *
 439:./Drivers/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 440:./Drivers/FreeRTOS/tasks.c ****  *
 441:./Drivers/FreeRTOS/tasks.c ****  */
 442:./Drivers/FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 443:./Drivers/FreeRTOS/tasks.c **** 
 444:./Drivers/FreeRTOS/tasks.c **** /*
 445:./Drivers/FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 446:./Drivers/FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 447:./Drivers/FreeRTOS/tasks.c ****  *
 448:./Drivers/FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 449:./Drivers/FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 450:./Drivers/FreeRTOS/tasks.c ****  */
 451:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 452:./Drivers/FreeRTOS/tasks.c **** 
 453:./Drivers/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 454:./Drivers/FreeRTOS/tasks.c **** 
 455:./Drivers/FreeRTOS/tasks.c **** #endif
 456:./Drivers/FreeRTOS/tasks.c **** 
 457:./Drivers/FreeRTOS/tasks.c **** /*
 458:./Drivers/FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 459:./Drivers/FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 460:./Drivers/FreeRTOS/tasks.c ****  * and its TCB deleted.
 461:./Drivers/FreeRTOS/tasks.c ****  */
 462:./Drivers/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 463:./Drivers/FreeRTOS/tasks.c **** 
 464:./Drivers/FreeRTOS/tasks.c **** /*
 465:./Drivers/FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 466:./Drivers/FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 467:./Drivers/FreeRTOS/tasks.c ****  */
 468:./Drivers/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 469:./Drivers/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 470:./Drivers/FreeRTOS/tasks.c **** 
 471:./Drivers/FreeRTOS/tasks.c **** /*
 472:./Drivers/FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 473:./Drivers/FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 474:./Drivers/FreeRTOS/tasks.c ****  * a suspended list, etc.).
 475:./Drivers/FreeRTOS/tasks.c ****  *
 476:./Drivers/FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 477:./Drivers/FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 478:./Drivers/FreeRTOS/tasks.c ****  */
 479:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 480:./Drivers/FreeRTOS/tasks.c **** 
 481:./Drivers/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 482:./Drivers/FreeRTOS/tasks.c ****                                                      List_t * pxList,
 483:./Drivers/FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 484:./Drivers/FreeRTOS/tasks.c **** 
 485:./Drivers/FreeRTOS/tasks.c **** #endif
 486:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 12


 487:./Drivers/FreeRTOS/tasks.c **** /*
 488:./Drivers/FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 489:./Drivers/FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 490:./Drivers/FreeRTOS/tasks.c ****  */
 491:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 492:./Drivers/FreeRTOS/tasks.c **** 
 493:./Drivers/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 494:./Drivers/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 495:./Drivers/FreeRTOS/tasks.c **** 
 496:./Drivers/FreeRTOS/tasks.c **** #endif
 497:./Drivers/FreeRTOS/tasks.c **** 
 498:./Drivers/FreeRTOS/tasks.c **** /*
 499:./Drivers/FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 500:./Drivers/FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 501:./Drivers/FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 502:./Drivers/FreeRTOS/tasks.c ****  */
 503:./Drivers/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 504:./Drivers/FreeRTOS/tasks.c **** 
 505:./Drivers/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 506:./Drivers/FreeRTOS/tasks.c **** 
 507:./Drivers/FreeRTOS/tasks.c **** #endif
 508:./Drivers/FreeRTOS/tasks.c **** 
 509:./Drivers/FreeRTOS/tasks.c **** /*
 510:./Drivers/FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 511:./Drivers/FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 512:./Drivers/FreeRTOS/tasks.c ****  *
 513:./Drivers/FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 514:./Drivers/FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 515:./Drivers/FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 516:./Drivers/FreeRTOS/tasks.c ****  * set to a value other than 1.
 517:./Drivers/FreeRTOS/tasks.c ****  */
 518:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 519:./Drivers/FreeRTOS/tasks.c **** 
 520:./Drivers/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 521:./Drivers/FreeRTOS/tasks.c **** 
 522:./Drivers/FreeRTOS/tasks.c **** #endif
 523:./Drivers/FreeRTOS/tasks.c **** 
 524:./Drivers/FreeRTOS/tasks.c **** /*
 525:./Drivers/FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 526:./Drivers/FreeRTOS/tasks.c ****  * will exit the Blocked state.
 527:./Drivers/FreeRTOS/tasks.c ****  */
 528:./Drivers/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 529:./Drivers/FreeRTOS/tasks.c **** 
 530:./Drivers/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 531:./Drivers/FreeRTOS/tasks.c **** 
 532:./Drivers/FreeRTOS/tasks.c **** /*
 533:./Drivers/FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 534:./Drivers/FreeRTOS/tasks.c ****  * human readable tables of task information.
 535:./Drivers/FreeRTOS/tasks.c ****  */
 536:./Drivers/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 537:./Drivers/FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 538:./Drivers/FreeRTOS/tasks.c **** 
 539:./Drivers/FreeRTOS/tasks.c **** #endif
 540:./Drivers/FreeRTOS/tasks.c **** 
 541:./Drivers/FreeRTOS/tasks.c **** /*
 542:./Drivers/FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:./Drivers/FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 13


 544:./Drivers/FreeRTOS/tasks.c ****  */
 545:./Drivers/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 546:./Drivers/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 547:./Drivers/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 548:./Drivers/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 549:./Drivers/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 550:./Drivers/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 551:./Drivers/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 552:./Drivers/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:./Drivers/FreeRTOS/tasks.c **** 
 554:./Drivers/FreeRTOS/tasks.c **** /*
 555:./Drivers/FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:./Drivers/FreeRTOS/tasks.c ****  * under the control of the scheduler.
 557:./Drivers/FreeRTOS/tasks.c ****  */
 558:./Drivers/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 559:./Drivers/FreeRTOS/tasks.c **** 
 560:./Drivers/FreeRTOS/tasks.c **** /*
 561:./Drivers/FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:./Drivers/FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:./Drivers/FreeRTOS/tasks.c ****  * called by the function.
 564:./Drivers/FreeRTOS/tasks.c ****  */
 565:./Drivers/FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:./Drivers/FreeRTOS/tasks.c **** 
 567:./Drivers/FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:./Drivers/FreeRTOS/tasks.c **** 
 569:./Drivers/FreeRTOS/tasks.c **** #endif
 570:./Drivers/FreeRTOS/tasks.c **** 
 571:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 572:./Drivers/FreeRTOS/tasks.c **** 
 573:./Drivers/FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:./Drivers/FreeRTOS/tasks.c **** 
 575:./Drivers/FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 576:./Drivers/FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 577:./Drivers/FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 578:./Drivers/FreeRTOS/tasks.c ****                                     void * const pvParameters,
 579:./Drivers/FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 580:./Drivers/FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 581:./Drivers/FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 582:./Drivers/FreeRTOS/tasks.c ****     {
 583:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 584:./Drivers/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 585:./Drivers/FreeRTOS/tasks.c **** 
 586:./Drivers/FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 587:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 588:./Drivers/FreeRTOS/tasks.c **** 
 589:./Drivers/FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 590:./Drivers/FreeRTOS/tasks.c ****             {
 591:./Drivers/FreeRTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 592:./Drivers/FreeRTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 593:./Drivers/FreeRTOS/tasks.c ****                  * structure. */
 594:./Drivers/FreeRTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 595:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 596:./Drivers/FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 597:./Drivers/FreeRTOS/tasks.c ****             }
 598:./Drivers/FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 599:./Drivers/FreeRTOS/tasks.c **** 
 600:./Drivers/FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 14


 601:./Drivers/FreeRTOS/tasks.c ****         {
 602:./Drivers/FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 603:./Drivers/FreeRTOS/tasks.c ****              * function - use them. */
 604:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 605:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:./Drivers/FreeRTOS/tasks.c **** 
 607:./Drivers/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 608:./Drivers/FreeRTOS/tasks.c ****                 {
 609:./Drivers/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 610:./Drivers/FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 611:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:./Drivers/FreeRTOS/tasks.c ****                 }
 613:./Drivers/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 614:./Drivers/FreeRTOS/tasks.c **** 
 615:./Drivers/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 616:./Drivers/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 617:./Drivers/FreeRTOS/tasks.c ****         }
 618:./Drivers/FreeRTOS/tasks.c ****         else
 619:./Drivers/FreeRTOS/tasks.c ****         {
 620:./Drivers/FreeRTOS/tasks.c ****             xReturn = NULL;
 621:./Drivers/FreeRTOS/tasks.c ****         }
 622:./Drivers/FreeRTOS/tasks.c **** 
 623:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 624:./Drivers/FreeRTOS/tasks.c ****     }
 625:./Drivers/FreeRTOS/tasks.c **** 
 626:./Drivers/FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 628:./Drivers/FreeRTOS/tasks.c **** 
 629:./Drivers/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:./Drivers/FreeRTOS/tasks.c **** 
 631:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 632:./Drivers/FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 633:./Drivers/FreeRTOS/tasks.c ****     {
 634:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 635:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 636:./Drivers/FreeRTOS/tasks.c **** 
 637:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 638:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 639:./Drivers/FreeRTOS/tasks.c **** 
 640:./Drivers/FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 641:./Drivers/FreeRTOS/tasks.c ****         {
 642:./Drivers/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 643:./Drivers/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 644:./Drivers/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 645:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 646:./Drivers/FreeRTOS/tasks.c **** 
 647:./Drivers/FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 648:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:./Drivers/FreeRTOS/tasks.c **** 
 650:./Drivers/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 651:./Drivers/FreeRTOS/tasks.c ****                 {
 652:./Drivers/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 653:./Drivers/FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 654:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 655:./Drivers/FreeRTOS/tasks.c ****                 }
 656:./Drivers/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 657:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 15


 658:./Drivers/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 659:./Drivers/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 660:./Drivers/FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 661:./Drivers/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 662:./Drivers/FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 663:./Drivers/FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 664:./Drivers/FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 665:./Drivers/FreeRTOS/tasks.c **** 
 666:./Drivers/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 667:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 668:./Drivers/FreeRTOS/tasks.c ****         }
 669:./Drivers/FreeRTOS/tasks.c **** 
 670:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 671:./Drivers/FreeRTOS/tasks.c ****     }
 672:./Drivers/FreeRTOS/tasks.c **** 
 673:./Drivers/FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 674:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 675:./Drivers/FreeRTOS/tasks.c **** 
 676:./Drivers/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 677:./Drivers/FreeRTOS/tasks.c **** 
 678:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 679:./Drivers/FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 680:./Drivers/FreeRTOS/tasks.c ****     {
 681:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 682:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 683:./Drivers/FreeRTOS/tasks.c **** 
 684:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 685:./Drivers/FreeRTOS/tasks.c **** 
 686:./Drivers/FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 687:./Drivers/FreeRTOS/tasks.c ****         {
 688:./Drivers/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 689:./Drivers/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 690:./Drivers/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 691:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 692:./Drivers/FreeRTOS/tasks.c **** 
 693:./Drivers/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 694:./Drivers/FreeRTOS/tasks.c ****             {
 695:./Drivers/FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 696:./Drivers/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 697:./Drivers/FreeRTOS/tasks.c **** 
 698:./Drivers/FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 699:./Drivers/FreeRTOS/tasks.c ****                     {
 700:./Drivers/FreeRTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 701:./Drivers/FreeRTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 702:./Drivers/FreeRTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 703:./Drivers/FreeRTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 704:./Drivers/FreeRTOS/tasks.c ****                     }
 705:./Drivers/FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 706:./Drivers/FreeRTOS/tasks.c **** 
 707:./Drivers/FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 708:./Drivers/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 709:./Drivers/FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 710:./Drivers/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 711:./Drivers/FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 712:./Drivers/FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 713:./Drivers/FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 714:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 16


 715:./Drivers/FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 716:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 717:./Drivers/FreeRTOS/tasks.c ****             }
 718:./Drivers/FreeRTOS/tasks.c ****         }
 719:./Drivers/FreeRTOS/tasks.c **** 
 720:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 721:./Drivers/FreeRTOS/tasks.c ****     }
 722:./Drivers/FreeRTOS/tasks.c **** 
 723:./Drivers/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 724:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 725:./Drivers/FreeRTOS/tasks.c **** 
 726:./Drivers/FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 727:./Drivers/FreeRTOS/tasks.c **** 
 728:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 729:./Drivers/FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 730:./Drivers/FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 731:./Drivers/FreeRTOS/tasks.c ****                             void * const pvParameters,
 732:./Drivers/FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 733:./Drivers/FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 734:./Drivers/FreeRTOS/tasks.c ****     {
 163              		.loc 1 734 5
 164              		.cfi_startproc
 165              		@ args = 8, pretend = 0, frame = 32
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 8CB0     		sub	sp, sp, #48
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 56
 175 0004 04AF     		add	r7, sp, #16
 176              	.LCFI2:
 177              		.cfi_def_cfa 7, 40
 178 0006 F860     		str	r0, [r7, #12]
 179 0008 B960     		str	r1, [r7, #8]
 180 000a 3B60     		str	r3, [r7]
 181 000c 1346     		mov	r3, r2	@ movhi
 182 000e FB80     		strh	r3, [r7, #6]	@ movhi
 183              	.LBB155:
 735:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 736:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 737:./Drivers/FreeRTOS/tasks.c **** 
 738:./Drivers/FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 739:./Drivers/FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 740:./Drivers/FreeRTOS/tasks.c ****          * the TCB then the stack. */
 741:./Drivers/FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 742:./Drivers/FreeRTOS/tasks.c ****             {
 743:./Drivers/FreeRTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 744:./Drivers/FreeRTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 745:./Drivers/FreeRTOS/tasks.c ****                  * allocation is being used. */
 746:./Drivers/FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 747:./Drivers/FreeRTOS/tasks.c **** 
 748:./Drivers/FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 749:./Drivers/FreeRTOS/tasks.c ****                 {
 750:./Drivers/FreeRTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 17


 751:./Drivers/FreeRTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 752:./Drivers/FreeRTOS/tasks.c ****                      * be deleted later if required. */
 753:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStack
 754:./Drivers/FreeRTOS/tasks.c **** 
 755:./Drivers/FreeRTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 756:./Drivers/FreeRTOS/tasks.c ****                     {
 757:./Drivers/FreeRTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 758:./Drivers/FreeRTOS/tasks.c ****                         vPortFree( pxNewTCB );
 759:./Drivers/FreeRTOS/tasks.c ****                         pxNewTCB = NULL;
 760:./Drivers/FreeRTOS/tasks.c ****                     }
 761:./Drivers/FreeRTOS/tasks.c ****                 }
 762:./Drivers/FreeRTOS/tasks.c ****             }
 763:./Drivers/FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 764:./Drivers/FreeRTOS/tasks.c ****             {
 765:./Drivers/FreeRTOS/tasks.c ****                 StackType_t * pxStack;
 766:./Drivers/FreeRTOS/tasks.c **** 
 767:./Drivers/FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 768:./Drivers/FreeRTOS/tasks.c ****                 pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 184              		.loc 1 768 50
 185 0010 FB88     		ldrh	r3, [r7, #6]
 186              		.loc 1 768 27
 187 0012 9B00     		lsls	r3, r3, #2
 188 0014 1846     		mov	r0, r3
 189 0016 FFF7FEFF 		bl	pvPortMalloc
 190 001a 7861     		str	r0, [r7, #20]
 769:./Drivers/FreeRTOS/tasks.c **** 
 770:./Drivers/FreeRTOS/tasks.c ****                 if( pxStack != NULL )
 191              		.loc 1 770 19
 192 001c 7B69     		ldr	r3, [r7, #20]
 193 001e 002B     		cmp	r3, #0
 194 0020 0ED0     		beq	.L2
 771:./Drivers/FreeRTOS/tasks.c ****                 {
 772:./Drivers/FreeRTOS/tasks.c ****                     /* Allocate space for the TCB. */
 773:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 195              		.loc 1 773 44
 196 0022 5820     		movs	r0, #88
 197 0024 FFF7FEFF 		bl	pvPortMalloc
 198 0028 F861     		str	r0, [r7, #28]
 774:./Drivers/FreeRTOS/tasks.c **** 
 775:./Drivers/FreeRTOS/tasks.c ****                     if( pxNewTCB != NULL )
 199              		.loc 1 775 23
 200 002a FB69     		ldr	r3, [r7, #28]
 201 002c 002B     		cmp	r3, #0
 202 002e 03D0     		beq	.L3
 776:./Drivers/FreeRTOS/tasks.c ****                     {
 777:./Drivers/FreeRTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 778:./Drivers/FreeRTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 203              		.loc 1 778 43
 204 0030 FB69     		ldr	r3, [r7, #28]
 205 0032 7A69     		ldr	r2, [r7, #20]
 206 0034 1A63     		str	r2, [r3, #48]
 207 0036 05E0     		b	.L4
 208              	.L3:
 779:./Drivers/FreeRTOS/tasks.c ****                     }
 780:./Drivers/FreeRTOS/tasks.c ****                     else
 781:./Drivers/FreeRTOS/tasks.c ****                     {
 782:./Drivers/FreeRTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 18


 783:./Drivers/FreeRTOS/tasks.c ****                          * it again. */
 784:./Drivers/FreeRTOS/tasks.c ****                         vPortFreeStack( pxStack );
 209              		.loc 1 784 25
 210 0038 7869     		ldr	r0, [r7, #20]
 211 003a FFF7FEFF 		bl	vPortFree
 212 003e 01E0     		b	.L4
 213              	.L2:
 785:./Drivers/FreeRTOS/tasks.c ****                     }
 786:./Drivers/FreeRTOS/tasks.c ****                 }
 787:./Drivers/FreeRTOS/tasks.c ****                 else
 788:./Drivers/FreeRTOS/tasks.c ****                 {
 789:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 214              		.loc 1 789 30
 215 0040 0023     		movs	r3, #0
 216 0042 FB61     		str	r3, [r7, #28]
 217              	.L4:
 218              	.LBE155:
 790:./Drivers/FreeRTOS/tasks.c ****                 }
 791:./Drivers/FreeRTOS/tasks.c ****             }
 792:./Drivers/FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 793:./Drivers/FreeRTOS/tasks.c **** 
 794:./Drivers/FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 219              		.loc 1 794 11
 220 0044 FB69     		ldr	r3, [r7, #28]
 221 0046 002B     		cmp	r3, #0
 222 0048 13D0     		beq	.L5
 795:./Drivers/FreeRTOS/tasks.c ****         {
 796:./Drivers/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 797:./Drivers/FreeRTOS/tasks.c ****                 {
 798:./Drivers/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 799:./Drivers/FreeRTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 800:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801:./Drivers/FreeRTOS/tasks.c ****                 }
 802:./Drivers/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 803:./Drivers/FreeRTOS/tasks.c **** 
 804:./Drivers/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 223              		.loc 1 804 13
 224 004a FA88     		ldrh	r2, [r7, #6]
 225 004c 0023     		movs	r3, #0
 226 004e 0393     		str	r3, [sp, #12]
 227 0050 FB69     		ldr	r3, [r7, #28]
 228 0052 0293     		str	r3, [sp, #8]
 229 0054 FB6A     		ldr	r3, [r7, #44]
 230 0056 0193     		str	r3, [sp, #4]
 231 0058 BB6A     		ldr	r3, [r7, #40]
 232 005a 0093     		str	r3, [sp]
 233 005c 3B68     		ldr	r3, [r7]
 234 005e B968     		ldr	r1, [r7, #8]
 235 0060 F868     		ldr	r0, [r7, #12]
 236 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 805:./Drivers/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 237              		.loc 1 805 13
 238 0066 F869     		ldr	r0, [r7, #28]
 239 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 806:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 240              		.loc 1 806 21
 241 006c 0123     		movs	r3, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 19


 242 006e BB61     		str	r3, [r7, #24]
 243 0070 02E0     		b	.L6
 244              	.L5:
 807:./Drivers/FreeRTOS/tasks.c ****         }
 808:./Drivers/FreeRTOS/tasks.c ****         else
 809:./Drivers/FreeRTOS/tasks.c ****         {
 810:./Drivers/FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 245              		.loc 1 810 21
 246 0072 4FF0FF33 		mov	r3, #-1
 247 0076 BB61     		str	r3, [r7, #24]
 248              	.L6:
 811:./Drivers/FreeRTOS/tasks.c ****         }
 812:./Drivers/FreeRTOS/tasks.c **** 
 813:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 249              		.loc 1 813 16
 250 0078 BB69     		ldr	r3, [r7, #24]
 814:./Drivers/FreeRTOS/tasks.c ****     }
 251              		.loc 1 814 5
 252 007a 1846     		mov	r0, r3
 253 007c 2037     		adds	r7, r7, #32
 254              	.LCFI3:
 255              		.cfi_def_cfa_offset 8
 256 007e BD46     		mov	sp, r7
 257              	.LCFI4:
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 0080 80BD     		pop	{r7, pc}
 261              		.cfi_endproc
 262              	.LFE5:
 264              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	prvInitialiseNewTask:
 272              	.LFB6:
 815:./Drivers/FreeRTOS/tasks.c **** 
 816:./Drivers/FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 817:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 818:./Drivers/FreeRTOS/tasks.c **** 
 819:./Drivers/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 820:./Drivers/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 821:./Drivers/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 822:./Drivers/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 823:./Drivers/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 824:./Drivers/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 825:./Drivers/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 826:./Drivers/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 827:./Drivers/FreeRTOS/tasks.c **** {
 273              		.loc 1 827 1
 274              		.cfi_startproc
 275              		@ args = 16, pretend = 0, frame = 32
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277 0000 80B5     		push	{r7, lr}
 278              	.LCFI5:
 279              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 20


 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 282 0002 88B0     		sub	sp, sp, #32
 283              	.LCFI6:
 284              		.cfi_def_cfa_offset 40
 285 0004 00AF     		add	r7, sp, #0
 286              	.LCFI7:
 287              		.cfi_def_cfa_register 7
 288 0006 F860     		str	r0, [r7, #12]
 289 0008 B960     		str	r1, [r7, #8]
 290 000a 7A60     		str	r2, [r7, #4]
 291 000c 3B60     		str	r3, [r7]
 828:./Drivers/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 829:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t x;
 830:./Drivers/FreeRTOS/tasks.c **** 
 831:./Drivers/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 832:./Drivers/FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 833:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
 834:./Drivers/FreeRTOS/tasks.c **** 
 835:./Drivers/FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 836:./Drivers/FreeRTOS/tasks.c ****         {
 837:./Drivers/FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 838:./Drivers/FreeRTOS/tasks.c ****         }
 839:./Drivers/FreeRTOS/tasks.c ****         else
 840:./Drivers/FreeRTOS/tasks.c ****         {
 841:./Drivers/FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 842:./Drivers/FreeRTOS/tasks.c ****         }
 843:./Drivers/FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 844:./Drivers/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 845:./Drivers/FreeRTOS/tasks.c **** 
 846:./Drivers/FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 847:./Drivers/FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 848:./Drivers/FreeRTOS/tasks.c ****         {
 849:./Drivers/FreeRTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 850:./Drivers/FreeRTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 292              		.loc 1 850 38
 293 000e 3B6B     		ldr	r3, [r7, #48]
 294 0010 186B     		ldr	r0, [r3, #48]
 295              		.loc 1 850 22
 296 0012 7B68     		ldr	r3, [r7, #4]
 297 0014 9B00     		lsls	r3, r3, #2
 298 0016 1A46     		mov	r2, r3
 299 0018 A521     		movs	r1, #165
 300 001a FFF7FEFF 		bl	memset
 851:./Drivers/FreeRTOS/tasks.c ****         }
 852:./Drivers/FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 853:./Drivers/FreeRTOS/tasks.c **** 
 854:./Drivers/FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 855:./Drivers/FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 856:./Drivers/FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 857:./Drivers/FreeRTOS/tasks.c ****      * by the port. */
 858:./Drivers/FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 859:./Drivers/FreeRTOS/tasks.c ****         {
 860:./Drivers/FreeRTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 301              		.loc 1 860 39
 302 001e 3B6B     		ldr	r3, [r7, #48]
 303 0020 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 21


 304              		.loc 1 860 48
 305 0022 7B68     		ldr	r3, [r7, #4]
 306 0024 03F18043 		add	r3, r3, #1073741824
 307 0028 013B     		subs	r3, r3, #1
 308 002a 9B00     		lsls	r3, r3, #2
 309              		.loc 1 860 26
 310 002c 1344     		add	r3, r3, r2
 311 002e BB61     		str	r3, [r7, #24]
 861:./Drivers/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 312              		.loc 1 861 50
 313 0030 BB69     		ldr	r3, [r7, #24]
 314              		.loc 1 861 91
 315 0032 23F00703 		bic	r3, r3, #7
 316              		.loc 1 861 26
 317 0036 BB61     		str	r3, [r7, #24]
 862:./Drivers/FreeRTOS/tasks.c **** 
 863:./Drivers/FreeRTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 864:./Drivers/FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 318              		.loc 1 864 13
 319 0038 BB69     		ldr	r3, [r7, #24]
 320 003a 03F00703 		and	r3, r3, #7
 321 003e 002B     		cmp	r3, #0
 322 0040 0AD0     		beq	.L9
 323              	.LBB156:
 324              	.LBB157:
 325              		.file 2 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 22


  32:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
  62:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 23


  89:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 24


 146:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
 176:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 326              		.loc 2 198 9
 327              		.syntax unified
 328              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 329 0042 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 25


 330 0046 83F31188 		msr basepri, r3											
 331 004a BFF36F8F 		isb														
 332 004e BFF34F8F 		dsb														
 333              	
 334              	@ 0 "" 2
 335              		.thumb
 336              		.syntax unified
 337 0052 7B61     		str	r3, [r7, #20]
 199:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 338              		.loc 2 206 5
 339 0054 00BF     		nop
 340              	.L10:
 341              	.LBE157:
 342              	.LBE156:
 343              		.loc 1 864 13 discriminator 1
 344 0056 FEE7     		b	.L10
 345              	.L9:
 865:./Drivers/FreeRTOS/tasks.c **** 
 866:./Drivers/FreeRTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 867:./Drivers/FreeRTOS/tasks.c ****                 {
 868:./Drivers/FreeRTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 869:./Drivers/FreeRTOS/tasks.c ****                      * debugging. */
 870:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 871:./Drivers/FreeRTOS/tasks.c ****                 }
 872:./Drivers/FreeRTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 873:./Drivers/FreeRTOS/tasks.c ****         }
 874:./Drivers/FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 875:./Drivers/FreeRTOS/tasks.c ****         {
 876:./Drivers/FreeRTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 877:./Drivers/FreeRTOS/tasks.c **** 
 878:./Drivers/FreeRTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 879:./Drivers/FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 880:./Drivers/FreeRTOS/tasks.c **** 
 881:./Drivers/FreeRTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 882:./Drivers/FreeRTOS/tasks.c ****              * performed. */
 883:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 884:./Drivers/FreeRTOS/tasks.c ****         }
 885:./Drivers/FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 886:./Drivers/FreeRTOS/tasks.c **** 
 887:./Drivers/FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 888:./Drivers/FreeRTOS/tasks.c ****     if( pcName != NULL )
 346              		.loc 1 888 7
 347 0058 BB68     		ldr	r3, [r7, #8]
 348 005a 002B     		cmp	r3, #0
 349 005c 1FD0     		beq	.L11
 889:./Drivers/FreeRTOS/tasks.c ****     {
 890:./Drivers/FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 350              		.loc 1 890 16
 351 005e 0023     		movs	r3, #0
 352 0060 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 26


 353              		.loc 1 890 9
 354 0062 12E0     		b	.L12
 355              	.L15:
 891:./Drivers/FreeRTOS/tasks.c ****         {
 892:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 356              		.loc 1 892 47
 357 0064 BA68     		ldr	r2, [r7, #8]
 358 0066 FB69     		ldr	r3, [r7, #28]
 359 0068 1344     		add	r3, r3, r2
 360 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 361              		.loc 1 892 39
 362 006c 3A6B     		ldr	r2, [r7, #48]
 363 006e FB69     		ldr	r3, [r7, #28]
 364 0070 1344     		add	r3, r3, r2
 365 0072 3433     		adds	r3, r3, #52
 366 0074 0A46     		mov	r2, r1
 367 0076 1A70     		strb	r2, [r3]
 893:./Drivers/FreeRTOS/tasks.c **** 
 894:./Drivers/FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 895:./Drivers/FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 896:./Drivers/FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 897:./Drivers/FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 368              		.loc 1 897 23
 369 0078 BA68     		ldr	r2, [r7, #8]
 370 007a FB69     		ldr	r3, [r7, #28]
 371 007c 1344     		add	r3, r3, r2
 372 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 373              		.loc 1 897 15
 374 0080 002B     		cmp	r3, #0
 375 0082 06D0     		beq	.L21
 890:./Drivers/FreeRTOS/tasks.c ****         {
 376              		.loc 1 890 83 discriminator 2
 377 0084 FB69     		ldr	r3, [r7, #28]
 378 0086 0133     		adds	r3, r3, #1
 379 0088 FB61     		str	r3, [r7, #28]
 380              	.L12:
 890:./Drivers/FreeRTOS/tasks.c ****         {
 381              		.loc 1 890 9 discriminator 1
 382 008a FB69     		ldr	r3, [r7, #28]
 383 008c 092B     		cmp	r3, #9
 384 008e E9D9     		bls	.L15
 385 0090 00E0     		b	.L14
 386              	.L21:
 898:./Drivers/FreeRTOS/tasks.c ****             {
 899:./Drivers/FreeRTOS/tasks.c ****                 break;
 387              		.loc 1 899 17
 388 0092 00BF     		nop
 389              	.L14:
 900:./Drivers/FreeRTOS/tasks.c ****             }
 901:./Drivers/FreeRTOS/tasks.c ****             else
 902:./Drivers/FreeRTOS/tasks.c ****             {
 903:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 904:./Drivers/FreeRTOS/tasks.c ****             }
 905:./Drivers/FreeRTOS/tasks.c ****         }
 906:./Drivers/FreeRTOS/tasks.c **** 
 907:./Drivers/FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 908:./Drivers/FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 27


 909:./Drivers/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 390              		.loc 1 909 61
 391 0094 3B6B     		ldr	r3, [r7, #48]
 392 0096 0022     		movs	r2, #0
 393 0098 83F83D20 		strb	r2, [r3, #61]
 394 009c 03E0     		b	.L16
 395              	.L11:
 910:./Drivers/FreeRTOS/tasks.c ****     }
 911:./Drivers/FreeRTOS/tasks.c ****     else
 912:./Drivers/FreeRTOS/tasks.c ****     {
 913:./Drivers/FreeRTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 914:./Drivers/FreeRTOS/tasks.c ****          * terminator when it is read out. */
 915:./Drivers/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 396              		.loc 1 915 35
 397 009e 3B6B     		ldr	r3, [r7, #48]
 398 00a0 0022     		movs	r2, #0
 399 00a2 83F83420 		strb	r2, [r3, #52]
 400              	.L16:
 916:./Drivers/FreeRTOS/tasks.c ****     }
 917:./Drivers/FreeRTOS/tasks.c **** 
 918:./Drivers/FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 919:./Drivers/FreeRTOS/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 401              		.loc 1 919 5
 402 00a6 BB6A     		ldr	r3, [r7, #40]
 403 00a8 042B     		cmp	r3, #4
 404 00aa 0AD9     		bls	.L17
 405              	.LBB158:
 406              	.LBB159:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 407              		.loc 2 198 9
 408              		.syntax unified
 409              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 410 00ac 4FF05003 			mov r3, #80												
 411 00b0 83F31188 		msr basepri, r3											
 412 00b4 BFF36F8F 		isb														
 413 00b8 BFF34F8F 		dsb														
 414              	
 415              	@ 0 "" 2
 416              		.thumb
 417              		.syntax unified
 418 00bc 3B61     		str	r3, [r7, #16]
 419              		.loc 2 206 5
 420 00be 00BF     		nop
 421              	.L18:
 422              	.LBE159:
 423              	.LBE158:
 424              		.loc 1 919 5 discriminator 2
 425 00c0 FEE7     		b	.L18
 426              	.L17:
 920:./Drivers/FreeRTOS/tasks.c **** 
 921:./Drivers/FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 427              		.loc 1 921 7
 428 00c2 BB6A     		ldr	r3, [r7, #40]
 429 00c4 042B     		cmp	r3, #4
 430 00c6 01D9     		bls	.L19
 922:./Drivers/FreeRTOS/tasks.c ****     {
 923:./Drivers/FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 28


 431              		.loc 1 923 20
 432 00c8 0423     		movs	r3, #4
 433 00ca BB62     		str	r3, [r7, #40]
 434              	.L19:
 924:./Drivers/FreeRTOS/tasks.c ****     }
 925:./Drivers/FreeRTOS/tasks.c ****     else
 926:./Drivers/FreeRTOS/tasks.c ****     {
 927:./Drivers/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 928:./Drivers/FreeRTOS/tasks.c ****     }
 929:./Drivers/FreeRTOS/tasks.c **** 
 930:./Drivers/FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 435              		.loc 1 930 26
 436 00cc 3B6B     		ldr	r3, [r7, #48]
 437 00ce BA6A     		ldr	r2, [r7, #40]
 438 00d0 DA62     		str	r2, [r3, #44]
 931:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 932:./Drivers/FreeRTOS/tasks.c ****         {
 933:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 439              		.loc 1 933 38
 440 00d2 3B6B     		ldr	r3, [r7, #48]
 441 00d4 BA6A     		ldr	r2, [r7, #40]
 442 00d6 9A64     		str	r2, [r3, #72]
 934:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 443              		.loc 1 934 37
 444 00d8 3B6B     		ldr	r3, [r7, #48]
 445 00da 0022     		movs	r2, #0
 446 00dc DA64     		str	r2, [r3, #76]
 935:./Drivers/FreeRTOS/tasks.c ****         }
 936:./Drivers/FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 937:./Drivers/FreeRTOS/tasks.c **** 
 938:./Drivers/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 447              		.loc 1 938 5
 448 00de 3B6B     		ldr	r3, [r7, #48]
 449 00e0 0433     		adds	r3, r3, #4
 450 00e2 1846     		mov	r0, r3
 451 00e4 FFF7FEFF 		bl	vListInitialiseItem
 939:./Drivers/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 452              		.loc 1 939 5
 453 00e8 3B6B     		ldr	r3, [r7, #48]
 454 00ea 1833     		adds	r3, r3, #24
 455 00ec 1846     		mov	r0, r3
 456 00ee FFF7FEFF 		bl	vListInitialiseItem
 940:./Drivers/FreeRTOS/tasks.c **** 
 941:./Drivers/FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:./Drivers/FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 943:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 457              		.loc 1 943 5
 458 00f2 3B6B     		ldr	r3, [r7, #48]
 459 00f4 3A6B     		ldr	r2, [r7, #48]
 460 00f6 1A61     		str	r2, [r3, #16]
 944:./Drivers/FreeRTOS/tasks.c **** 
 945:./Drivers/FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 946:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 461              		.loc 1 946 5
 462 00f8 BB6A     		ldr	r3, [r7, #40]
 463 00fa C3F10502 		rsb	r2, r3, #5
 464 00fe 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 29


 465 0100 9A61     		str	r2, [r3, #24]
 947:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 466              		.loc 1 947 5
 467 0102 3B6B     		ldr	r3, [r7, #48]
 468 0104 3A6B     		ldr	r2, [r7, #48]
 469 0106 5A62     		str	r2, [r3, #36]
 948:./Drivers/FreeRTOS/tasks.c **** 
 949:./Drivers/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:./Drivers/FreeRTOS/tasks.c ****         {
 951:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:./Drivers/FreeRTOS/tasks.c ****         }
 953:./Drivers/FreeRTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 954:./Drivers/FreeRTOS/tasks.c **** 
 955:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:./Drivers/FreeRTOS/tasks.c ****         {
 957:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 958:./Drivers/FreeRTOS/tasks.c ****         }
 959:./Drivers/FreeRTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 960:./Drivers/FreeRTOS/tasks.c **** 
 961:./Drivers/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:./Drivers/FreeRTOS/tasks.c ****         {
 963:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 964:./Drivers/FreeRTOS/tasks.c ****         }
 965:./Drivers/FreeRTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 966:./Drivers/FreeRTOS/tasks.c **** 
 967:./Drivers/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 968:./Drivers/FreeRTOS/tasks.c ****         {
 969:./Drivers/FreeRTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 970:./Drivers/FreeRTOS/tasks.c ****         }
 971:./Drivers/FreeRTOS/tasks.c ****     #else
 972:./Drivers/FreeRTOS/tasks.c ****         {
 973:./Drivers/FreeRTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 974:./Drivers/FreeRTOS/tasks.c ****             ( void ) xRegions;
 975:./Drivers/FreeRTOS/tasks.c ****         }
 976:./Drivers/FreeRTOS/tasks.c ****     #endif
 977:./Drivers/FreeRTOS/tasks.c **** 
 978:./Drivers/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:./Drivers/FreeRTOS/tasks.c ****         {
 980:./Drivers/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 981:./Drivers/FreeRTOS/tasks.c ****         }
 982:./Drivers/FreeRTOS/tasks.c ****     #endif
 983:./Drivers/FreeRTOS/tasks.c **** 
 984:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 985:./Drivers/FreeRTOS/tasks.c ****         {
 986:./Drivers/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 470              		.loc 1 986 32
 471 0108 3B6B     		ldr	r3, [r7, #48]
 472 010a 5033     		adds	r3, r3, #80
 473              		.loc 1 986 13
 474 010c 0422     		movs	r2, #4
 475 010e 0021     		movs	r1, #0
 476 0110 1846     		mov	r0, r3
 477 0112 FFF7FEFF 		bl	memset
 987:./Drivers/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 478              		.loc 1 987 32
 479 0116 3B6B     		ldr	r3, [r7, #48]
 480 0118 5433     		adds	r3, r3, #84
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 30


 481              		.loc 1 987 13
 482 011a 0122     		movs	r2, #1
 483 011c 0021     		movs	r1, #0
 484 011e 1846     		mov	r0, r3
 485 0120 FFF7FEFF 		bl	memset
 988:./Drivers/FreeRTOS/tasks.c ****         }
 989:./Drivers/FreeRTOS/tasks.c ****     #endif
 990:./Drivers/FreeRTOS/tasks.c **** 
 991:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 992:./Drivers/FreeRTOS/tasks.c ****         {
 993:./Drivers/FreeRTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 994:./Drivers/FreeRTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 995:./Drivers/FreeRTOS/tasks.c ****              * for additional information. */
 996:./Drivers/FreeRTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 997:./Drivers/FreeRTOS/tasks.c ****         }
 998:./Drivers/FreeRTOS/tasks.c ****     #endif
 999:./Drivers/FreeRTOS/tasks.c **** 
1000:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
1001:./Drivers/FreeRTOS/tasks.c ****         {
1002:./Drivers/FreeRTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
1003:./Drivers/FreeRTOS/tasks.c ****         }
1004:./Drivers/FreeRTOS/tasks.c ****     #endif
1005:./Drivers/FreeRTOS/tasks.c **** 
1006:./Drivers/FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1007:./Drivers/FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1008:./Drivers/FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1009:./Drivers/FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
1010:./Drivers/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1011:./Drivers/FreeRTOS/tasks.c ****         {
1012:./Drivers/FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1013:./Drivers/FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1014:./Drivers/FreeRTOS/tasks.c ****              * function as well. */
1015:./Drivers/FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1016:./Drivers/FreeRTOS/tasks.c ****                 {
1017:./Drivers/FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1018:./Drivers/FreeRTOS/tasks.c ****                         {
1019:./Drivers/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1020:./Drivers/FreeRTOS/tasks.c ****                         }
1021:./Drivers/FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1022:./Drivers/FreeRTOS/tasks.c ****                         {
1023:./Drivers/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1024:./Drivers/FreeRTOS/tasks.c ****                         }
1025:./Drivers/FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1026:./Drivers/FreeRTOS/tasks.c ****                 }
1027:./Drivers/FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1028:./Drivers/FreeRTOS/tasks.c ****                 {
1029:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1030:./Drivers/FreeRTOS/tasks.c ****                 }
1031:./Drivers/FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1032:./Drivers/FreeRTOS/tasks.c ****         }
1033:./Drivers/FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1034:./Drivers/FreeRTOS/tasks.c ****         {
1035:./Drivers/FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1036:./Drivers/FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1037:./Drivers/FreeRTOS/tasks.c ****              * function as well. */
1038:./Drivers/FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1039:./Drivers/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 31


1040:./Drivers/FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1041:./Drivers/FreeRTOS/tasks.c ****                         {
1042:./Drivers/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1043:./Drivers/FreeRTOS/tasks.c ****                         }
1044:./Drivers/FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1045:./Drivers/FreeRTOS/tasks.c ****                         {
1046:./Drivers/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1047:./Drivers/FreeRTOS/tasks.c ****                         }
1048:./Drivers/FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1049:./Drivers/FreeRTOS/tasks.c ****                 }
1050:./Drivers/FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1051:./Drivers/FreeRTOS/tasks.c ****                 {
1052:./Drivers/FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
 486              		.loc 1 1052 46
 487 0124 3A68     		ldr	r2, [r7]
 488 0126 F968     		ldr	r1, [r7, #12]
 489 0128 B869     		ldr	r0, [r7, #24]
 490 012a FFF7FEFF 		bl	pxPortInitialiseStack
 491 012e 0246     		mov	r2, r0
 492              		.loc 1 1052 44
 493 0130 3B6B     		ldr	r3, [r7, #48]
 494 0132 1A60     		str	r2, [r3]
1053:./Drivers/FreeRTOS/tasks.c ****                 }
1054:./Drivers/FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1055:./Drivers/FreeRTOS/tasks.c ****         }
1056:./Drivers/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1057:./Drivers/FreeRTOS/tasks.c **** 
1058:./Drivers/FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
 495              		.loc 1 1058 7
 496 0134 FB6A     		ldr	r3, [r7, #44]
 497 0136 002B     		cmp	r3, #0
 498 0138 02D0     		beq	.L22
1059:./Drivers/FreeRTOS/tasks.c ****     {
1060:./Drivers/FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1061:./Drivers/FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1062:./Drivers/FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 499              		.loc 1 1062 24
 500 013a FB6A     		ldr	r3, [r7, #44]
 501 013c 3A6B     		ldr	r2, [r7, #48]
 502 013e 1A60     		str	r2, [r3]
 503              	.L22:
1063:./Drivers/FreeRTOS/tasks.c ****     }
1064:./Drivers/FreeRTOS/tasks.c ****     else
1065:./Drivers/FreeRTOS/tasks.c ****     {
1066:./Drivers/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1067:./Drivers/FreeRTOS/tasks.c ****     }
1068:./Drivers/FreeRTOS/tasks.c **** }
 504              		.loc 1 1068 1
 505 0140 00BF     		nop
 506 0142 2037     		adds	r7, r7, #32
 507              	.LCFI8:
 508              		.cfi_def_cfa_offset 8
 509 0144 BD46     		mov	sp, r7
 510              	.LCFI9:
 511              		.cfi_def_cfa_register 13
 512              		@ sp needed
 513 0146 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 32


 514              		.cfi_endproc
 515              	.LFE6:
 517              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 518              		.align	1
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu fpv4-sp-d16
 524              	prvAddNewTaskToReadyList:
 525              	.LFB7:
1069:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1070:./Drivers/FreeRTOS/tasks.c **** 
1071:./Drivers/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1072:./Drivers/FreeRTOS/tasks.c **** {
 526              		.loc 1 1072 1
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530 0000 80B5     		push	{r7, lr}
 531              	.LCFI10:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 84B0     		sub	sp, sp, #16
 536              	.LCFI11:
 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              	.LCFI12:
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
1073:./Drivers/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1074:./Drivers/FreeRTOS/tasks.c ****      * updated. */
1075:./Drivers/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 542              		.loc 1 1075 5
 543 0008 FFF7FEFF 		bl	vPortEnterCritical
1076:./Drivers/FreeRTOS/tasks.c ****     {
1077:./Drivers/FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
 544              		.loc 1 1077 31
 545 000c 404B     		ldr	r3, .L28
 546 000e 1B68     		ldr	r3, [r3]
 547 0010 0133     		adds	r3, r3, #1
 548 0012 3F4A     		ldr	r2, .L28
 549 0014 1360     		str	r3, [r2]
1078:./Drivers/FreeRTOS/tasks.c **** 
1079:./Drivers/FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
 550              		.loc 1 1079 26
 551 0016 3F4B     		ldr	r3, .L28+4
 552 0018 1B68     		ldr	r3, [r3]
 553              		.loc 1 1079 11
 554 001a 002B     		cmp	r3, #0
 555 001c 09D1     		bne	.L24
1080:./Drivers/FreeRTOS/tasks.c ****         {
1081:./Drivers/FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1082:./Drivers/FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1083:./Drivers/FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
 556              		.loc 1 1083 26
 557 001e 3D4A     		ldr	r2, .L28+4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 33


 558 0020 7B68     		ldr	r3, [r7, #4]
 559 0022 1360     		str	r3, [r2]
1084:./Drivers/FreeRTOS/tasks.c **** 
1085:./Drivers/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 560              		.loc 1 1085 40
 561 0024 3A4B     		ldr	r3, .L28
 562 0026 1B68     		ldr	r3, [r3]
 563              		.loc 1 1085 15
 564 0028 012B     		cmp	r3, #1
 565 002a 10D1     		bne	.L25
1086:./Drivers/FreeRTOS/tasks.c ****             {
1087:./Drivers/FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1088:./Drivers/FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1089:./Drivers/FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1090:./Drivers/FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
 566              		.loc 1 1090 17
 567 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 568 0030 0DE0     		b	.L25
 569              	.L24:
1091:./Drivers/FreeRTOS/tasks.c ****             }
1092:./Drivers/FreeRTOS/tasks.c ****             else
1093:./Drivers/FreeRTOS/tasks.c ****             {
1094:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1095:./Drivers/FreeRTOS/tasks.c ****             }
1096:./Drivers/FreeRTOS/tasks.c ****         }
1097:./Drivers/FreeRTOS/tasks.c ****         else
1098:./Drivers/FreeRTOS/tasks.c ****         {
1099:./Drivers/FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1100:./Drivers/FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1101:./Drivers/FreeRTOS/tasks.c ****              * so far. */
1102:./Drivers/FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 570              		.loc 1 1102 35
 571 0032 394B     		ldr	r3, .L28+8
 572 0034 1B68     		ldr	r3, [r3]
 573              		.loc 1 1102 15
 574 0036 002B     		cmp	r3, #0
 575 0038 09D1     		bne	.L25
1103:./Drivers/FreeRTOS/tasks.c ****             {
1104:./Drivers/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 576              		.loc 1 1104 33
 577 003a 364B     		ldr	r3, .L28+4
 578 003c 1B68     		ldr	r3, [r3]
 579 003e DA6A     		ldr	r2, [r3, #44]
 580              		.loc 1 1104 57
 581 0040 7B68     		ldr	r3, [r7, #4]
 582 0042 DB6A     		ldr	r3, [r3, #44]
 583              		.loc 1 1104 19
 584 0044 9A42     		cmp	r2, r3
 585 0046 02D8     		bhi	.L25
1105:./Drivers/FreeRTOS/tasks.c ****                 {
1106:./Drivers/FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 586              		.loc 1 1106 34
 587 0048 324A     		ldr	r2, .L28+4
 588 004a 7B68     		ldr	r3, [r7, #4]
 589 004c 1360     		str	r3, [r2]
 590              	.L25:
1107:./Drivers/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 34


1108:./Drivers/FreeRTOS/tasks.c ****                 else
1109:./Drivers/FreeRTOS/tasks.c ****                 {
1110:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1111:./Drivers/FreeRTOS/tasks.c ****                 }
1112:./Drivers/FreeRTOS/tasks.c ****             }
1113:./Drivers/FreeRTOS/tasks.c ****             else
1114:./Drivers/FreeRTOS/tasks.c ****             {
1115:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1116:./Drivers/FreeRTOS/tasks.c ****             }
1117:./Drivers/FreeRTOS/tasks.c ****         }
1118:./Drivers/FreeRTOS/tasks.c **** 
1119:./Drivers/FreeRTOS/tasks.c ****         uxTaskNumber++;
 591              		.loc 1 1119 21
 592 004e 334B     		ldr	r3, .L28+12
 593 0050 1B68     		ldr	r3, [r3]
 594 0052 0133     		adds	r3, r3, #1
 595 0054 314A     		ldr	r2, .L28+12
 596 0056 1360     		str	r3, [r2]
1120:./Drivers/FreeRTOS/tasks.c **** 
1121:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1122:./Drivers/FreeRTOS/tasks.c ****             {
1123:./Drivers/FreeRTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1124:./Drivers/FreeRTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 597              		.loc 1 1124 39
 598 0058 304B     		ldr	r3, .L28+12
 599 005a 1A68     		ldr	r2, [r3]
 600 005c 7B68     		ldr	r3, [r7, #4]
 601 005e 1A64     		str	r2, [r3, #64]
1125:./Drivers/FreeRTOS/tasks.c ****             }
1126:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1127:./Drivers/FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1128:./Drivers/FreeRTOS/tasks.c **** 
1129:./Drivers/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 602              		.loc 1 1129 9
 603 0060 7B68     		ldr	r3, [r7, #4]
 604 0062 DB6A     		ldr	r3, [r3, #44]
 605 0064 0122     		movs	r2, #1
 606 0066 9A40     		lsls	r2, r2, r3
 607 0068 2D4B     		ldr	r3, .L28+16
 608 006a 1B68     		ldr	r3, [r3]
 609 006c 1343     		orrs	r3, r3, r2
 610 006e 2C4A     		ldr	r2, .L28+16
 611 0070 1360     		str	r3, [r2]
 612              	.LBB160:
 613 0072 7B68     		ldr	r3, [r7, #4]
 614 0074 DA6A     		ldr	r2, [r3, #44]
 615 0076 2B49     		ldr	r1, .L28+20
 616 0078 1346     		mov	r3, r2
 617 007a 9B00     		lsls	r3, r3, #2
 618 007c 1344     		add	r3, r3, r2
 619 007e 9B00     		lsls	r3, r3, #2
 620 0080 0B44     		add	r3, r3, r1
 621 0082 0433     		adds	r3, r3, #4
 622 0084 1B68     		ldr	r3, [r3]
 623 0086 FB60     		str	r3, [r7, #12]
 624 0088 7B68     		ldr	r3, [r7, #4]
 625 008a FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 35


 626 008c 9A60     		str	r2, [r3, #8]
 627 008e FB68     		ldr	r3, [r7, #12]
 628 0090 9A68     		ldr	r2, [r3, #8]
 629 0092 7B68     		ldr	r3, [r7, #4]
 630 0094 DA60     		str	r2, [r3, #12]
 631 0096 FB68     		ldr	r3, [r7, #12]
 632 0098 9B68     		ldr	r3, [r3, #8]
 633 009a 7A68     		ldr	r2, [r7, #4]
 634 009c 0432     		adds	r2, r2, #4
 635 009e 5A60     		str	r2, [r3, #4]
 636 00a0 7B68     		ldr	r3, [r7, #4]
 637 00a2 1A1D     		adds	r2, r3, #4
 638 00a4 FB68     		ldr	r3, [r7, #12]
 639 00a6 9A60     		str	r2, [r3, #8]
 640 00a8 7B68     		ldr	r3, [r7, #4]
 641 00aa DA6A     		ldr	r2, [r3, #44]
 642 00ac 1346     		mov	r3, r2
 643 00ae 9B00     		lsls	r3, r3, #2
 644 00b0 1344     		add	r3, r3, r2
 645 00b2 9B00     		lsls	r3, r3, #2
 646 00b4 1B4A     		ldr	r2, .L28+20
 647 00b6 1A44     		add	r2, r2, r3
 648 00b8 7B68     		ldr	r3, [r7, #4]
 649 00ba 5A61     		str	r2, [r3, #20]
 650 00bc 7B68     		ldr	r3, [r7, #4]
 651 00be DA6A     		ldr	r2, [r3, #44]
 652 00c0 1849     		ldr	r1, .L28+20
 653 00c2 1346     		mov	r3, r2
 654 00c4 9B00     		lsls	r3, r3, #2
 655 00c6 1344     		add	r3, r3, r2
 656 00c8 9B00     		lsls	r3, r3, #2
 657 00ca 0B44     		add	r3, r3, r1
 658 00cc 1B68     		ldr	r3, [r3]
 659 00ce 591C     		adds	r1, r3, #1
 660 00d0 1448     		ldr	r0, .L28+20
 661 00d2 1346     		mov	r3, r2
 662 00d4 9B00     		lsls	r3, r3, #2
 663 00d6 1344     		add	r3, r3, r2
 664 00d8 9B00     		lsls	r3, r3, #2
 665 00da 0344     		add	r3, r3, r0
 666 00dc 1960     		str	r1, [r3]
 667              	.LBE160:
1130:./Drivers/FreeRTOS/tasks.c **** 
1131:./Drivers/FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1132:./Drivers/FreeRTOS/tasks.c ****     }
1133:./Drivers/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 668              		.loc 1 1133 5
 669 00de FFF7FEFF 		bl	vPortExitCritical
1134:./Drivers/FreeRTOS/tasks.c **** 
1135:./Drivers/FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 670              		.loc 1 1135 27
 671 00e2 0D4B     		ldr	r3, .L28+8
 672 00e4 1B68     		ldr	r3, [r3]
 673              		.loc 1 1135 7
 674 00e6 002B     		cmp	r3, #0
 675 00e8 0ED0     		beq	.L27
1136:./Drivers/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 36


1137:./Drivers/FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1138:./Drivers/FreeRTOS/tasks.c ****          * then it should run now. */
1139:./Drivers/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 676              		.loc 1 1139 25
 677 00ea 0A4B     		ldr	r3, .L28+4
 678 00ec 1B68     		ldr	r3, [r3]
 679 00ee DA6A     		ldr	r2, [r3, #44]
 680              		.loc 1 1139 48
 681 00f0 7B68     		ldr	r3, [r7, #4]
 682 00f2 DB6A     		ldr	r3, [r3, #44]
 683              		.loc 1 1139 11
 684 00f4 9A42     		cmp	r2, r3
 685 00f6 07D2     		bcs	.L27
1140:./Drivers/FreeRTOS/tasks.c ****         {
1141:./Drivers/FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
 686              		.loc 1 1141 13
 687 00f8 0B4B     		ldr	r3, .L28+24
 688 00fa 4FF08052 		mov	r2, #268435456
 689 00fe 1A60     		str	r2, [r3]
 690              		.syntax unified
 691              	@ 1141 "./Drivers/FreeRTOS/tasks.c" 1
 692 0100 BFF34F8F 		dsb
 693              	@ 0 "" 2
 694              	@ 1141 "./Drivers/FreeRTOS/tasks.c" 1
 695 0104 BFF36F8F 		isb
 696              	@ 0 "" 2
 697              		.thumb
 698              		.syntax unified
 699              	.L27:
1142:./Drivers/FreeRTOS/tasks.c ****         }
1143:./Drivers/FreeRTOS/tasks.c ****         else
1144:./Drivers/FreeRTOS/tasks.c ****         {
1145:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1146:./Drivers/FreeRTOS/tasks.c ****         }
1147:./Drivers/FreeRTOS/tasks.c ****     }
1148:./Drivers/FreeRTOS/tasks.c ****     else
1149:./Drivers/FreeRTOS/tasks.c ****     {
1150:./Drivers/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1151:./Drivers/FreeRTOS/tasks.c ****     }
1152:./Drivers/FreeRTOS/tasks.c **** }
 700              		.loc 1 1152 1
 701 0108 00BF     		nop
 702 010a 1037     		adds	r7, r7, #16
 703              	.LCFI13:
 704              		.cfi_def_cfa_offset 8
 705 010c BD46     		mov	sp, r7
 706              	.LCFI14:
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 010e 80BD     		pop	{r7, pc}
 710              	.L29:
 711              		.align	2
 712              	.L28:
 713 0110 00000000 		.word	uxCurrentNumberOfTasks
 714 0114 00000000 		.word	pxCurrentTCB
 715 0118 00000000 		.word	xSchedulerRunning
 716 011c 00000000 		.word	uxTaskNumber
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 37


 717 0120 00000000 		.word	uxTopReadyPriority
 718 0124 00000000 		.word	pxReadyTasksLists
 719 0128 04ED00E0 		.word	-536810236
 720              		.cfi_endproc
 721              	.LFE7:
 723              		.section	.text.vTaskDelete,"ax",%progbits
 724              		.align	1
 725              		.global	vTaskDelete
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 729              		.fpu fpv4-sp-d16
 731              	vTaskDelete:
 732              	.LFB8:
1153:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1154:./Drivers/FreeRTOS/tasks.c **** 
1155:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:./Drivers/FreeRTOS/tasks.c **** 
1157:./Drivers/FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:./Drivers/FreeRTOS/tasks.c ****     {
 733              		.loc 1 1158 5
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 16
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737 0000 80B5     		push	{r7, lr}
 738              	.LCFI15:
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 84B0     		sub	sp, sp, #16
 743              	.LCFI16:
 744              		.cfi_def_cfa_offset 24
 745 0004 00AF     		add	r7, sp, #0
 746              	.LCFI17:
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
1159:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1160:./Drivers/FreeRTOS/tasks.c **** 
1161:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 749              		.loc 1 1161 9
 750 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:./Drivers/FreeRTOS/tasks.c ****         {
1163:./Drivers/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1164:./Drivers/FreeRTOS/tasks.c ****              * being deleted. */
1165:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 751              		.loc 1 1165 21
 752 000c 7B68     		ldr	r3, [r7, #4]
 753 000e 002B     		cmp	r3, #0
 754 0010 02D1     		bne	.L31
 755              		.loc 1 1165 21 is_stmt 0 discriminator 1
 756 0012 3B4B     		ldr	r3, .L42
 757 0014 1B68     		ldr	r3, [r3]
 758 0016 00E0     		b	.L32
 759              	.L31:
 760              		.loc 1 1165 21 discriminator 2
 761 0018 7B68     		ldr	r3, [r7, #4]
 762              	.L32:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 38


 763              		.loc 1 1165 19 is_stmt 1 discriminator 4
 764 001a FB60     		str	r3, [r7, #12]
1166:./Drivers/FreeRTOS/tasks.c **** 
1167:./Drivers/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1168:./Drivers/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 765              		.loc 1 1168 17 discriminator 4
 766 001c FB68     		ldr	r3, [r7, #12]
 767 001e 0433     		adds	r3, r3, #4
 768 0020 1846     		mov	r0, r3
 769 0022 FFF7FEFF 		bl	uxListRemove
 770 0026 0346     		mov	r3, r0
 771              		.loc 1 1168 15 discriminator 4
 772 0028 002B     		cmp	r3, #0
 773 002a 15D1     		bne	.L33
1169:./Drivers/FreeRTOS/tasks.c ****             {
1170:./Drivers/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 774              		.loc 1 1170 17
 775 002c FB68     		ldr	r3, [r7, #12]
 776 002e DA6A     		ldr	r2, [r3, #44]
 777 0030 3449     		ldr	r1, .L42+4
 778 0032 1346     		mov	r3, r2
 779 0034 9B00     		lsls	r3, r3, #2
 780 0036 1344     		add	r3, r3, r2
 781 0038 9B00     		lsls	r3, r3, #2
 782 003a 0B44     		add	r3, r3, r1
 783 003c 1B68     		ldr	r3, [r3]
 784 003e 002B     		cmp	r3, #0
 785 0040 0AD1     		bne	.L33
 786              		.loc 1 1170 17 is_stmt 0 discriminator 1
 787 0042 FB68     		ldr	r3, [r7, #12]
 788 0044 DB6A     		ldr	r3, [r3, #44]
 789 0046 0122     		movs	r2, #1
 790 0048 02FA03F3 		lsl	r3, r2, r3
 791 004c DA43     		mvns	r2, r3
 792 004e 2E4B     		ldr	r3, .L42+8
 793 0050 1B68     		ldr	r3, [r3]
 794 0052 1340     		ands	r3, r3, r2
 795 0054 2C4A     		ldr	r2, .L42+8
 796 0056 1360     		str	r3, [r2]
 797              	.L33:
1171:./Drivers/FreeRTOS/tasks.c ****             }
1172:./Drivers/FreeRTOS/tasks.c ****             else
1173:./Drivers/FreeRTOS/tasks.c ****             {
1174:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1175:./Drivers/FreeRTOS/tasks.c ****             }
1176:./Drivers/FreeRTOS/tasks.c **** 
1177:./Drivers/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1178:./Drivers/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 798              		.loc 1 1178 17 is_stmt 1
 799 0058 FB68     		ldr	r3, [r7, #12]
 800 005a 9B6A     		ldr	r3, [r3, #40]
 801              		.loc 1 1178 15
 802 005c 002B     		cmp	r3, #0
 803 005e 04D0     		beq	.L34
1179:./Drivers/FreeRTOS/tasks.c ****             {
1180:./Drivers/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804              		.loc 1 1180 26
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 39


 805 0060 FB68     		ldr	r3, [r7, #12]
 806 0062 1833     		adds	r3, r3, #24
 807 0064 1846     		mov	r0, r3
 808 0066 FFF7FEFF 		bl	uxListRemove
 809              	.L34:
1181:./Drivers/FreeRTOS/tasks.c ****             }
1182:./Drivers/FreeRTOS/tasks.c ****             else
1183:./Drivers/FreeRTOS/tasks.c ****             {
1184:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1185:./Drivers/FreeRTOS/tasks.c ****             }
1186:./Drivers/FreeRTOS/tasks.c **** 
1187:./Drivers/FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1188:./Drivers/FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1189:./Drivers/FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:./Drivers/FreeRTOS/tasks.c ****              * not return. */
1191:./Drivers/FreeRTOS/tasks.c ****             uxTaskNumber++;
 810              		.loc 1 1191 25
 811 006a 284B     		ldr	r3, .L42+12
 812 006c 1B68     		ldr	r3, [r3]
 813 006e 0133     		adds	r3, r3, #1
 814 0070 264A     		ldr	r2, .L42+12
 815 0072 1360     		str	r3, [r2]
1192:./Drivers/FreeRTOS/tasks.c **** 
1193:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 816              		.loc 1 1193 23
 817 0074 224B     		ldr	r3, .L42
 818 0076 1B68     		ldr	r3, [r3]
 819              		.loc 1 1193 15
 820 0078 FA68     		ldr	r2, [r7, #12]
 821 007a 9A42     		cmp	r2, r3
 822 007c 0BD1     		bne	.L35
1194:./Drivers/FreeRTOS/tasks.c ****             {
1195:./Drivers/FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1196:./Drivers/FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1197:./Drivers/FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1198:./Drivers/FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1199:./Drivers/FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1200:./Drivers/FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 823              		.loc 1 1200 17
 824 007e FB68     		ldr	r3, [r7, #12]
 825 0080 0433     		adds	r3, r3, #4
 826 0082 1946     		mov	r1, r3
 827 0084 2248     		ldr	r0, .L42+16
 828 0086 FFF7FEFF 		bl	vListInsertEnd
1201:./Drivers/FreeRTOS/tasks.c **** 
1202:./Drivers/FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1203:./Drivers/FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1204:./Drivers/FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1205:./Drivers/FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 829              		.loc 1 1205 17
 830 008a 224B     		ldr	r3, .L42+20
 831 008c 1B68     		ldr	r3, [r3]
 832 008e 0133     		adds	r3, r3, #1
 833 0090 204A     		ldr	r2, .L42+20
 834 0092 1360     		str	r3, [r2]
 835 0094 06E0     		b	.L36
 836              	.L35:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 40


1206:./Drivers/FreeRTOS/tasks.c **** 
1207:./Drivers/FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1208:./Drivers/FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1209:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1210:./Drivers/FreeRTOS/tasks.c **** 
1211:./Drivers/FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1212:./Drivers/FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1213:./Drivers/FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1214:./Drivers/FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1215:./Drivers/FreeRTOS/tasks.c ****                  * required. */
1216:./Drivers/FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1217:./Drivers/FreeRTOS/tasks.c ****             }
1218:./Drivers/FreeRTOS/tasks.c ****             else
1219:./Drivers/FreeRTOS/tasks.c ****             {
1220:./Drivers/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 837              		.loc 1 1220 17
 838 0096 204B     		ldr	r3, .L42+24
 839 0098 1B68     		ldr	r3, [r3]
 840 009a 013B     		subs	r3, r3, #1
 841 009c 1E4A     		ldr	r2, .L42+24
 842 009e 1360     		str	r3, [r2]
1221:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1222:./Drivers/FreeRTOS/tasks.c **** 
1223:./Drivers/FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1224:./Drivers/FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1225:./Drivers/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 843              		.loc 1 1225 17
 844 00a0 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 845              	.L36:
1226:./Drivers/FreeRTOS/tasks.c ****             }
1227:./Drivers/FreeRTOS/tasks.c ****         }
1228:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 846              		.loc 1 1228 9
 847 00a4 FFF7FEFF 		bl	vPortExitCritical
1229:./Drivers/FreeRTOS/tasks.c **** 
1230:./Drivers/FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1231:./Drivers/FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1232:./Drivers/FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1233:./Drivers/FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
 848              		.loc 1 1233 19
 849 00a8 154B     		ldr	r3, .L42
 850 00aa 1B68     		ldr	r3, [r3]
 851              		.loc 1 1233 11
 852 00ac FA68     		ldr	r2, [r7, #12]
 853 00ae 9A42     		cmp	r2, r3
 854 00b0 02D0     		beq	.L37
1234:./Drivers/FreeRTOS/tasks.c ****         {
1235:./Drivers/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
 855              		.loc 1 1235 13
 856 00b2 F868     		ldr	r0, [r7, #12]
 857 00b4 FFF7FEFF 		bl	prvDeleteTCB
 858              	.L37:
1236:./Drivers/FreeRTOS/tasks.c ****         }
1237:./Drivers/FreeRTOS/tasks.c **** 
1238:./Drivers/FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1239:./Drivers/FreeRTOS/tasks.c ****          * been deleted. */
1240:./Drivers/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 41


 859              		.loc 1 1240 31
 860 00b8 184B     		ldr	r3, .L42+28
 861 00ba 1B68     		ldr	r3, [r3]
 862              		.loc 1 1240 11
 863 00bc 002B     		cmp	r3, #0
 864 00be 1BD0     		beq	.L41
1241:./Drivers/FreeRTOS/tasks.c ****         {
1242:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 865              		.loc 1 1242 23
 866 00c0 0F4B     		ldr	r3, .L42
 867 00c2 1B68     		ldr	r3, [r3]
 868              		.loc 1 1242 15
 869 00c4 FA68     		ldr	r2, [r7, #12]
 870 00c6 9A42     		cmp	r2, r3
 871 00c8 16D1     		bne	.L41
1243:./Drivers/FreeRTOS/tasks.c ****             {
1244:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 872              		.loc 1 1244 17
 873 00ca 154B     		ldr	r3, .L42+32
 874 00cc 1B68     		ldr	r3, [r3]
 875 00ce 002B     		cmp	r3, #0
 876 00d0 0AD0     		beq	.L39
 877              	.LBB161:
 878              	.LBB162:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 879              		.loc 2 198 9
 880              		.syntax unified
 881              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 882 00d2 4FF05003 			mov r3, #80												
 883 00d6 83F31188 		msr basepri, r3											
 884 00da BFF36F8F 		isb														
 885 00de BFF34F8F 		dsb														
 886              	
 887              	@ 0 "" 2
 888              		.thumb
 889              		.syntax unified
 890 00e2 BB60     		str	r3, [r7, #8]
 891              		.loc 2 206 5
 892 00e4 00BF     		nop
 893              	.L40:
 894              	.LBE162:
 895              	.LBE161:
 896              		.loc 1 1244 17 discriminator 1
 897 00e6 FEE7     		b	.L40
 898              	.L39:
1245:./Drivers/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 899              		.loc 1 1245 17
 900 00e8 0E4B     		ldr	r3, .L42+36
 901 00ea 4FF08052 		mov	r2, #268435456
 902 00ee 1A60     		str	r2, [r3]
 903              		.syntax unified
 904              	@ 1245 "./Drivers/FreeRTOS/tasks.c" 1
 905 00f0 BFF34F8F 		dsb
 906              	@ 0 "" 2
 907              	@ 1245 "./Drivers/FreeRTOS/tasks.c" 1
 908 00f4 BFF36F8F 		isb
 909              	@ 0 "" 2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 42


 910              		.thumb
 911              		.syntax unified
 912              	.L41:
1246:./Drivers/FreeRTOS/tasks.c ****             }
1247:./Drivers/FreeRTOS/tasks.c ****             else
1248:./Drivers/FreeRTOS/tasks.c ****             {
1249:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1250:./Drivers/FreeRTOS/tasks.c ****             }
1251:./Drivers/FreeRTOS/tasks.c ****         }
1252:./Drivers/FreeRTOS/tasks.c ****     }
 913              		.loc 1 1252 5
 914 00f8 00BF     		nop
 915 00fa 1037     		adds	r7, r7, #16
 916              	.LCFI18:
 917              		.cfi_def_cfa_offset 8
 918 00fc BD46     		mov	sp, r7
 919              	.LCFI19:
 920              		.cfi_def_cfa_register 13
 921              		@ sp needed
 922 00fe 80BD     		pop	{r7, pc}
 923              	.L43:
 924              		.align	2
 925              	.L42:
 926 0100 00000000 		.word	pxCurrentTCB
 927 0104 00000000 		.word	pxReadyTasksLists
 928 0108 00000000 		.word	uxTopReadyPriority
 929 010c 00000000 		.word	uxTaskNumber
 930 0110 00000000 		.word	xTasksWaitingTermination
 931 0114 00000000 		.word	uxDeletedTasksWaitingCleanUp
 932 0118 00000000 		.word	uxCurrentNumberOfTasks
 933 011c 00000000 		.word	xSchedulerRunning
 934 0120 00000000 		.word	uxSchedulerSuspended
 935 0124 04ED00E0 		.word	-536810236
 936              		.cfi_endproc
 937              	.LFE8:
 939              		.section	.text.xTaskDelayUntil,"ax",%progbits
 940              		.align	1
 941              		.global	xTaskDelayUntil
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 945              		.fpu fpv4-sp-d16
 947              	xTaskDelayUntil:
 948              	.LFB9:
1253:./Drivers/FreeRTOS/tasks.c **** 
1254:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1255:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1256:./Drivers/FreeRTOS/tasks.c **** 
1257:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1258:./Drivers/FreeRTOS/tasks.c **** 
1259:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1260:./Drivers/FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1261:./Drivers/FreeRTOS/tasks.c ****     {
 949              		.loc 1 1261 5
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 40
 952              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 43


 953 0000 80B5     		push	{r7, lr}
 954              	.LCFI20:
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 8AB0     		sub	sp, sp, #40
 959              	.LCFI21:
 960              		.cfi_def_cfa_offset 48
 961 0004 00AF     		add	r7, sp, #0
 962              	.LCFI22:
 963              		.cfi_def_cfa_register 7
 964 0006 7860     		str	r0, [r7, #4]
 965 0008 3960     		str	r1, [r7]
1262:./Drivers/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1263:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 966              		.loc 1 1263 37
 967 000a 0023     		movs	r3, #0
 968 000c 7B62     		str	r3, [r7, #36]
1264:./Drivers/FreeRTOS/tasks.c **** 
1265:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
 969              		.loc 1 1265 9
 970 000e 7B68     		ldr	r3, [r7, #4]
 971 0010 002B     		cmp	r3, #0
 972 0012 0AD1     		bne	.L45
 973              	.LBB163:
 974              	.LBB164:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 975              		.loc 2 198 9
 976              		.syntax unified
 977              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 978 0014 4FF05003 			mov r3, #80												
 979 0018 83F31188 		msr basepri, r3											
 980 001c BFF36F8F 		isb														
 981 0020 BFF34F8F 		dsb														
 982              	
 983              	@ 0 "" 2
 984              		.thumb
 985              		.syntax unified
 986 0024 7B61     		str	r3, [r7, #20]
 987              		.loc 2 206 5
 988 0026 00BF     		nop
 989              	.L46:
 990              	.LBE164:
 991              	.LBE163:
 992              		.loc 1 1265 9 discriminator 1
 993 0028 FEE7     		b	.L46
 994              	.L45:
1266:./Drivers/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 995              		.loc 1 1266 9
 996 002a 3B68     		ldr	r3, [r7]
 997 002c 002B     		cmp	r3, #0
 998 002e 0AD1     		bne	.L47
 999              	.LBB165:
 1000              	.LBB166:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1001              		.loc 2 198 9
 1002              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 44


 1003              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1004 0030 4FF05003 			mov r3, #80												
 1005 0034 83F31188 		msr basepri, r3											
 1006 0038 BFF36F8F 		isb														
 1007 003c BFF34F8F 		dsb														
 1008              	
 1009              	@ 0 "" 2
 1010              		.thumb
 1011              		.syntax unified
 1012 0040 3B61     		str	r3, [r7, #16]
 1013              		.loc 2 206 5
 1014 0042 00BF     		nop
 1015              	.L48:
 1016              	.LBE166:
 1017              	.LBE165:
 1018              		.loc 1 1266 9 discriminator 2
 1019 0044 FEE7     		b	.L48
 1020              	.L47:
1267:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 1021              		.loc 1 1267 9
 1022 0046 2A4B     		ldr	r3, .L57
 1023 0048 1B68     		ldr	r3, [r3]
 1024 004a 002B     		cmp	r3, #0
 1025 004c 0AD0     		beq	.L49
 1026              	.LBB167:
 1027              	.LBB168:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1028              		.loc 2 198 9
 1029              		.syntax unified
 1030              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1031 004e 4FF05003 			mov r3, #80												
 1032 0052 83F31188 		msr basepri, r3											
 1033 0056 BFF36F8F 		isb														
 1034 005a BFF34F8F 		dsb														
 1035              	
 1036              	@ 0 "" 2
 1037              		.thumb
 1038              		.syntax unified
 1039 005e FB60     		str	r3, [r7, #12]
 1040              		.loc 2 206 5
 1041 0060 00BF     		nop
 1042              	.L50:
 1043              	.LBE168:
 1044              	.LBE167:
 1045              		.loc 1 1267 9 discriminator 3
 1046 0062 FEE7     		b	.L50
 1047              	.L49:
1268:./Drivers/FreeRTOS/tasks.c **** 
1269:./Drivers/FreeRTOS/tasks.c ****         vTaskSuspendAll();
 1048              		.loc 1 1269 9
 1049 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1050              	.LBB169:
1270:./Drivers/FreeRTOS/tasks.c ****         {
1271:./Drivers/FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1272:./Drivers/FreeRTOS/tasks.c ****              * block. */
1273:./Drivers/FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 1051              		.loc 1 1273 30
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 45


 1052 0068 224B     		ldr	r3, .L57+4
 1053 006a 1B68     		ldr	r3, [r3]
 1054 006c 3B62     		str	r3, [r7, #32]
1274:./Drivers/FreeRTOS/tasks.c **** 
1275:./Drivers/FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1276:./Drivers/FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1055              		.loc 1 1276 27
 1056 006e 7B68     		ldr	r3, [r7, #4]
 1057 0070 1B68     		ldr	r3, [r3]
 1058              		.loc 1 1276 25
 1059 0072 3A68     		ldr	r2, [r7]
 1060 0074 1344     		add	r3, r3, r2
 1061 0076 FB61     		str	r3, [r7, #28]
1277:./Drivers/FreeRTOS/tasks.c **** 
1278:./Drivers/FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 1062              		.loc 1 1278 35
 1063 0078 7B68     		ldr	r3, [r7, #4]
 1064 007a 1B68     		ldr	r3, [r3]
 1065              		.loc 1 1278 15
 1066 007c 3A6A     		ldr	r2, [r7, #32]
 1067 007e 9A42     		cmp	r2, r3
 1068 0080 0BD2     		bcs	.L51
1279:./Drivers/FreeRTOS/tasks.c ****             {
1280:./Drivers/FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1281:./Drivers/FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1282:./Drivers/FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1283:./Drivers/FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1284:./Drivers/FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1285:./Drivers/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1069              		.loc 1 1285 37
 1070 0082 7B68     		ldr	r3, [r7, #4]
 1071 0084 1B68     		ldr	r3, [r3]
 1072              		.loc 1 1285 19
 1073 0086 FA69     		ldr	r2, [r7, #28]
 1074 0088 9A42     		cmp	r2, r3
 1075 008a 11D2     		bcs	.L52
 1076              		.loc 1 1285 59 discriminator 1
 1077 008c FA69     		ldr	r2, [r7, #28]
 1078 008e 3B6A     		ldr	r3, [r7, #32]
 1079 0090 9A42     		cmp	r2, r3
 1080 0092 0DD9     		bls	.L52
1286:./Drivers/FreeRTOS/tasks.c ****                 {
1287:./Drivers/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1081              		.loc 1 1287 34
 1082 0094 0123     		movs	r3, #1
 1083 0096 7B62     		str	r3, [r7, #36]
 1084 0098 0AE0     		b	.L52
 1085              	.L51:
1288:./Drivers/FreeRTOS/tasks.c ****                 }
1289:./Drivers/FreeRTOS/tasks.c ****                 else
1290:./Drivers/FreeRTOS/tasks.c ****                 {
1291:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1292:./Drivers/FreeRTOS/tasks.c ****                 }
1293:./Drivers/FreeRTOS/tasks.c ****             }
1294:./Drivers/FreeRTOS/tasks.c ****             else
1295:./Drivers/FreeRTOS/tasks.c ****             {
1296:./Drivers/FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 46


1297:./Drivers/FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1298:./Drivers/FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1299:./Drivers/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1086              		.loc 1 1299 37
 1087 009a 7B68     		ldr	r3, [r7, #4]
 1088 009c 1B68     		ldr	r3, [r3]
 1089              		.loc 1 1299 19
 1090 009e FA69     		ldr	r2, [r7, #28]
 1091 00a0 9A42     		cmp	r2, r3
 1092 00a2 03D3     		bcc	.L53
 1093              		.loc 1 1299 59 discriminator 1
 1094 00a4 FA69     		ldr	r2, [r7, #28]
 1095 00a6 3B6A     		ldr	r3, [r7, #32]
 1096 00a8 9A42     		cmp	r2, r3
 1097 00aa 01D9     		bls	.L52
 1098              	.L53:
1300:./Drivers/FreeRTOS/tasks.c ****                 {
1301:./Drivers/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 1099              		.loc 1 1301 34
 1100 00ac 0123     		movs	r3, #1
 1101 00ae 7B62     		str	r3, [r7, #36]
 1102              	.L52:
1302:./Drivers/FreeRTOS/tasks.c ****                 }
1303:./Drivers/FreeRTOS/tasks.c ****                 else
1304:./Drivers/FreeRTOS/tasks.c ****                 {
1305:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1306:./Drivers/FreeRTOS/tasks.c ****                 }
1307:./Drivers/FreeRTOS/tasks.c ****             }
1308:./Drivers/FreeRTOS/tasks.c **** 
1309:./Drivers/FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1310:./Drivers/FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 1103              		.loc 1 1310 33
 1104 00b0 7B68     		ldr	r3, [r7, #4]
 1105 00b2 FA69     		ldr	r2, [r7, #28]
 1106 00b4 1A60     		str	r2, [r3]
1311:./Drivers/FreeRTOS/tasks.c **** 
1312:./Drivers/FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
 1107              		.loc 1 1312 15
 1108 00b6 7B6A     		ldr	r3, [r7, #36]
 1109 00b8 002B     		cmp	r3, #0
 1110 00ba 06D0     		beq	.L54
1313:./Drivers/FreeRTOS/tasks.c ****             {
1314:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1315:./Drivers/FreeRTOS/tasks.c **** 
1316:./Drivers/FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1317:./Drivers/FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1318:./Drivers/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1111              		.loc 1 1318 17
 1112 00bc FA69     		ldr	r2, [r7, #28]
 1113 00be 3B6A     		ldr	r3, [r7, #32]
 1114 00c0 D31A     		subs	r3, r2, r3
 1115 00c2 0021     		movs	r1, #0
 1116 00c4 1846     		mov	r0, r3
 1117 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1118              	.L54:
 1119              	.LBE169:
1319:./Drivers/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 47


1320:./Drivers/FreeRTOS/tasks.c ****             else
1321:./Drivers/FreeRTOS/tasks.c ****             {
1322:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1323:./Drivers/FreeRTOS/tasks.c ****             }
1324:./Drivers/FreeRTOS/tasks.c ****         }
1325:./Drivers/FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 1120              		.loc 1 1325 27
 1121 00ca FFF7FEFF 		bl	xTaskResumeAll
 1122 00ce B861     		str	r0, [r7, #24]
1326:./Drivers/FreeRTOS/tasks.c **** 
1327:./Drivers/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1328:./Drivers/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1329:./Drivers/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1123              		.loc 1 1329 11
 1124 00d0 BB69     		ldr	r3, [r7, #24]
 1125 00d2 002B     		cmp	r3, #0
 1126 00d4 07D1     		bne	.L55
1330:./Drivers/FreeRTOS/tasks.c ****         {
1331:./Drivers/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
 1127              		.loc 1 1331 13
 1128 00d6 084B     		ldr	r3, .L57+8
 1129 00d8 4FF08052 		mov	r2, #268435456
 1130 00dc 1A60     		str	r2, [r3]
 1131              		.syntax unified
 1132              	@ 1331 "./Drivers/FreeRTOS/tasks.c" 1
 1133 00de BFF34F8F 		dsb
 1134              	@ 0 "" 2
 1135              	@ 1331 "./Drivers/FreeRTOS/tasks.c" 1
 1136 00e2 BFF36F8F 		isb
 1137              	@ 0 "" 2
 1138              		.thumb
 1139              		.syntax unified
 1140              	.L55:
1332:./Drivers/FreeRTOS/tasks.c ****         }
1333:./Drivers/FreeRTOS/tasks.c ****         else
1334:./Drivers/FreeRTOS/tasks.c ****         {
1335:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1336:./Drivers/FreeRTOS/tasks.c ****         }
1337:./Drivers/FreeRTOS/tasks.c **** 
1338:./Drivers/FreeRTOS/tasks.c ****         return xShouldDelay;
 1141              		.loc 1 1338 16
 1142 00e6 7B6A     		ldr	r3, [r7, #36]
1339:./Drivers/FreeRTOS/tasks.c ****     }
 1143              		.loc 1 1339 5
 1144 00e8 1846     		mov	r0, r3
 1145 00ea 2837     		adds	r7, r7, #40
 1146              	.LCFI23:
 1147              		.cfi_def_cfa_offset 8
 1148 00ec BD46     		mov	sp, r7
 1149              	.LCFI24:
 1150              		.cfi_def_cfa_register 13
 1151              		@ sp needed
 1152 00ee 80BD     		pop	{r7, pc}
 1153              	.L58:
 1154              		.align	2
 1155              	.L57:
 1156 00f0 00000000 		.word	uxSchedulerSuspended
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 48


 1157 00f4 00000000 		.word	xTickCount
 1158 00f8 04ED00E0 		.word	-536810236
 1159              		.cfi_endproc
 1160              	.LFE9:
 1162              		.section	.text.vTaskDelay,"ax",%progbits
 1163              		.align	1
 1164              		.global	vTaskDelay
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu fpv4-sp-d16
 1170              	vTaskDelay:
 1171              	.LFB10:
1340:./Drivers/FreeRTOS/tasks.c **** 
1341:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1342:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1343:./Drivers/FreeRTOS/tasks.c **** 
1344:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1345:./Drivers/FreeRTOS/tasks.c **** 
1346:./Drivers/FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1347:./Drivers/FreeRTOS/tasks.c ****     {
 1172              		.loc 1 1347 5
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 16
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176 0000 80B5     		push	{r7, lr}
 1177              	.LCFI25:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 0002 84B0     		sub	sp, sp, #16
 1182              	.LCFI26:
 1183              		.cfi_def_cfa_offset 24
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI27:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
1348:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 1188              		.loc 1 1348 20
 1189 0008 0023     		movs	r3, #0
 1190 000a FB60     		str	r3, [r7, #12]
1349:./Drivers/FreeRTOS/tasks.c **** 
1350:./Drivers/FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1351:./Drivers/FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 1191              		.loc 1 1351 11
 1192 000c 7B68     		ldr	r3, [r7, #4]
 1193 000e 002B     		cmp	r3, #0
 1194 0010 17D0     		beq	.L60
1352:./Drivers/FreeRTOS/tasks.c ****         {
1353:./Drivers/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 1195              		.loc 1 1353 13
 1196 0012 134B     		ldr	r3, .L65
 1197 0014 1B68     		ldr	r3, [r3]
 1198 0016 002B     		cmp	r3, #0
 1199 0018 0AD0     		beq	.L61
 1200              	.LBB170:
 1201              	.LBB171:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 49


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1202              		.loc 2 198 9
 1203              		.syntax unified
 1204              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1205 001a 4FF05003 			mov r3, #80												
 1206 001e 83F31188 		msr basepri, r3											
 1207 0022 BFF36F8F 		isb														
 1208 0026 BFF34F8F 		dsb														
 1209              	
 1210              	@ 0 "" 2
 1211              		.thumb
 1212              		.syntax unified
 1213 002a BB60     		str	r3, [r7, #8]
 1214              		.loc 2 206 5
 1215 002c 00BF     		nop
 1216              	.L62:
 1217              	.LBE171:
 1218              	.LBE170:
 1219              		.loc 1 1353 13 discriminator 1
 1220 002e FEE7     		b	.L62
 1221              	.L61:
1354:./Drivers/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 1222              		.loc 1 1354 13
 1223 0030 FFF7FEFF 		bl	vTaskSuspendAll
1355:./Drivers/FreeRTOS/tasks.c ****             {
1356:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1357:./Drivers/FreeRTOS/tasks.c **** 
1358:./Drivers/FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1359:./Drivers/FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1360:./Drivers/FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1361:./Drivers/FreeRTOS/tasks.c ****                  * is resumed.
1362:./Drivers/FreeRTOS/tasks.c ****                  *
1363:./Drivers/FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1364:./Drivers/FreeRTOS/tasks.c ****                  * executing task. */
1365:./Drivers/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1224              		.loc 1 1365 17
 1225 0034 0021     		movs	r1, #0
 1226 0036 7868     		ldr	r0, [r7, #4]
 1227 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1366:./Drivers/FreeRTOS/tasks.c ****             }
1367:./Drivers/FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 1228              		.loc 1 1367 31
 1229 003c FFF7FEFF 		bl	xTaskResumeAll
 1230 0040 F860     		str	r0, [r7, #12]
 1231              	.L60:
1368:./Drivers/FreeRTOS/tasks.c ****         }
1369:./Drivers/FreeRTOS/tasks.c ****         else
1370:./Drivers/FreeRTOS/tasks.c ****         {
1371:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1372:./Drivers/FreeRTOS/tasks.c ****         }
1373:./Drivers/FreeRTOS/tasks.c **** 
1374:./Drivers/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1375:./Drivers/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1376:./Drivers/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 1232              		.loc 1 1376 11
 1233 0042 FB68     		ldr	r3, [r7, #12]
 1234 0044 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 50


 1235 0046 07D1     		bne	.L64
1377:./Drivers/FreeRTOS/tasks.c ****         {
1378:./Drivers/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
 1236              		.loc 1 1378 13
 1237 0048 064B     		ldr	r3, .L65+4
 1238 004a 4FF08052 		mov	r2, #268435456
 1239 004e 1A60     		str	r2, [r3]
 1240              		.syntax unified
 1241              	@ 1378 "./Drivers/FreeRTOS/tasks.c" 1
 1242 0050 BFF34F8F 		dsb
 1243              	@ 0 "" 2
 1244              	@ 1378 "./Drivers/FreeRTOS/tasks.c" 1
 1245 0054 BFF36F8F 		isb
 1246              	@ 0 "" 2
 1247              		.thumb
 1248              		.syntax unified
 1249              	.L64:
1379:./Drivers/FreeRTOS/tasks.c ****         }
1380:./Drivers/FreeRTOS/tasks.c ****         else
1381:./Drivers/FreeRTOS/tasks.c ****         {
1382:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1383:./Drivers/FreeRTOS/tasks.c ****         }
1384:./Drivers/FreeRTOS/tasks.c ****     }
 1250              		.loc 1 1384 5
 1251 0058 00BF     		nop
 1252 005a 1037     		adds	r7, r7, #16
 1253              	.LCFI28:
 1254              		.cfi_def_cfa_offset 8
 1255 005c BD46     		mov	sp, r7
 1256              	.LCFI29:
 1257              		.cfi_def_cfa_register 13
 1258              		@ sp needed
 1259 005e 80BD     		pop	{r7, pc}
 1260              	.L66:
 1261              		.align	2
 1262              	.L65:
 1263 0060 00000000 		.word	uxSchedulerSuspended
 1264 0064 04ED00E0 		.word	-536810236
 1265              		.cfi_endproc
 1266              	.LFE10:
 1268              		.section	.text.eTaskGetState,"ax",%progbits
 1269              		.align	1
 1270              		.global	eTaskGetState
 1271              		.syntax unified
 1272              		.thumb
 1273              		.thumb_func
 1274              		.fpu fpv4-sp-d16
 1276              	eTaskGetState:
 1277              	.LFB11:
1385:./Drivers/FreeRTOS/tasks.c **** 
1386:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1387:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1388:./Drivers/FreeRTOS/tasks.c **** 
1389:./Drivers/FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1390:./Drivers/FreeRTOS/tasks.c **** 
1391:./Drivers/FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1392:./Drivers/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 51


 1278              		.loc 1 1392 5
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 40
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
 1282 0000 80B5     		push	{r7, lr}
 1283              	.LCFI30:
 1284              		.cfi_def_cfa_offset 8
 1285              		.cfi_offset 7, -8
 1286              		.cfi_offset 14, -4
 1287 0002 8AB0     		sub	sp, sp, #40
 1288              	.LCFI31:
 1289              		.cfi_def_cfa_offset 48
 1290 0004 00AF     		add	r7, sp, #0
 1291              	.LCFI32:
 1292              		.cfi_def_cfa_register 7
 1293 0006 7860     		str	r0, [r7, #4]
1393:./Drivers/FreeRTOS/tasks.c ****         eTaskState eReturn;
1394:./Drivers/FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1395:./Drivers/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1294              		.loc 1 1395 29
 1295 0008 7B68     		ldr	r3, [r7, #4]
 1296 000a FB61     		str	r3, [r7, #28]
1396:./Drivers/FreeRTOS/tasks.c **** 
1397:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
 1297              		.loc 1 1397 9
 1298 000c FB69     		ldr	r3, [r7, #28]
 1299 000e 002B     		cmp	r3, #0
 1300 0010 0AD1     		bne	.L68
 1301              	.LBB172:
 1302              	.LBB173:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1303              		.loc 2 198 9
 1304              		.syntax unified
 1305              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1306 0012 4FF05003 			mov r3, #80												
 1307 0016 83F31188 		msr basepri, r3											
 1308 001a BFF36F8F 		isb														
 1309 001e BFF34F8F 		dsb														
 1310              	
 1311              	@ 0 "" 2
 1312              		.thumb
 1313              		.syntax unified
 1314 0022 FB60     		str	r3, [r7, #12]
 1315              		.loc 2 206 5
 1316 0024 00BF     		nop
 1317              	.L69:
 1318              	.LBE173:
 1319              	.LBE172:
 1320              		.loc 1 1397 9 discriminator 1
 1321 0026 FEE7     		b	.L69
 1322              	.L68:
1398:./Drivers/FreeRTOS/tasks.c **** 
1399:./Drivers/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1323              		.loc 1 1399 19
 1324 0028 2D4B     		ldr	r3, .L83
 1325 002a 1B68     		ldr	r3, [r3]
 1326              		.loc 1 1399 11
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 52


 1327 002c FA69     		ldr	r2, [r7, #28]
 1328 002e 9A42     		cmp	r2, r3
 1329 0030 03D1     		bne	.L70
1400:./Drivers/FreeRTOS/tasks.c ****         {
1401:./Drivers/FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1402:./Drivers/FreeRTOS/tasks.c ****             eReturn = eRunning;
 1330              		.loc 1 1402 21
 1331 0032 0023     		movs	r3, #0
 1332 0034 87F82730 		strb	r3, [r7, #39]
 1333 0038 4BE0     		b	.L71
 1334              	.L70:
1403:./Drivers/FreeRTOS/tasks.c ****         }
1404:./Drivers/FreeRTOS/tasks.c ****         else
1405:./Drivers/FreeRTOS/tasks.c ****         {
1406:./Drivers/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 1335              		.loc 1 1406 13
 1336 003a FFF7FEFF 		bl	vPortEnterCritical
1407:./Drivers/FreeRTOS/tasks.c ****             {
1408:./Drivers/FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1337              		.loc 1 1408 29
 1338 003e FB69     		ldr	r3, [r7, #28]
 1339 0040 5B69     		ldr	r3, [r3, #20]
 1340 0042 BB61     		str	r3, [r7, #24]
1409:./Drivers/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1341              		.loc 1 1409 31
 1342 0044 274B     		ldr	r3, .L83+4
 1343 0046 1B68     		ldr	r3, [r3]
 1344 0048 7B61     		str	r3, [r7, #20]
1410:./Drivers/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1345              		.loc 1 1410 41
 1346 004a 274B     		ldr	r3, .L83+8
 1347 004c 1B68     		ldr	r3, [r3]
 1348 004e 3B61     		str	r3, [r7, #16]
1411:./Drivers/FreeRTOS/tasks.c ****             }
1412:./Drivers/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 1349              		.loc 1 1412 13
 1350 0050 FFF7FEFF 		bl	vPortExitCritical
1413:./Drivers/FreeRTOS/tasks.c **** 
1414:./Drivers/FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1351              		.loc 1 1414 15
 1352 0054 BA69     		ldr	r2, [r7, #24]
 1353 0056 7B69     		ldr	r3, [r7, #20]
 1354 0058 9A42     		cmp	r2, r3
 1355 005a 03D0     		beq	.L72
 1356              		.loc 1 1414 50 discriminator 1
 1357 005c BA69     		ldr	r2, [r7, #24]
 1358 005e 3B69     		ldr	r3, [r7, #16]
 1359 0060 9A42     		cmp	r2, r3
 1360 0062 03D1     		bne	.L73
 1361              	.L72:
1415:./Drivers/FreeRTOS/tasks.c ****             {
1416:./Drivers/FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1417:./Drivers/FreeRTOS/tasks.c ****                  * lists. */
1418:./Drivers/FreeRTOS/tasks.c ****                 eReturn = eBlocked;
 1362              		.loc 1 1418 25
 1363 0064 0223     		movs	r3, #2
 1364 0066 87F82730 		strb	r3, [r7, #39]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 53


 1365 006a 32E0     		b	.L71
 1366              	.L73:
1419:./Drivers/FreeRTOS/tasks.c ****             }
1420:./Drivers/FreeRTOS/tasks.c **** 
1421:./Drivers/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1422:./Drivers/FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
 1367              		.loc 1 1422 24
 1368 006c BB69     		ldr	r3, [r7, #24]
 1369 006e 1F4A     		ldr	r2, .L83+12
 1370 0070 9342     		cmp	r3, r2
 1371 0072 20D1     		bne	.L74
1423:./Drivers/FreeRTOS/tasks.c ****                 {
1424:./Drivers/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1425:./Drivers/FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1426:./Drivers/FreeRTOS/tasks.c ****                      * indefinitely? */
1427:./Drivers/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1372              		.loc 1 1427 25
 1373 0074 FB69     		ldr	r3, [r7, #28]
 1374 0076 9B6A     		ldr	r3, [r3, #40]
 1375              		.loc 1 1427 23
 1376 0078 002B     		cmp	r3, #0
 1377 007a 18D1     		bne	.L75
 1378              	.LBB174:
1428:./Drivers/FreeRTOS/tasks.c ****                     {
1429:./Drivers/FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1430:./Drivers/FreeRTOS/tasks.c ****                             {
1431:./Drivers/FreeRTOS/tasks.c ****                                 BaseType_t x;
1432:./Drivers/FreeRTOS/tasks.c **** 
1433:./Drivers/FreeRTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1434:./Drivers/FreeRTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1435:./Drivers/FreeRTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1436:./Drivers/FreeRTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1437:./Drivers/FreeRTOS/tasks.c ****                                  * suspended. */
1438:./Drivers/FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
 1379              		.loc 1 1438 41
 1380 007c 0323     		movs	r3, #3
 1381 007e 87F82730 		strb	r3, [r7, #39]
1439:./Drivers/FreeRTOS/tasks.c **** 
1440:./Drivers/FreeRTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1382              		.loc 1 1440 40
 1383 0082 0023     		movs	r3, #0
 1384 0084 3B62     		str	r3, [r7, #32]
 1385              		.loc 1 1440 33
 1386 0086 0EE0     		b	.L76
 1387              	.L79:
1441:./Drivers/FreeRTOS/tasks.c ****                                 {
1442:./Drivers/FreeRTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1388              		.loc 1 1442 61
 1389 0088 FA69     		ldr	r2, [r7, #28]
 1390 008a 3B6A     		ldr	r3, [r7, #32]
 1391 008c 1344     		add	r3, r3, r2
 1392 008e 5433     		adds	r3, r3, #84
 1393 0090 1B78     		ldrb	r3, [r3]
 1394 0092 DBB2     		uxtb	r3, r3
 1395              		.loc 1 1442 39
 1396 0094 012B     		cmp	r3, #1
 1397 0096 03D1     		bne	.L77
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 54


1443:./Drivers/FreeRTOS/tasks.c ****                                     {
1444:./Drivers/FreeRTOS/tasks.c ****                                         eReturn = eBlocked;
 1398              		.loc 1 1444 49
 1399 0098 0223     		movs	r3, #2
 1400 009a 87F82730 		strb	r3, [r7, #39]
1445:./Drivers/FreeRTOS/tasks.c ****                                         break;
 1401              		.loc 1 1445 41
 1402 009e 18E0     		b	.L71
 1403              	.L77:
1440:./Drivers/FreeRTOS/tasks.c ****                                 {
 1404              		.loc 1 1440 89 discriminator 2
 1405 00a0 3B6A     		ldr	r3, [r7, #32]
 1406 00a2 0133     		adds	r3, r3, #1
 1407 00a4 3B62     		str	r3, [r7, #32]
 1408              	.L76:
1440:./Drivers/FreeRTOS/tasks.c ****                                 {
 1409              		.loc 1 1440 33 discriminator 1
 1410 00a6 3B6A     		ldr	r3, [r7, #32]
 1411 00a8 002B     		cmp	r3, #0
 1412 00aa EDDD     		ble	.L79
 1413 00ac 11E0     		b	.L71
 1414              	.L75:
 1415              	.LBE174:
1446:./Drivers/FreeRTOS/tasks.c ****                                     }
1447:./Drivers/FreeRTOS/tasks.c ****                                 }
1448:./Drivers/FreeRTOS/tasks.c ****                             }
1449:./Drivers/FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1450:./Drivers/FreeRTOS/tasks.c ****                             {
1451:./Drivers/FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1452:./Drivers/FreeRTOS/tasks.c ****                             }
1453:./Drivers/FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1454:./Drivers/FreeRTOS/tasks.c ****                     }
1455:./Drivers/FreeRTOS/tasks.c ****                     else
1456:./Drivers/FreeRTOS/tasks.c ****                     {
1457:./Drivers/FreeRTOS/tasks.c ****                         eReturn = eBlocked;
 1416              		.loc 1 1457 33
 1417 00ae 0223     		movs	r3, #2
 1418 00b0 87F82730 		strb	r3, [r7, #39]
 1419 00b4 0DE0     		b	.L71
 1420              	.L74:
1458:./Drivers/FreeRTOS/tasks.c ****                     }
1459:./Drivers/FreeRTOS/tasks.c ****                 }
1460:./Drivers/FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1461:./Drivers/FreeRTOS/tasks.c **** 
1462:./Drivers/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1463:./Drivers/FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1421              		.loc 1 1463 24
 1422 00b6 BB69     		ldr	r3, [r7, #24]
 1423 00b8 0D4A     		ldr	r2, .L83+16
 1424 00ba 9342     		cmp	r3, r2
 1425 00bc 02D0     		beq	.L80
 1426              		.loc 1 1463 71 discriminator 1
 1427 00be BB69     		ldr	r3, [r7, #24]
 1428 00c0 002B     		cmp	r3, #0
 1429 00c2 03D1     		bne	.L81
 1430              	.L80:
1464:./Drivers/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 55


1465:./Drivers/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1466:./Drivers/FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1467:./Drivers/FreeRTOS/tasks.c ****                      * all. */
1468:./Drivers/FreeRTOS/tasks.c ****                     eReturn = eDeleted;
 1431              		.loc 1 1468 29
 1432 00c4 0423     		movs	r3, #4
 1433 00c6 87F82730 		strb	r3, [r7, #39]
 1434 00ca 02E0     		b	.L71
 1435              	.L81:
1469:./Drivers/FreeRTOS/tasks.c ****                 }
1470:./Drivers/FreeRTOS/tasks.c ****             #endif
1471:./Drivers/FreeRTOS/tasks.c **** 
1472:./Drivers/FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1473:./Drivers/FreeRTOS/tasks.c ****             {
1474:./Drivers/FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1475:./Drivers/FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1476:./Drivers/FreeRTOS/tasks.c ****                 eReturn = eReady;
 1436              		.loc 1 1476 25
 1437 00cc 0123     		movs	r3, #1
 1438 00ce 87F82730 		strb	r3, [r7, #39]
 1439              	.L71:
1477:./Drivers/FreeRTOS/tasks.c ****             }
1478:./Drivers/FreeRTOS/tasks.c ****         }
1479:./Drivers/FreeRTOS/tasks.c **** 
1480:./Drivers/FreeRTOS/tasks.c ****         return eReturn;
 1440              		.loc 1 1480 16
 1441 00d2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
1481:./Drivers/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1442              		.loc 1 1481 5
 1443 00d6 1846     		mov	r0, r3
 1444 00d8 2837     		adds	r7, r7, #40
 1445              	.LCFI33:
 1446              		.cfi_def_cfa_offset 8
 1447 00da BD46     		mov	sp, r7
 1448              	.LCFI34:
 1449              		.cfi_def_cfa_register 13
 1450              		@ sp needed
 1451 00dc 80BD     		pop	{r7, pc}
 1452              	.L84:
 1453 00de 00BF     		.align	2
 1454              	.L83:
 1455 00e0 00000000 		.word	pxCurrentTCB
 1456 00e4 00000000 		.word	pxDelayedTaskList
 1457 00e8 00000000 		.word	pxOverflowDelayedTaskList
 1458 00ec 00000000 		.word	xSuspendedTaskList
 1459 00f0 00000000 		.word	xTasksWaitingTermination
 1460              		.cfi_endproc
 1461              	.LFE11:
 1463              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1464              		.align	1
 1465              		.global	uxTaskPriorityGet
 1466              		.syntax unified
 1467              		.thumb
 1468              		.thumb_func
 1469              		.fpu fpv4-sp-d16
 1471              	uxTaskPriorityGet:
 1472              	.LFB12:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 56


1482:./Drivers/FreeRTOS/tasks.c **** 
1483:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1484:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1485:./Drivers/FreeRTOS/tasks.c **** 
1486:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1487:./Drivers/FreeRTOS/tasks.c **** 
1488:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1489:./Drivers/FreeRTOS/tasks.c ****     {
 1473              		.loc 1 1489 5
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 16
 1476              		@ frame_needed = 1, uses_anonymous_args = 0
 1477 0000 80B5     		push	{r7, lr}
 1478              	.LCFI35:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 7, -8
 1481              		.cfi_offset 14, -4
 1482 0002 84B0     		sub	sp, sp, #16
 1483              	.LCFI36:
 1484              		.cfi_def_cfa_offset 24
 1485 0004 00AF     		add	r7, sp, #0
 1486              	.LCFI37:
 1487              		.cfi_def_cfa_register 7
 1488 0006 7860     		str	r0, [r7, #4]
1490:./Drivers/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1491:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1492:./Drivers/FreeRTOS/tasks.c **** 
1493:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1489              		.loc 1 1493 9
 1490 0008 FFF7FEFF 		bl	vPortEnterCritical
1494:./Drivers/FreeRTOS/tasks.c ****         {
1495:./Drivers/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1496:./Drivers/FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1497:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1491              		.loc 1 1497 21
 1492 000c 7B68     		ldr	r3, [r7, #4]
 1493 000e 002B     		cmp	r3, #0
 1494 0010 02D1     		bne	.L86
 1495              		.loc 1 1497 21 is_stmt 0 discriminator 1
 1496 0012 074B     		ldr	r3, .L89
 1497 0014 1B68     		ldr	r3, [r3]
 1498 0016 00E0     		b	.L87
 1499              	.L86:
 1500              		.loc 1 1497 21 discriminator 2
 1501 0018 7B68     		ldr	r3, [r7, #4]
 1502              	.L87:
 1503              		.loc 1 1497 19 is_stmt 1 discriminator 4
 1504 001a FB60     		str	r3, [r7, #12]
1498:./Drivers/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1505              		.loc 1 1498 22 discriminator 4
 1506 001c FB68     		ldr	r3, [r7, #12]
 1507 001e DB6A     		ldr	r3, [r3, #44]
 1508 0020 BB60     		str	r3, [r7, #8]
1499:./Drivers/FreeRTOS/tasks.c ****         }
1500:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 1509              		.loc 1 1500 9 discriminator 4
 1510 0022 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 57


1501:./Drivers/FreeRTOS/tasks.c **** 
1502:./Drivers/FreeRTOS/tasks.c ****         return uxReturn;
 1511              		.loc 1 1502 16 discriminator 4
 1512 0026 BB68     		ldr	r3, [r7, #8]
1503:./Drivers/FreeRTOS/tasks.c ****     }
 1513              		.loc 1 1503 5 discriminator 4
 1514 0028 1846     		mov	r0, r3
 1515 002a 1037     		adds	r7, r7, #16
 1516              	.LCFI38:
 1517              		.cfi_def_cfa_offset 8
 1518 002c BD46     		mov	sp, r7
 1519              	.LCFI39:
 1520              		.cfi_def_cfa_register 13
 1521              		@ sp needed
 1522 002e 80BD     		pop	{r7, pc}
 1523              	.L90:
 1524              		.align	2
 1525              	.L89:
 1526 0030 00000000 		.word	pxCurrentTCB
 1527              		.cfi_endproc
 1528              	.LFE12:
 1530              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1531              		.align	1
 1532              		.global	uxTaskPriorityGetFromISR
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1536              		.fpu fpv4-sp-d16
 1538              	uxTaskPriorityGetFromISR:
 1539              	.LFB13:
1504:./Drivers/FreeRTOS/tasks.c **** 
1505:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1506:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1507:./Drivers/FreeRTOS/tasks.c **** 
1508:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1509:./Drivers/FreeRTOS/tasks.c **** 
1510:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1511:./Drivers/FreeRTOS/tasks.c ****     {
 1540              		.loc 1 1511 5
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 32
 1543              		@ frame_needed = 1, uses_anonymous_args = 0
 1544 0000 80B5     		push	{r7, lr}
 1545              	.LCFI40:
 1546              		.cfi_def_cfa_offset 8
 1547              		.cfi_offset 7, -8
 1548              		.cfi_offset 14, -4
 1549 0002 88B0     		sub	sp, sp, #32
 1550              	.LCFI41:
 1551              		.cfi_def_cfa_offset 40
 1552 0004 00AF     		add	r7, sp, #0
 1553              	.LCFI42:
 1554              		.cfi_def_cfa_register 7
 1555 0006 7860     		str	r0, [r7, #4]
1512:./Drivers/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1513:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1514:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 58


1515:./Drivers/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1516:./Drivers/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1517:./Drivers/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1518:./Drivers/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1519:./Drivers/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1520:./Drivers/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1521:./Drivers/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1522:./Drivers/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1523:./Drivers/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1524:./Drivers/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1525:./Drivers/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1526:./Drivers/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1527:./Drivers/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1528:./Drivers/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1529:./Drivers/FreeRTOS/tasks.c ****          * provided on the following link:
1530:./Drivers/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1531:./Drivers/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1556              		.loc 1 1531 9
 1557 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1558              	.LBB175:
 1559              	.LBB176:
 207:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1560              		.loc 2 214 9
 1561              		.syntax unified
 1562              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1563 000c EFF31182 			mrs r2, basepri											
 1564 0010 4FF05003 		mov r3, #80												
 1565 0014 83F31188 		msr basepri, r3											
 1566 0018 BFF36F8F 		isb														
 1567 001c BFF34F8F 		dsb														
 1568              	
 1569              	@ 0 "" 2
 1570              		.thumb
 1571              		.syntax unified
 1572 0020 3A61     		str	r2, [r7, #16]
 1573 0022 FB60     		str	r3, [r7, #12]
 215:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1574              		.loc 2 226 16
 1575 0024 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 59


 1576              	.LBE176:
 1577              	.LBE175:
1532:./Drivers/FreeRTOS/tasks.c **** 
1533:./Drivers/FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1578              		.loc 1 1533 33
 1579 0026 FB61     		str	r3, [r7, #28]
1534:./Drivers/FreeRTOS/tasks.c ****         {
1535:./Drivers/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1536:./Drivers/FreeRTOS/tasks.c ****              * task that is being queried. */
1537:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1580              		.loc 1 1537 21
 1581 0028 7B68     		ldr	r3, [r7, #4]
 1582 002a 002B     		cmp	r3, #0
 1583 002c 02D1     		bne	.L93
 1584              		.loc 1 1537 21 is_stmt 0 discriminator 1
 1585 002e 094B     		ldr	r3, .L96
 1586 0030 1B68     		ldr	r3, [r3]
 1587 0032 00E0     		b	.L94
 1588              	.L93:
 1589              		.loc 1 1537 21 discriminator 2
 1590 0034 7B68     		ldr	r3, [r7, #4]
 1591              	.L94:
 1592              		.loc 1 1537 19 is_stmt 1 discriminator 4
 1593 0036 BB61     		str	r3, [r7, #24]
1538:./Drivers/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1594              		.loc 1 1538 22 discriminator 4
 1595 0038 BB69     		ldr	r3, [r7, #24]
 1596 003a DB6A     		ldr	r3, [r3, #44]
 1597 003c 7B61     		str	r3, [r7, #20]
 1598 003e FB69     		ldr	r3, [r7, #28]
 1599 0040 BB60     		str	r3, [r7, #8]
 1600              	.LBB177:
 1601              	.LBB178:
 227:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 230:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 231:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1602              		.loc 2 232 9 discriminator 4
 1603 0042 BB68     		ldr	r3, [r7, #8]
 1604              		.syntax unified
 1605              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1606 0044 83F31188 			msr basepri, r3	
 1607              	@ 0 "" 2
 233:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 234:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
 235:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 236:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1608              		.loc 2 236 5 discriminator 4
 1609              		.thumb
 1610              		.syntax unified
 1611 0048 00BF     		nop
 1612              	.LBE178:
 1613              	.LBE177:
1539:./Drivers/FreeRTOS/tasks.c ****         }
1540:./Drivers/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 60


1541:./Drivers/FreeRTOS/tasks.c **** 
1542:./Drivers/FreeRTOS/tasks.c ****         return uxReturn;
 1614              		.loc 1 1542 16 discriminator 4
 1615 004a 7B69     		ldr	r3, [r7, #20]
1543:./Drivers/FreeRTOS/tasks.c ****     }
 1616              		.loc 1 1543 5 discriminator 4
 1617 004c 1846     		mov	r0, r3
 1618 004e 2037     		adds	r7, r7, #32
 1619              	.LCFI43:
 1620              		.cfi_def_cfa_offset 8
 1621 0050 BD46     		mov	sp, r7
 1622              	.LCFI44:
 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0052 80BD     		pop	{r7, pc}
 1626              	.L97:
 1627              		.align	2
 1628              	.L96:
 1629 0054 00000000 		.word	pxCurrentTCB
 1630              		.cfi_endproc
 1631              	.LFE13:
 1633              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1634              		.align	1
 1635              		.global	vTaskPrioritySet
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1639              		.fpu fpv4-sp-d16
 1641              	vTaskPrioritySet:
 1642              	.LFB14:
1544:./Drivers/FreeRTOS/tasks.c **** 
1545:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1546:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1547:./Drivers/FreeRTOS/tasks.c **** 
1548:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1549:./Drivers/FreeRTOS/tasks.c **** 
1550:./Drivers/FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1551:./Drivers/FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1552:./Drivers/FreeRTOS/tasks.c ****     {
 1643              		.loc 1 1552 5
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 32
 1646              		@ frame_needed = 1, uses_anonymous_args = 0
 1647 0000 80B5     		push	{r7, lr}
 1648              	.LCFI45:
 1649              		.cfi_def_cfa_offset 8
 1650              		.cfi_offset 7, -8
 1651              		.cfi_offset 14, -4
 1652 0002 88B0     		sub	sp, sp, #32
 1653              	.LCFI46:
 1654              		.cfi_def_cfa_offset 40
 1655 0004 00AF     		add	r7, sp, #0
 1656              	.LCFI47:
 1657              		.cfi_def_cfa_register 7
 1658 0006 7860     		str	r0, [r7, #4]
 1659 0008 3960     		str	r1, [r7]
1553:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 61


1554:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1555:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1660              		.loc 1 1555 20
 1661 000a 0023     		movs	r3, #0
 1662 000c FB61     		str	r3, [r7, #28]
1556:./Drivers/FreeRTOS/tasks.c **** 
1557:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
 1663              		.loc 1 1557 9
 1664 000e 3B68     		ldr	r3, [r7]
 1665 0010 042B     		cmp	r3, #4
 1666 0012 0AD9     		bls	.L99
 1667              	.LBB179:
 1668              	.LBB180:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1669              		.loc 2 198 9
 1670              		.syntax unified
 1671              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1672 0014 4FF05003 			mov r3, #80												
 1673 0018 83F31188 		msr basepri, r3											
 1674 001c BFF36F8F 		isb														
 1675 0020 BFF34F8F 		dsb														
 1676              	
 1677              	@ 0 "" 2
 1678              		.thumb
 1679              		.syntax unified
 1680 0024 BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1681              		.loc 2 206 5
 1682 0026 00BF     		nop
 1683              	.L100:
 1684              	.LBE180:
 1685              	.LBE179:
 1686              		.loc 1 1557 9 discriminator 1
 1687 0028 FEE7     		b	.L100
 1688              	.L99:
1558:./Drivers/FreeRTOS/tasks.c **** 
1559:./Drivers/FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1560:./Drivers/FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1689              		.loc 1 1560 11
 1690 002a 3B68     		ldr	r3, [r7]
 1691 002c 042B     		cmp	r3, #4
 1692 002e 01D9     		bls	.L101
1561:./Drivers/FreeRTOS/tasks.c ****         {
1562:./Drivers/FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1693              		.loc 1 1562 27
 1694 0030 0423     		movs	r3, #4
 1695 0032 3B60     		str	r3, [r7]
 1696              	.L101:
1563:./Drivers/FreeRTOS/tasks.c ****         }
1564:./Drivers/FreeRTOS/tasks.c ****         else
1565:./Drivers/FreeRTOS/tasks.c ****         {
1566:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1567:./Drivers/FreeRTOS/tasks.c ****         }
1568:./Drivers/FreeRTOS/tasks.c **** 
1569:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1697              		.loc 1 1569 9
 1698 0034 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 62


1570:./Drivers/FreeRTOS/tasks.c ****         {
1571:./Drivers/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1572:./Drivers/FreeRTOS/tasks.c ****              * task that is being changed. */
1573:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1699              		.loc 1 1573 21
 1700 0038 7B68     		ldr	r3, [r7, #4]
 1701 003a 002B     		cmp	r3, #0
 1702 003c 02D1     		bne	.L102
 1703              		.loc 1 1573 21 is_stmt 0 discriminator 1
 1704 003e 554B     		ldr	r3, .L111
 1705 0040 1B68     		ldr	r3, [r3]
 1706 0042 00E0     		b	.L103
 1707              	.L102:
 1708              		.loc 1 1573 21 discriminator 2
 1709 0044 7B68     		ldr	r3, [r7, #4]
 1710              	.L103:
 1711              		.loc 1 1573 19 is_stmt 1 discriminator 4
 1712 0046 BB61     		str	r3, [r7, #24]
1574:./Drivers/FreeRTOS/tasks.c **** 
1575:./Drivers/FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1576:./Drivers/FreeRTOS/tasks.c **** 
1577:./Drivers/FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1578:./Drivers/FreeRTOS/tasks.c ****                 {
1579:./Drivers/FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
 1713              		.loc 1 1579 43 discriminator 4
 1714 0048 BB69     		ldr	r3, [r7, #24]
 1715 004a 9B6C     		ldr	r3, [r3, #72]
 1716 004c 7B61     		str	r3, [r7, #20]
1580:./Drivers/FreeRTOS/tasks.c ****                 }
1581:./Drivers/FreeRTOS/tasks.c ****             #else
1582:./Drivers/FreeRTOS/tasks.c ****                 {
1583:./Drivers/FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1584:./Drivers/FreeRTOS/tasks.c ****                 }
1585:./Drivers/FreeRTOS/tasks.c ****             #endif
1586:./Drivers/FreeRTOS/tasks.c **** 
1587:./Drivers/FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1717              		.loc 1 1587 15 discriminator 4
 1718 004e 7A69     		ldr	r2, [r7, #20]
 1719 0050 3B68     		ldr	r3, [r7]
 1720 0052 9A42     		cmp	r2, r3
 1721 0054 00F09880 		beq	.L104
1588:./Drivers/FreeRTOS/tasks.c ****             {
1589:./Drivers/FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1590:./Drivers/FreeRTOS/tasks.c ****                  * priority than the calling task. */
1591:./Drivers/FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1722              		.loc 1 1591 19
 1723 0058 3A68     		ldr	r2, [r7]
 1724 005a 7B69     		ldr	r3, [r7, #20]
 1725 005c 9A42     		cmp	r2, r3
 1726 005e 0DD9     		bls	.L105
1592:./Drivers/FreeRTOS/tasks.c ****                 {
1593:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1727              		.loc 1 1593 31
 1728 0060 4C4B     		ldr	r3, .L111
 1729 0062 1B68     		ldr	r3, [r3]
 1730              		.loc 1 1593 23
 1731 0064 BA69     		ldr	r2, [r7, #24]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 63


 1732 0066 9A42     		cmp	r2, r3
 1733 0068 0FD0     		beq	.L106
1594:./Drivers/FreeRTOS/tasks.c ****                     {
1595:./Drivers/FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1596:./Drivers/FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1597:./Drivers/FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1598:./Drivers/FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1734              		.loc 1 1598 58
 1735 006a 4A4B     		ldr	r3, .L111
 1736 006c 1B68     		ldr	r3, [r3]
 1737 006e DB6A     		ldr	r3, [r3, #44]
 1738              		.loc 1 1598 27
 1739 0070 3A68     		ldr	r2, [r7]
 1740 0072 9A42     		cmp	r2, r3
 1741 0074 09D3     		bcc	.L106
1599:./Drivers/FreeRTOS/tasks.c ****                         {
1600:./Drivers/FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
 1742              		.loc 1 1600 44
 1743 0076 0123     		movs	r3, #1
 1744 0078 FB61     		str	r3, [r7, #28]
 1745 007a 06E0     		b	.L106
 1746              	.L105:
1601:./Drivers/FreeRTOS/tasks.c ****                         }
1602:./Drivers/FreeRTOS/tasks.c ****                         else
1603:./Drivers/FreeRTOS/tasks.c ****                         {
1604:./Drivers/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1605:./Drivers/FreeRTOS/tasks.c ****                         }
1606:./Drivers/FreeRTOS/tasks.c ****                     }
1607:./Drivers/FreeRTOS/tasks.c ****                     else
1608:./Drivers/FreeRTOS/tasks.c ****                     {
1609:./Drivers/FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1610:./Drivers/FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1611:./Drivers/FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1612:./Drivers/FreeRTOS/tasks.c ****                     }
1613:./Drivers/FreeRTOS/tasks.c ****                 }
1614:./Drivers/FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1747              		.loc 1 1614 32
 1748 007c 454B     		ldr	r3, .L111
 1749 007e 1B68     		ldr	r3, [r3]
 1750              		.loc 1 1614 24
 1751 0080 BA69     		ldr	r2, [r7, #24]
 1752 0082 9A42     		cmp	r2, r3
 1753 0084 01D1     		bne	.L106
1615:./Drivers/FreeRTOS/tasks.c ****                 {
1616:./Drivers/FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1617:./Drivers/FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1618:./Drivers/FreeRTOS/tasks.c ****                      * is ready to execute. */
1619:./Drivers/FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
 1754              		.loc 1 1619 36
 1755 0086 0123     		movs	r3, #1
 1756 0088 FB61     		str	r3, [r7, #28]
 1757              	.L106:
1620:./Drivers/FreeRTOS/tasks.c ****                 }
1621:./Drivers/FreeRTOS/tasks.c ****                 else
1622:./Drivers/FreeRTOS/tasks.c ****                 {
1623:./Drivers/FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1624:./Drivers/FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 64


1625:./Drivers/FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1626:./Drivers/FreeRTOS/tasks.c ****                 }
1627:./Drivers/FreeRTOS/tasks.c **** 
1628:./Drivers/FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1629:./Drivers/FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1630:./Drivers/FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1631:./Drivers/FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1758              		.loc 1 1631 39
 1759 008a BB69     		ldr	r3, [r7, #24]
 1760 008c DB6A     		ldr	r3, [r3, #44]
 1761 008e 3B61     		str	r3, [r7, #16]
1632:./Drivers/FreeRTOS/tasks.c **** 
1633:./Drivers/FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1634:./Drivers/FreeRTOS/tasks.c ****                     {
1635:./Drivers/FreeRTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1636:./Drivers/FreeRTOS/tasks.c ****                          * currently using an inherited priority. */
1637:./Drivers/FreeRTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1762              		.loc 1 1637 34
 1763 0090 BB69     		ldr	r3, [r7, #24]
 1764 0092 9A6C     		ldr	r2, [r3, #72]
 1765              		.loc 1 1637 59
 1766 0094 BB69     		ldr	r3, [r7, #24]
 1767 0096 DB6A     		ldr	r3, [r3, #44]
 1768              		.loc 1 1637 27
 1769 0098 9A42     		cmp	r2, r3
 1770 009a 02D1     		bne	.L107
1638:./Drivers/FreeRTOS/tasks.c ****                         {
1639:./Drivers/FreeRTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
 1771              		.loc 1 1639 47
 1772 009c BB69     		ldr	r3, [r7, #24]
 1773 009e 3A68     		ldr	r2, [r7]
 1774 00a0 DA62     		str	r2, [r3, #44]
 1775              	.L107:
1640:./Drivers/FreeRTOS/tasks.c ****                         }
1641:./Drivers/FreeRTOS/tasks.c ****                         else
1642:./Drivers/FreeRTOS/tasks.c ****                         {
1643:./Drivers/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1644:./Drivers/FreeRTOS/tasks.c ****                         }
1645:./Drivers/FreeRTOS/tasks.c **** 
1646:./Drivers/FreeRTOS/tasks.c ****                         /* The base priority gets set whatever. */
1647:./Drivers/FreeRTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
 1776              		.loc 1 1647 47
 1777 00a2 BB69     		ldr	r3, [r7, #24]
 1778 00a4 3A68     		ldr	r2, [r7]
 1779 00a6 9A64     		str	r2, [r3, #72]
1648:./Drivers/FreeRTOS/tasks.c ****                     }
1649:./Drivers/FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1650:./Drivers/FreeRTOS/tasks.c ****                     {
1651:./Drivers/FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1652:./Drivers/FreeRTOS/tasks.c ****                     }
1653:./Drivers/FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1654:./Drivers/FreeRTOS/tasks.c **** 
1655:./Drivers/FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1656:./Drivers/FreeRTOS/tasks.c ****                  * being used for anything else. */
1657:./Drivers/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1780              		.loc 1 1657 23
 1781 00a8 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 65


 1782 00aa 9B69     		ldr	r3, [r3, #24]
 1783              		.loc 1 1657 19
 1784 00ac 002B     		cmp	r3, #0
 1785 00ae 04DB     		blt	.L108
1658:./Drivers/FreeRTOS/tasks.c ****                 {
1659:./Drivers/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1786              		.loc 1 1659 21
 1787 00b0 3B68     		ldr	r3, [r7]
 1788 00b2 C3F10502 		rsb	r2, r3, #5
 1789 00b6 BB69     		ldr	r3, [r7, #24]
 1790 00b8 9A61     		str	r2, [r3, #24]
 1791              	.L108:
1660:./Drivers/FreeRTOS/tasks.c ****                 }
1661:./Drivers/FreeRTOS/tasks.c ****                 else
1662:./Drivers/FreeRTOS/tasks.c ****                 {
1663:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1664:./Drivers/FreeRTOS/tasks.c ****                 }
1665:./Drivers/FreeRTOS/tasks.c **** 
1666:./Drivers/FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1667:./Drivers/FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1668:./Drivers/FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1669:./Drivers/FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1670:./Drivers/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1792              		.loc 1 1670 21
 1793 00ba BB69     		ldr	r3, [r7, #24]
 1794 00bc 5969     		ldr	r1, [r3, #20]
 1795 00be 3A69     		ldr	r2, [r7, #16]
 1796 00c0 1346     		mov	r3, r2
 1797 00c2 9B00     		lsls	r3, r3, #2
 1798 00c4 1344     		add	r3, r3, r2
 1799 00c6 9B00     		lsls	r3, r3, #2
 1800 00c8 334A     		ldr	r2, .L111+4
 1801 00ca 1344     		add	r3, r3, r2
 1802              		.loc 1 1670 19
 1803 00cc 9942     		cmp	r1, r3
 1804 00ce 50D1     		bne	.L109
1671:./Drivers/FreeRTOS/tasks.c ****                 {
1672:./Drivers/FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1673:./Drivers/FreeRTOS/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1674:./Drivers/FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1675:./Drivers/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1805              		.loc 1 1675 25
 1806 00d0 BB69     		ldr	r3, [r7, #24]
 1807 00d2 0433     		adds	r3, r3, #4
 1808 00d4 1846     		mov	r0, r3
 1809 00d6 FFF7FEFF 		bl	uxListRemove
 1810 00da 0346     		mov	r3, r0
 1811              		.loc 1 1675 23
 1812 00dc 002B     		cmp	r3, #0
 1813 00de 09D1     		bne	.L110
1676:./Drivers/FreeRTOS/tasks.c ****                     {
1677:./Drivers/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1678:./Drivers/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1679:./Drivers/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1680:./Drivers/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1814              		.loc 1 1680 25
 1815 00e0 0122     		movs	r2, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 66


 1816 00e2 3B69     		ldr	r3, [r7, #16]
 1817 00e4 02FA03F3 		lsl	r3, r2, r3
 1818 00e8 DA43     		mvns	r2, r3
 1819 00ea 2C4B     		ldr	r3, .L111+8
 1820 00ec 1B68     		ldr	r3, [r3]
 1821 00ee 1340     		ands	r3, r3, r2
 1822 00f0 2A4A     		ldr	r2, .L111+8
 1823 00f2 1360     		str	r3, [r2]
 1824              	.L110:
1681:./Drivers/FreeRTOS/tasks.c ****                     }
1682:./Drivers/FreeRTOS/tasks.c ****                     else
1683:./Drivers/FreeRTOS/tasks.c ****                     {
1684:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1685:./Drivers/FreeRTOS/tasks.c ****                     }
1686:./Drivers/FreeRTOS/tasks.c **** 
1687:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1825              		.loc 1 1687 21
 1826 00f4 BB69     		ldr	r3, [r7, #24]
 1827 00f6 DB6A     		ldr	r3, [r3, #44]
 1828 00f8 0122     		movs	r2, #1
 1829 00fa 9A40     		lsls	r2, r2, r3
 1830 00fc 274B     		ldr	r3, .L111+8
 1831 00fe 1B68     		ldr	r3, [r3]
 1832 0100 1343     		orrs	r3, r3, r2
 1833 0102 264A     		ldr	r2, .L111+8
 1834 0104 1360     		str	r3, [r2]
 1835              	.LBB181:
 1836 0106 BB69     		ldr	r3, [r7, #24]
 1837 0108 DA6A     		ldr	r2, [r3, #44]
 1838 010a 2349     		ldr	r1, .L111+4
 1839 010c 1346     		mov	r3, r2
 1840 010e 9B00     		lsls	r3, r3, #2
 1841 0110 1344     		add	r3, r3, r2
 1842 0112 9B00     		lsls	r3, r3, #2
 1843 0114 0B44     		add	r3, r3, r1
 1844 0116 0433     		adds	r3, r3, #4
 1845 0118 1B68     		ldr	r3, [r3]
 1846 011a FB60     		str	r3, [r7, #12]
 1847 011c BB69     		ldr	r3, [r7, #24]
 1848 011e FA68     		ldr	r2, [r7, #12]
 1849 0120 9A60     		str	r2, [r3, #8]
 1850 0122 FB68     		ldr	r3, [r7, #12]
 1851 0124 9A68     		ldr	r2, [r3, #8]
 1852 0126 BB69     		ldr	r3, [r7, #24]
 1853 0128 DA60     		str	r2, [r3, #12]
 1854 012a FB68     		ldr	r3, [r7, #12]
 1855 012c 9B68     		ldr	r3, [r3, #8]
 1856 012e BA69     		ldr	r2, [r7, #24]
 1857 0130 0432     		adds	r2, r2, #4
 1858 0132 5A60     		str	r2, [r3, #4]
 1859 0134 BB69     		ldr	r3, [r7, #24]
 1860 0136 1A1D     		adds	r2, r3, #4
 1861 0138 FB68     		ldr	r3, [r7, #12]
 1862 013a 9A60     		str	r2, [r3, #8]
 1863 013c BB69     		ldr	r3, [r7, #24]
 1864 013e DA6A     		ldr	r2, [r3, #44]
 1865 0140 1346     		mov	r3, r2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 67


 1866 0142 9B00     		lsls	r3, r3, #2
 1867 0144 1344     		add	r3, r3, r2
 1868 0146 9B00     		lsls	r3, r3, #2
 1869 0148 134A     		ldr	r2, .L111+4
 1870 014a 1A44     		add	r2, r2, r3
 1871 014c BB69     		ldr	r3, [r7, #24]
 1872 014e 5A61     		str	r2, [r3, #20]
 1873 0150 BB69     		ldr	r3, [r7, #24]
 1874 0152 DA6A     		ldr	r2, [r3, #44]
 1875 0154 1049     		ldr	r1, .L111+4
 1876 0156 1346     		mov	r3, r2
 1877 0158 9B00     		lsls	r3, r3, #2
 1878 015a 1344     		add	r3, r3, r2
 1879 015c 9B00     		lsls	r3, r3, #2
 1880 015e 0B44     		add	r3, r3, r1
 1881 0160 1B68     		ldr	r3, [r3]
 1882 0162 591C     		adds	r1, r3, #1
 1883 0164 0C48     		ldr	r0, .L111+4
 1884 0166 1346     		mov	r3, r2
 1885 0168 9B00     		lsls	r3, r3, #2
 1886 016a 1344     		add	r3, r3, r2
 1887 016c 9B00     		lsls	r3, r3, #2
 1888 016e 0344     		add	r3, r3, r0
 1889 0170 1960     		str	r1, [r3]
 1890              	.L109:
 1891              	.LBE181:
1688:./Drivers/FreeRTOS/tasks.c ****                 }
1689:./Drivers/FreeRTOS/tasks.c ****                 else
1690:./Drivers/FreeRTOS/tasks.c ****                 {
1691:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1692:./Drivers/FreeRTOS/tasks.c ****                 }
1693:./Drivers/FreeRTOS/tasks.c **** 
1694:./Drivers/FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
 1892              		.loc 1 1694 19
 1893 0172 FB69     		ldr	r3, [r7, #28]
 1894 0174 002B     		cmp	r3, #0
 1895 0176 07D0     		beq	.L104
1695:./Drivers/FreeRTOS/tasks.c ****                 {
1696:./Drivers/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 1896              		.loc 1 1696 21
 1897 0178 094B     		ldr	r3, .L111+12
 1898 017a 4FF08052 		mov	r2, #268435456
 1899 017e 1A60     		str	r2, [r3]
 1900              		.syntax unified
 1901              	@ 1696 "./Drivers/FreeRTOS/tasks.c" 1
 1902 0180 BFF34F8F 		dsb
 1903              	@ 0 "" 2
 1904              	@ 1696 "./Drivers/FreeRTOS/tasks.c" 1
 1905 0184 BFF36F8F 		isb
 1906              	@ 0 "" 2
 1907              		.thumb
 1908              		.syntax unified
 1909              	.L104:
1697:./Drivers/FreeRTOS/tasks.c ****                 }
1698:./Drivers/FreeRTOS/tasks.c ****                 else
1699:./Drivers/FreeRTOS/tasks.c ****                 {
1700:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 68


1701:./Drivers/FreeRTOS/tasks.c ****                 }
1702:./Drivers/FreeRTOS/tasks.c **** 
1703:./Drivers/FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1704:./Drivers/FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1705:./Drivers/FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1706:./Drivers/FreeRTOS/tasks.c ****             }
1707:./Drivers/FreeRTOS/tasks.c ****         }
1708:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 1910              		.loc 1 1708 9
 1911 0188 FFF7FEFF 		bl	vPortExitCritical
1709:./Drivers/FreeRTOS/tasks.c ****     }
 1912              		.loc 1 1709 5
 1913 018c 00BF     		nop
 1914 018e 2037     		adds	r7, r7, #32
 1915              	.LCFI48:
 1916              		.cfi_def_cfa_offset 8
 1917 0190 BD46     		mov	sp, r7
 1918              	.LCFI49:
 1919              		.cfi_def_cfa_register 13
 1920              		@ sp needed
 1921 0192 80BD     		pop	{r7, pc}
 1922              	.L112:
 1923              		.align	2
 1924              	.L111:
 1925 0194 00000000 		.word	pxCurrentTCB
 1926 0198 00000000 		.word	pxReadyTasksLists
 1927 019c 00000000 		.word	uxTopReadyPriority
 1928 01a0 04ED00E0 		.word	-536810236
 1929              		.cfi_endproc
 1930              	.LFE14:
 1932              		.section	.text.vTaskSuspend,"ax",%progbits
 1933              		.align	1
 1934              		.global	vTaskSuspend
 1935              		.syntax unified
 1936              		.thumb
 1937              		.thumb_func
 1938              		.fpu fpv4-sp-d16
 1940              	vTaskSuspend:
 1941              	.LFB15:
1710:./Drivers/FreeRTOS/tasks.c **** 
1711:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1712:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1713:./Drivers/FreeRTOS/tasks.c **** 
1714:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1715:./Drivers/FreeRTOS/tasks.c **** 
1716:./Drivers/FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1717:./Drivers/FreeRTOS/tasks.c ****     {
 1942              		.loc 1 1717 5
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 24
 1945              		@ frame_needed = 1, uses_anonymous_args = 0
 1946 0000 80B5     		push	{r7, lr}
 1947              	.LCFI50:
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 7, -8
 1950              		.cfi_offset 14, -4
 1951 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 69


 1952              	.LCFI51:
 1953              		.cfi_def_cfa_offset 32
 1954 0004 00AF     		add	r7, sp, #0
 1955              	.LCFI52:
 1956              		.cfi_def_cfa_register 7
 1957 0006 7860     		str	r0, [r7, #4]
1718:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1719:./Drivers/FreeRTOS/tasks.c **** 
1720:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 1958              		.loc 1 1720 9
 1959 0008 FFF7FEFF 		bl	vPortEnterCritical
1721:./Drivers/FreeRTOS/tasks.c ****         {
1722:./Drivers/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1723:./Drivers/FreeRTOS/tasks.c ****              * being suspended. */
1724:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1960              		.loc 1 1724 21
 1961 000c 7B68     		ldr	r3, [r7, #4]
 1962 000e 002B     		cmp	r3, #0
 1963 0010 02D1     		bne	.L114
 1964              		.loc 1 1724 21 is_stmt 0 discriminator 1
 1965 0012 434B     		ldr	r3, .L128
 1966 0014 1B68     		ldr	r3, [r3]
 1967 0016 00E0     		b	.L115
 1968              	.L114:
 1969              		.loc 1 1724 21 discriminator 2
 1970 0018 7B68     		ldr	r3, [r7, #4]
 1971              	.L115:
 1972              		.loc 1 1724 19 is_stmt 1 discriminator 4
 1973 001a 3B61     		str	r3, [r7, #16]
1725:./Drivers/FreeRTOS/tasks.c **** 
1726:./Drivers/FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1727:./Drivers/FreeRTOS/tasks.c **** 
1728:./Drivers/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1729:./Drivers/FreeRTOS/tasks.c ****              * suspended list. */
1730:./Drivers/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1974              		.loc 1 1730 17 discriminator 4
 1975 001c 3B69     		ldr	r3, [r7, #16]
 1976 001e 0433     		adds	r3, r3, #4
 1977 0020 1846     		mov	r0, r3
 1978 0022 FFF7FEFF 		bl	uxListRemove
 1979 0026 0346     		mov	r3, r0
 1980              		.loc 1 1730 15 discriminator 4
 1981 0028 002B     		cmp	r3, #0
 1982 002a 15D1     		bne	.L116
1731:./Drivers/FreeRTOS/tasks.c ****             {
1732:./Drivers/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1983              		.loc 1 1732 17
 1984 002c 3B69     		ldr	r3, [r7, #16]
 1985 002e DA6A     		ldr	r2, [r3, #44]
 1986 0030 3C49     		ldr	r1, .L128+4
 1987 0032 1346     		mov	r3, r2
 1988 0034 9B00     		lsls	r3, r3, #2
 1989 0036 1344     		add	r3, r3, r2
 1990 0038 9B00     		lsls	r3, r3, #2
 1991 003a 0B44     		add	r3, r3, r1
 1992 003c 1B68     		ldr	r3, [r3]
 1993 003e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 70


 1994 0040 0AD1     		bne	.L116
 1995              		.loc 1 1732 17 is_stmt 0 discriminator 1
 1996 0042 3B69     		ldr	r3, [r7, #16]
 1997 0044 DB6A     		ldr	r3, [r3, #44]
 1998 0046 0122     		movs	r2, #1
 1999 0048 02FA03F3 		lsl	r3, r2, r3
 2000 004c DA43     		mvns	r2, r3
 2001 004e 364B     		ldr	r3, .L128+8
 2002 0050 1B68     		ldr	r3, [r3]
 2003 0052 1340     		ands	r3, r3, r2
 2004 0054 344A     		ldr	r2, .L128+8
 2005 0056 1360     		str	r3, [r2]
 2006              	.L116:
1733:./Drivers/FreeRTOS/tasks.c ****             }
1734:./Drivers/FreeRTOS/tasks.c ****             else
1735:./Drivers/FreeRTOS/tasks.c ****             {
1736:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:./Drivers/FreeRTOS/tasks.c ****             }
1738:./Drivers/FreeRTOS/tasks.c **** 
1739:./Drivers/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1740:./Drivers/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2007              		.loc 1 1740 17 is_stmt 1
 2008 0058 3B69     		ldr	r3, [r7, #16]
 2009 005a 9B6A     		ldr	r3, [r3, #40]
 2010              		.loc 1 1740 15
 2011 005c 002B     		cmp	r3, #0
 2012 005e 04D0     		beq	.L117
1741:./Drivers/FreeRTOS/tasks.c ****             {
1742:./Drivers/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2013              		.loc 1 1742 26
 2014 0060 3B69     		ldr	r3, [r7, #16]
 2015 0062 1833     		adds	r3, r3, #24
 2016 0064 1846     		mov	r0, r3
 2017 0066 FFF7FEFF 		bl	uxListRemove
 2018              	.L117:
1743:./Drivers/FreeRTOS/tasks.c ****             }
1744:./Drivers/FreeRTOS/tasks.c ****             else
1745:./Drivers/FreeRTOS/tasks.c ****             {
1746:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1747:./Drivers/FreeRTOS/tasks.c ****             }
1748:./Drivers/FreeRTOS/tasks.c **** 
1749:./Drivers/FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 2019              		.loc 1 1749 13
 2020 006a 3B69     		ldr	r3, [r7, #16]
 2021 006c 0433     		adds	r3, r3, #4
 2022 006e 1946     		mov	r1, r3
 2023 0070 2E48     		ldr	r0, .L128+12
 2024 0072 FFF7FEFF 		bl	vListInsertEnd
 2025              	.LBB182:
1750:./Drivers/FreeRTOS/tasks.c **** 
1751:./Drivers/FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1752:./Drivers/FreeRTOS/tasks.c ****                 {
1753:./Drivers/FreeRTOS/tasks.c ****                     BaseType_t x;
1754:./Drivers/FreeRTOS/tasks.c **** 
1755:./Drivers/FreeRTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 2026              		.loc 1 1755 28
 2027 0076 0023     		movs	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 71


 2028 0078 7B61     		str	r3, [r7, #20]
 2029              		.loc 1 1755 21
 2030 007a 10E0     		b	.L118
 2031              	.L120:
1756:./Drivers/FreeRTOS/tasks.c ****                     {
1757:./Drivers/FreeRTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 2032              		.loc 1 1757 49
 2033 007c 3A69     		ldr	r2, [r7, #16]
 2034 007e 7B69     		ldr	r3, [r7, #20]
 2035 0080 1344     		add	r3, r3, r2
 2036 0082 5433     		adds	r3, r3, #84
 2037 0084 1B78     		ldrb	r3, [r3]
 2038 0086 DBB2     		uxtb	r3, r3
 2039              		.loc 1 1757 27
 2040 0088 012B     		cmp	r3, #1
 2041 008a 05D1     		bne	.L119
1758:./Drivers/FreeRTOS/tasks.c ****                         {
1759:./Drivers/FreeRTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1760:./Drivers/FreeRTOS/tasks.c ****                              * now suspended, so no notification was received. */
1761:./Drivers/FreeRTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 2042              		.loc 1 1761 55
 2043 008c 3A69     		ldr	r2, [r7, #16]
 2044 008e 7B69     		ldr	r3, [r7, #20]
 2045 0090 1344     		add	r3, r3, r2
 2046 0092 5433     		adds	r3, r3, #84
 2047 0094 0022     		movs	r2, #0
 2048 0096 1A70     		strb	r2, [r3]
 2049              	.L119:
1755:./Drivers/FreeRTOS/tasks.c ****                     {
 2050              		.loc 1 1755 77 discriminator 2
 2051 0098 7B69     		ldr	r3, [r7, #20]
 2052 009a 0133     		adds	r3, r3, #1
 2053 009c 7B61     		str	r3, [r7, #20]
 2054              	.L118:
1755:./Drivers/FreeRTOS/tasks.c ****                     {
 2055              		.loc 1 1755 21 discriminator 1
 2056 009e 7B69     		ldr	r3, [r7, #20]
 2057 00a0 002B     		cmp	r3, #0
 2058 00a2 EBDD     		ble	.L120
 2059              	.LBE182:
1762:./Drivers/FreeRTOS/tasks.c ****                         }
1763:./Drivers/FreeRTOS/tasks.c ****                     }
1764:./Drivers/FreeRTOS/tasks.c ****                 }
1765:./Drivers/FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1766:./Drivers/FreeRTOS/tasks.c ****         }
1767:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 2060              		.loc 1 1767 9
 2061 00a4 FFF7FEFF 		bl	vPortExitCritical
1768:./Drivers/FreeRTOS/tasks.c **** 
1769:./Drivers/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 2062              		.loc 1 1769 31
 2063 00a8 214B     		ldr	r3, .L128+16
 2064 00aa 1B68     		ldr	r3, [r3]
 2065              		.loc 1 1769 11
 2066 00ac 002B     		cmp	r3, #0
 2067 00ae 05D0     		beq	.L121
1770:./Drivers/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 72


1771:./Drivers/FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1772:./Drivers/FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1773:./Drivers/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 2068              		.loc 1 1773 13
 2069 00b0 FFF7FEFF 		bl	vPortEnterCritical
1774:./Drivers/FreeRTOS/tasks.c ****             {
1775:./Drivers/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 2070              		.loc 1 1775 17
 2071 00b4 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1776:./Drivers/FreeRTOS/tasks.c ****             }
1777:./Drivers/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 2072              		.loc 1 1777 13
 2073 00b8 FFF7FEFF 		bl	vPortExitCritical
 2074              	.L121:
1778:./Drivers/FreeRTOS/tasks.c ****         }
1779:./Drivers/FreeRTOS/tasks.c ****         else
1780:./Drivers/FreeRTOS/tasks.c ****         {
1781:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1782:./Drivers/FreeRTOS/tasks.c ****         }
1783:./Drivers/FreeRTOS/tasks.c **** 
1784:./Drivers/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 2075              		.loc 1 1784 19
 2076 00bc 184B     		ldr	r3, .L128
 2077 00be 1B68     		ldr	r3, [r3]
 2078              		.loc 1 1784 11
 2079 00c0 3A69     		ldr	r2, [r7, #16]
 2080 00c2 9A42     		cmp	r2, r3
 2081 00c4 27D1     		bne	.L127
1785:./Drivers/FreeRTOS/tasks.c ****         {
1786:./Drivers/FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 2082              		.loc 1 1786 35
 2083 00c6 1A4B     		ldr	r3, .L128+16
 2084 00c8 1B68     		ldr	r3, [r3]
 2085              		.loc 1 1786 15
 2086 00ca 002B     		cmp	r3, #0
 2087 00cc 17D0     		beq	.L123
1787:./Drivers/FreeRTOS/tasks.c ****             {
1788:./Drivers/FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1789:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 2088              		.loc 1 1789 17
 2089 00ce 194B     		ldr	r3, .L128+20
 2090 00d0 1B68     		ldr	r3, [r3]
 2091 00d2 002B     		cmp	r3, #0
 2092 00d4 0AD0     		beq	.L124
 2093              	.LBB183:
 2094              	.LBB184:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2095              		.loc 2 198 9
 2096              		.syntax unified
 2097              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2098 00d6 4FF05003 			mov r3, #80												
 2099 00da 83F31188 		msr basepri, r3											
 2100 00de BFF36F8F 		isb														
 2101 00e2 BFF34F8F 		dsb														
 2102              	
 2103              	@ 0 "" 2
 2104              		.thumb
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 73


 2105              		.syntax unified
 2106 00e6 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2107              		.loc 2 206 5
 2108 00e8 00BF     		nop
 2109              	.L125:
 2110              	.LBE184:
 2111              	.LBE183:
 2112              		.loc 1 1789 17 discriminator 1
 2113 00ea FEE7     		b	.L125
 2114              	.L124:
1790:./Drivers/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 2115              		.loc 1 1790 17
 2116 00ec 124B     		ldr	r3, .L128+24
 2117 00ee 4FF08052 		mov	r2, #268435456
 2118 00f2 1A60     		str	r2, [r3]
 2119              		.syntax unified
 2120              	@ 1790 "./Drivers/FreeRTOS/tasks.c" 1
 2121 00f4 BFF34F8F 		dsb
 2122              	@ 0 "" 2
 2123              	@ 1790 "./Drivers/FreeRTOS/tasks.c" 1
 2124 00f8 BFF36F8F 		isb
 2125              	@ 0 "" 2
1791:./Drivers/FreeRTOS/tasks.c ****             }
1792:./Drivers/FreeRTOS/tasks.c ****             else
1793:./Drivers/FreeRTOS/tasks.c ****             {
1794:./Drivers/FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1795:./Drivers/FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1796:./Drivers/FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1797:./Drivers/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1798:./Drivers/FreeRTOS/tasks.c ****                 {
1799:./Drivers/FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1800:./Drivers/FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1801:./Drivers/FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1802:./Drivers/FreeRTOS/tasks.c ****                      * is. */
1803:./Drivers/FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1804:./Drivers/FreeRTOS/tasks.c ****                 }
1805:./Drivers/FreeRTOS/tasks.c ****                 else
1806:./Drivers/FreeRTOS/tasks.c ****                 {
1807:./Drivers/FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1808:./Drivers/FreeRTOS/tasks.c ****                 }
1809:./Drivers/FreeRTOS/tasks.c ****             }
1810:./Drivers/FreeRTOS/tasks.c ****         }
1811:./Drivers/FreeRTOS/tasks.c ****         else
1812:./Drivers/FreeRTOS/tasks.c ****         {
1813:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1814:./Drivers/FreeRTOS/tasks.c ****         }
1815:./Drivers/FreeRTOS/tasks.c ****     }
 2126              		.loc 1 1815 5
 2127              		.thumb
 2128              		.syntax unified
 2129 00fc 0BE0     		b	.L127
 2130              	.L123:
1797:./Drivers/FreeRTOS/tasks.c ****                 {
 2131              		.loc 1 1797 21
 2132 00fe 0B4B     		ldr	r3, .L128+12
 2133 0100 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 74


1797:./Drivers/FreeRTOS/tasks.c ****                 {
 2134              		.loc 1 1797 68
 2135 0102 0E4B     		ldr	r3, .L128+28
 2136 0104 1B68     		ldr	r3, [r3]
1797:./Drivers/FreeRTOS/tasks.c ****                 {
 2137              		.loc 1 1797 19
 2138 0106 9A42     		cmp	r2, r3
 2139 0108 03D1     		bne	.L126
1803:./Drivers/FreeRTOS/tasks.c ****                 }
 2140              		.loc 1 1803 34
 2141 010a 054B     		ldr	r3, .L128
 2142 010c 0022     		movs	r2, #0
 2143 010e 1A60     		str	r2, [r3]
 2144              		.loc 1 1815 5
 2145 0110 01E0     		b	.L127
 2146              	.L126:
1807:./Drivers/FreeRTOS/tasks.c ****                 }
 2147              		.loc 1 1807 21
 2148 0112 FFF7FEFF 		bl	vTaskSwitchContext
 2149              	.L127:
 2150              		.loc 1 1815 5
 2151 0116 00BF     		nop
 2152 0118 1837     		adds	r7, r7, #24
 2153              	.LCFI53:
 2154              		.cfi_def_cfa_offset 8
 2155 011a BD46     		mov	sp, r7
 2156              	.LCFI54:
 2157              		.cfi_def_cfa_register 13
 2158              		@ sp needed
 2159 011c 80BD     		pop	{r7, pc}
 2160              	.L129:
 2161 011e 00BF     		.align	2
 2162              	.L128:
 2163 0120 00000000 		.word	pxCurrentTCB
 2164 0124 00000000 		.word	pxReadyTasksLists
 2165 0128 00000000 		.word	uxTopReadyPriority
 2166 012c 00000000 		.word	xSuspendedTaskList
 2167 0130 00000000 		.word	xSchedulerRunning
 2168 0134 00000000 		.word	uxSchedulerSuspended
 2169 0138 04ED00E0 		.word	-536810236
 2170 013c 00000000 		.word	uxCurrentNumberOfTasks
 2171              		.cfi_endproc
 2172              	.LFE15:
 2174              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2175              		.align	1
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu fpv4-sp-d16
 2181              	prvTaskIsTaskSuspended:
 2182              	.LFB16:
1816:./Drivers/FreeRTOS/tasks.c **** 
1817:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1818:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1819:./Drivers/FreeRTOS/tasks.c **** 
1820:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1821:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 75


1822:./Drivers/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1823:./Drivers/FreeRTOS/tasks.c ****     {
 2183              		.loc 1 1823 5
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 24
 2186              		@ frame_needed = 1, uses_anonymous_args = 0
 2187              		@ link register save eliminated.
 2188 0000 80B4     		push	{r7}
 2189              	.LCFI55:
 2190              		.cfi_def_cfa_offset 4
 2191              		.cfi_offset 7, -4
 2192 0002 87B0     		sub	sp, sp, #28
 2193              	.LCFI56:
 2194              		.cfi_def_cfa_offset 32
 2195 0004 00AF     		add	r7, sp, #0
 2196              	.LCFI57:
 2197              		.cfi_def_cfa_register 7
 2198 0006 7860     		str	r0, [r7, #4]
1824:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 2199              		.loc 1 1824 20
 2200 0008 0023     		movs	r3, #0
 2201 000a 7B61     		str	r3, [r7, #20]
1825:./Drivers/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 2202              		.loc 1 1825 29
 2203 000c 7B68     		ldr	r3, [r7, #4]
 2204 000e 3B61     		str	r3, [r7, #16]
1826:./Drivers/FreeRTOS/tasks.c **** 
1827:./Drivers/FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1828:./Drivers/FreeRTOS/tasks.c ****          * section. */
1829:./Drivers/FreeRTOS/tasks.c **** 
1830:./Drivers/FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1831:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTask );
 2205              		.loc 1 1831 9
 2206 0010 7B68     		ldr	r3, [r7, #4]
 2207 0012 002B     		cmp	r3, #0
 2208 0014 0AD1     		bne	.L131
 2209              	.LBB185:
 2210              	.LBB186:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2211              		.loc 2 198 9
 2212              		.syntax unified
 2213              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2214 0016 4FF05003 			mov r3, #80												
 2215 001a 83F31188 		msr basepri, r3											
 2216 001e BFF36F8F 		isb														
 2217 0022 BFF34F8F 		dsb														
 2218              	
 2219              	@ 0 "" 2
 2220              		.thumb
 2221              		.syntax unified
 2222 0026 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2223              		.loc 2 206 5
 2224 0028 00BF     		nop
 2225              	.L132:
 2226              	.LBE186:
 2227              	.LBE185:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 76


 2228              		.loc 1 1831 9 discriminator 1
 2229 002a FEE7     		b	.L132
 2230              	.L131:
1832:./Drivers/FreeRTOS/tasks.c **** 
1833:./Drivers/FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1834:./Drivers/FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2231              		.loc 1 1834 13
 2232 002c 3B69     		ldr	r3, [r7, #16]
 2233 002e 5B69     		ldr	r3, [r3, #20]
 2234              		.loc 1 1834 11
 2235 0030 0A4A     		ldr	r2, .L135
 2236 0032 9342     		cmp	r3, r2
 2237 0034 0AD1     		bne	.L133
1835:./Drivers/FreeRTOS/tasks.c ****         {
1836:./Drivers/FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1837:./Drivers/FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 2238              		.loc 1 1837 17
 2239 0036 3B69     		ldr	r3, [r7, #16]
 2240 0038 9B6A     		ldr	r3, [r3, #40]
 2241              		.loc 1 1837 15
 2242 003a 094A     		ldr	r2, .L135+4
 2243 003c 9342     		cmp	r3, r2
 2244 003e 05D0     		beq	.L133
1838:./Drivers/FreeRTOS/tasks.c ****             {
1839:./Drivers/FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1840:./Drivers/FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1841:./Drivers/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 2245              		.loc 1 1841 21
 2246 0040 3B69     		ldr	r3, [r7, #16]
 2247 0042 9B6A     		ldr	r3, [r3, #40]
 2248              		.loc 1 1841 19
 2249 0044 002B     		cmp	r3, #0
 2250 0046 01D1     		bne	.L133
1842:./Drivers/FreeRTOS/tasks.c ****                 {
1843:./Drivers/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 2251              		.loc 1 1843 29
 2252 0048 0123     		movs	r3, #1
 2253 004a 7B61     		str	r3, [r7, #20]
 2254              	.L133:
1844:./Drivers/FreeRTOS/tasks.c ****                 }
1845:./Drivers/FreeRTOS/tasks.c ****                 else
1846:./Drivers/FreeRTOS/tasks.c ****                 {
1847:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1848:./Drivers/FreeRTOS/tasks.c ****                 }
1849:./Drivers/FreeRTOS/tasks.c ****             }
1850:./Drivers/FreeRTOS/tasks.c ****             else
1851:./Drivers/FreeRTOS/tasks.c ****             {
1852:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1853:./Drivers/FreeRTOS/tasks.c ****             }
1854:./Drivers/FreeRTOS/tasks.c ****         }
1855:./Drivers/FreeRTOS/tasks.c ****         else
1856:./Drivers/FreeRTOS/tasks.c ****         {
1857:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1858:./Drivers/FreeRTOS/tasks.c ****         }
1859:./Drivers/FreeRTOS/tasks.c **** 
1860:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 2255              		.loc 1 1860 16
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 77


 2256 004c 7B69     		ldr	r3, [r7, #20]
1861:./Drivers/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2257              		.loc 1 1861 5
 2258 004e 1846     		mov	r0, r3
 2259 0050 1C37     		adds	r7, r7, #28
 2260              	.LCFI58:
 2261              		.cfi_def_cfa_offset 4
 2262 0052 BD46     		mov	sp, r7
 2263              	.LCFI59:
 2264              		.cfi_def_cfa_register 13
 2265              		@ sp needed
 2266 0054 5DF8047B 		ldr	r7, [sp], #4
 2267              	.LCFI60:
 2268              		.cfi_restore 7
 2269              		.cfi_def_cfa_offset 0
 2270 0058 7047     		bx	lr
 2271              	.L136:
 2272 005a 00BF     		.align	2
 2273              	.L135:
 2274 005c 00000000 		.word	xSuspendedTaskList
 2275 0060 00000000 		.word	xPendingReadyList
 2276              		.cfi_endproc
 2277              	.LFE16:
 2279              		.section	.text.vTaskResume,"ax",%progbits
 2280              		.align	1
 2281              		.global	vTaskResume
 2282              		.syntax unified
 2283              		.thumb
 2284              		.thumb_func
 2285              		.fpu fpv4-sp-d16
 2287              	vTaskResume:
 2288              	.LFB17:
1862:./Drivers/FreeRTOS/tasks.c **** 
1863:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1864:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1865:./Drivers/FreeRTOS/tasks.c **** 
1866:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1867:./Drivers/FreeRTOS/tasks.c **** 
1868:./Drivers/FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1869:./Drivers/FreeRTOS/tasks.c ****     {
 2289              		.loc 1 1869 5
 2290              		.cfi_startproc
 2291              		@ args = 0, pretend = 0, frame = 24
 2292              		@ frame_needed = 1, uses_anonymous_args = 0
 2293 0000 80B5     		push	{r7, lr}
 2294              	.LCFI61:
 2295              		.cfi_def_cfa_offset 8
 2296              		.cfi_offset 7, -8
 2297              		.cfi_offset 14, -4
 2298 0002 86B0     		sub	sp, sp, #24
 2299              	.LCFI62:
 2300              		.cfi_def_cfa_offset 32
 2301 0004 00AF     		add	r7, sp, #0
 2302              	.LCFI63:
 2303              		.cfi_def_cfa_register 7
 2304 0006 7860     		str	r0, [r7, #4]
1870:./Drivers/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 78


 2305              		.loc 1 1870 23
 2306 0008 7B68     		ldr	r3, [r7, #4]
 2307 000a 7B61     		str	r3, [r7, #20]
1871:./Drivers/FreeRTOS/tasks.c **** 
1872:./Drivers/FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1873:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
 2308              		.loc 1 1873 9
 2309 000c 7B68     		ldr	r3, [r7, #4]
 2310 000e 002B     		cmp	r3, #0
 2311 0010 0AD1     		bne	.L138
 2312              	.LBB187:
 2313              	.LBB188:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2314              		.loc 2 198 9
 2315              		.syntax unified
 2316              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2317 0012 4FF05003 			mov r3, #80												
 2318 0016 83F31188 		msr basepri, r3											
 2319 001a BFF36F8F 		isb														
 2320 001e BFF34F8F 		dsb														
 2321              	
 2322              	@ 0 "" 2
 2323              		.thumb
 2324              		.syntax unified
 2325 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2326              		.loc 2 206 5
 2327 0024 00BF     		nop
 2328              	.L139:
 2329              	.LBE188:
 2330              	.LBE187:
 2331              		.loc 1 1873 9 discriminator 1
 2332 0026 FEE7     		b	.L139
 2333              	.L138:
1874:./Drivers/FreeRTOS/tasks.c **** 
1875:./Drivers/FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1876:./Drivers/FreeRTOS/tasks.c ****          * currently executing task. */
1877:./Drivers/FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2334              		.loc 1 1877 21
 2335 0028 344B     		ldr	r3, .L143
 2336 002a 1B68     		ldr	r3, [r3]
 2337              		.loc 1 1877 11
 2338 002c 7A69     		ldr	r2, [r7, #20]
 2339 002e 9A42     		cmp	r2, r3
 2340 0030 5FD0     		beq	.L142
 2341              		.loc 1 1877 39 discriminator 1
 2342 0032 7B69     		ldr	r3, [r7, #20]
 2343 0034 002B     		cmp	r3, #0
 2344 0036 5CD0     		beq	.L142
1878:./Drivers/FreeRTOS/tasks.c ****         {
1879:./Drivers/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
 2345              		.loc 1 1879 13
 2346 0038 FFF7FEFF 		bl	vPortEnterCritical
1880:./Drivers/FreeRTOS/tasks.c ****             {
1881:./Drivers/FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2347              		.loc 1 1881 21
 2348 003c 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 79


 2349 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2350 0042 0346     		mov	r3, r0
 2351              		.loc 1 1881 19
 2352 0044 002B     		cmp	r3, #0
 2353 0046 52D0     		beq	.L141
1882:./Drivers/FreeRTOS/tasks.c ****                 {
1883:./Drivers/FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1884:./Drivers/FreeRTOS/tasks.c **** 
1885:./Drivers/FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1886:./Drivers/FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1887:./Drivers/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2354              		.loc 1 1887 30
 2355 0048 7B69     		ldr	r3, [r7, #20]
 2356 004a 0433     		adds	r3, r3, #4
 2357 004c 1846     		mov	r0, r3
 2358 004e FFF7FEFF 		bl	uxListRemove
1888:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2359              		.loc 1 1888 21
 2360 0052 7B69     		ldr	r3, [r7, #20]
 2361 0054 DB6A     		ldr	r3, [r3, #44]
 2362 0056 0122     		movs	r2, #1
 2363 0058 9A40     		lsls	r2, r2, r3
 2364 005a 294B     		ldr	r3, .L143+4
 2365 005c 1B68     		ldr	r3, [r3]
 2366 005e 1343     		orrs	r3, r3, r2
 2367 0060 274A     		ldr	r2, .L143+4
 2368 0062 1360     		str	r3, [r2]
 2369              	.LBB189:
 2370 0064 7B69     		ldr	r3, [r7, #20]
 2371 0066 DA6A     		ldr	r2, [r3, #44]
 2372 0068 2649     		ldr	r1, .L143+8
 2373 006a 1346     		mov	r3, r2
 2374 006c 9B00     		lsls	r3, r3, #2
 2375 006e 1344     		add	r3, r3, r2
 2376 0070 9B00     		lsls	r3, r3, #2
 2377 0072 0B44     		add	r3, r3, r1
 2378 0074 0433     		adds	r3, r3, #4
 2379 0076 1B68     		ldr	r3, [r3]
 2380 0078 3B61     		str	r3, [r7, #16]
 2381 007a 7B69     		ldr	r3, [r7, #20]
 2382 007c 3A69     		ldr	r2, [r7, #16]
 2383 007e 9A60     		str	r2, [r3, #8]
 2384 0080 3B69     		ldr	r3, [r7, #16]
 2385 0082 9A68     		ldr	r2, [r3, #8]
 2386 0084 7B69     		ldr	r3, [r7, #20]
 2387 0086 DA60     		str	r2, [r3, #12]
 2388 0088 3B69     		ldr	r3, [r7, #16]
 2389 008a 9B68     		ldr	r3, [r3, #8]
 2390 008c 7A69     		ldr	r2, [r7, #20]
 2391 008e 0432     		adds	r2, r2, #4
 2392 0090 5A60     		str	r2, [r3, #4]
 2393 0092 7B69     		ldr	r3, [r7, #20]
 2394 0094 1A1D     		adds	r2, r3, #4
 2395 0096 3B69     		ldr	r3, [r7, #16]
 2396 0098 9A60     		str	r2, [r3, #8]
 2397 009a 7B69     		ldr	r3, [r7, #20]
 2398 009c DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 80


 2399 009e 1346     		mov	r3, r2
 2400 00a0 9B00     		lsls	r3, r3, #2
 2401 00a2 1344     		add	r3, r3, r2
 2402 00a4 9B00     		lsls	r3, r3, #2
 2403 00a6 174A     		ldr	r2, .L143+8
 2404 00a8 1A44     		add	r2, r2, r3
 2405 00aa 7B69     		ldr	r3, [r7, #20]
 2406 00ac 5A61     		str	r2, [r3, #20]
 2407 00ae 7B69     		ldr	r3, [r7, #20]
 2408 00b0 DA6A     		ldr	r2, [r3, #44]
 2409 00b2 1449     		ldr	r1, .L143+8
 2410 00b4 1346     		mov	r3, r2
 2411 00b6 9B00     		lsls	r3, r3, #2
 2412 00b8 1344     		add	r3, r3, r2
 2413 00ba 9B00     		lsls	r3, r3, #2
 2414 00bc 0B44     		add	r3, r3, r1
 2415 00be 1B68     		ldr	r3, [r3]
 2416 00c0 591C     		adds	r1, r3, #1
 2417 00c2 1048     		ldr	r0, .L143+8
 2418 00c4 1346     		mov	r3, r2
 2419 00c6 9B00     		lsls	r3, r3, #2
 2420 00c8 1344     		add	r3, r3, r2
 2421 00ca 9B00     		lsls	r3, r3, #2
 2422 00cc 0344     		add	r3, r3, r0
 2423 00ce 1960     		str	r1, [r3]
 2424              	.LBE189:
1889:./Drivers/FreeRTOS/tasks.c **** 
1890:./Drivers/FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1891:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2425              		.loc 1 1891 30
 2426 00d0 7B69     		ldr	r3, [r7, #20]
 2427 00d2 DA6A     		ldr	r2, [r3, #44]
 2428              		.loc 1 1891 58
 2429 00d4 094B     		ldr	r3, .L143
 2430 00d6 1B68     		ldr	r3, [r3]
 2431 00d8 DB6A     		ldr	r3, [r3, #44]
 2432              		.loc 1 1891 23
 2433 00da 9A42     		cmp	r2, r3
 2434 00dc 07D3     		bcc	.L141
1892:./Drivers/FreeRTOS/tasks.c ****                     {
1893:./Drivers/FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1894:./Drivers/FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1895:./Drivers/FreeRTOS/tasks.c ****                          * next yield. */
1896:./Drivers/FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
 2435              		.loc 1 1896 25
 2436 00de 0A4B     		ldr	r3, .L143+12
 2437 00e0 4FF08052 		mov	r2, #268435456
 2438 00e4 1A60     		str	r2, [r3]
 2439              		.syntax unified
 2440              	@ 1896 "./Drivers/FreeRTOS/tasks.c" 1
 2441 00e6 BFF34F8F 		dsb
 2442              	@ 0 "" 2
 2443              	@ 1896 "./Drivers/FreeRTOS/tasks.c" 1
 2444 00ea BFF36F8F 		isb
 2445              	@ 0 "" 2
 2446              		.thumb
 2447              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 81


 2448              	.L141:
1897:./Drivers/FreeRTOS/tasks.c ****                     }
1898:./Drivers/FreeRTOS/tasks.c ****                     else
1899:./Drivers/FreeRTOS/tasks.c ****                     {
1900:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1901:./Drivers/FreeRTOS/tasks.c ****                     }
1902:./Drivers/FreeRTOS/tasks.c ****                 }
1903:./Drivers/FreeRTOS/tasks.c ****                 else
1904:./Drivers/FreeRTOS/tasks.c ****                 {
1905:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1906:./Drivers/FreeRTOS/tasks.c ****                 }
1907:./Drivers/FreeRTOS/tasks.c ****             }
1908:./Drivers/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
 2449              		.loc 1 1908 13
 2450 00ee FFF7FEFF 		bl	vPortExitCritical
 2451              	.L142:
1909:./Drivers/FreeRTOS/tasks.c ****         }
1910:./Drivers/FreeRTOS/tasks.c ****         else
1911:./Drivers/FreeRTOS/tasks.c ****         {
1912:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1913:./Drivers/FreeRTOS/tasks.c ****         }
1914:./Drivers/FreeRTOS/tasks.c ****     }
 2452              		.loc 1 1914 5
 2453 00f2 00BF     		nop
 2454 00f4 1837     		adds	r7, r7, #24
 2455              	.LCFI64:
 2456              		.cfi_def_cfa_offset 8
 2457 00f6 BD46     		mov	sp, r7
 2458              	.LCFI65:
 2459              		.cfi_def_cfa_register 13
 2460              		@ sp needed
 2461 00f8 80BD     		pop	{r7, pc}
 2462              	.L144:
 2463 00fa 00BF     		.align	2
 2464              	.L143:
 2465 00fc 00000000 		.word	pxCurrentTCB
 2466 0100 00000000 		.word	uxTopReadyPriority
 2467 0104 00000000 		.word	pxReadyTasksLists
 2468 0108 04ED00E0 		.word	-536810236
 2469              		.cfi_endproc
 2470              	.LFE17:
 2472              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2473              		.align	1
 2474              		.global	xTaskResumeFromISR
 2475              		.syntax unified
 2476              		.thumb
 2477              		.thumb_func
 2478              		.fpu fpv4-sp-d16
 2480              	xTaskResumeFromISR:
 2481              	.LFB18:
1915:./Drivers/FreeRTOS/tasks.c **** 
1916:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1917:./Drivers/FreeRTOS/tasks.c **** 
1918:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1919:./Drivers/FreeRTOS/tasks.c **** 
1920:./Drivers/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1921:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 82


1922:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1923:./Drivers/FreeRTOS/tasks.c ****     {
 2482              		.loc 1 1923 5
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 40
 2485              		@ frame_needed = 1, uses_anonymous_args = 0
 2486 0000 80B5     		push	{r7, lr}
 2487              	.LCFI66:
 2488              		.cfi_def_cfa_offset 8
 2489              		.cfi_offset 7, -8
 2490              		.cfi_offset 14, -4
 2491 0002 8AB0     		sub	sp, sp, #40
 2492              	.LCFI67:
 2493              		.cfi_def_cfa_offset 48
 2494 0004 00AF     		add	r7, sp, #0
 2495              	.LCFI68:
 2496              		.cfi_def_cfa_register 7
 2497 0006 7860     		str	r0, [r7, #4]
1924:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 2498              		.loc 1 1924 20
 2499 0008 0023     		movs	r3, #0
 2500 000a 7B62     		str	r3, [r7, #36]
1925:./Drivers/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2501              		.loc 1 1925 23
 2502 000c 7B68     		ldr	r3, [r7, #4]
 2503 000e 3B62     		str	r3, [r7, #32]
1926:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1927:./Drivers/FreeRTOS/tasks.c **** 
1928:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
 2504              		.loc 1 1928 9
 2505 0010 7B68     		ldr	r3, [r7, #4]
 2506 0012 002B     		cmp	r3, #0
 2507 0014 0AD1     		bne	.L146
 2508              	.LBB190:
 2509              	.LBB191:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2510              		.loc 2 198 9
 2511              		.syntax unified
 2512              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2513 0016 4FF05003 			mov r3, #80												
 2514 001a 83F31188 		msr basepri, r3											
 2515 001e BFF36F8F 		isb														
 2516 0022 BFF34F8F 		dsb														
 2517              	
 2518              	@ 0 "" 2
 2519              		.thumb
 2520              		.syntax unified
 2521 0026 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2522              		.loc 2 206 5
 2523 0028 00BF     		nop
 2524              	.L147:
 2525              	.LBE191:
 2526              	.LBE190:
 2527              		.loc 1 1928 9 discriminator 1
 2528 002a FEE7     		b	.L147
 2529              	.L146:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 83


1929:./Drivers/FreeRTOS/tasks.c **** 
1930:./Drivers/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1931:./Drivers/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1932:./Drivers/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1933:./Drivers/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1934:./Drivers/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1935:./Drivers/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1936:./Drivers/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1937:./Drivers/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1938:./Drivers/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1939:./Drivers/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1940:./Drivers/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1941:./Drivers/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1942:./Drivers/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1943:./Drivers/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1944:./Drivers/FreeRTOS/tasks.c ****          * provided on the following link:
1945:./Drivers/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1946:./Drivers/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2530              		.loc 1 1946 9
 2531 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2532              	.LBB192:
 2533              	.LBB193:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2534              		.loc 2 214 9
 2535              		.syntax unified
 2536              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2537 0030 EFF31182 			mrs r2, basepri											
 2538 0034 4FF05003 		mov r3, #80												
 2539 0038 83F31188 		msr basepri, r3											
 2540 003c BFF36F8F 		isb														
 2541 0040 BFF34F8F 		dsb														
 2542              	
 2543              	@ 0 "" 2
 2544              		.thumb
 2545              		.syntax unified
 2546 0044 3A61     		str	r2, [r7, #16]
 2547 0046 FB60     		str	r3, [r7, #12]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 2548              		.loc 2 226 16
 2549 0048 3B69     		ldr	r3, [r7, #16]
 2550              	.LBE193:
 2551              	.LBE192:
1947:./Drivers/FreeRTOS/tasks.c **** 
1948:./Drivers/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2552              		.loc 1 1948 34
 2553 004a FB61     		str	r3, [r7, #28]
1949:./Drivers/FreeRTOS/tasks.c ****         {
1950:./Drivers/FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2554              		.loc 1 1950 17
 2555 004c 386A     		ldr	r0, [r7, #32]
 2556 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2557 0052 0346     		mov	r3, r0
 2558              		.loc 1 1950 15
 2559 0054 002B     		cmp	r3, #0
 2560 0056 5AD0     		beq	.L149
1951:./Drivers/FreeRTOS/tasks.c ****             {
1952:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 84


1953:./Drivers/FreeRTOS/tasks.c **** 
1954:./Drivers/FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1955:./Drivers/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2561              		.loc 1 1955 42
 2562 0058 324B     		ldr	r3, .L153
 2563 005a 1B68     		ldr	r3, [r3]
 2564              		.loc 1 1955 19
 2565 005c 002B     		cmp	r3, #0
 2566 005e 50D1     		bne	.L150
1956:./Drivers/FreeRTOS/tasks.c ****                 {
1957:./Drivers/FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1958:./Drivers/FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1959:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2567              		.loc 1 1959 30
 2568 0060 3B6A     		ldr	r3, [r7, #32]
 2569 0062 DA6A     		ldr	r2, [r3, #44]
 2570              		.loc 1 1959 58
 2571 0064 304B     		ldr	r3, .L153+4
 2572 0066 1B68     		ldr	r3, [r3]
 2573 0068 DB6A     		ldr	r3, [r3, #44]
 2574              		.loc 1 1959 23
 2575 006a 9A42     		cmp	r2, r3
 2576 006c 04D3     		bcc	.L151
1960:./Drivers/FreeRTOS/tasks.c ****                     {
1961:./Drivers/FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
 2577              		.loc 1 1961 40
 2578 006e 0123     		movs	r3, #1
 2579 0070 7B62     		str	r3, [r7, #36]
1962:./Drivers/FreeRTOS/tasks.c **** 
1963:./Drivers/FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1964:./Drivers/FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1965:./Drivers/FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1966:./Drivers/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2580              		.loc 1 1966 39
 2581 0072 2E4B     		ldr	r3, .L153+8
 2582 0074 0122     		movs	r2, #1
 2583 0076 1A60     		str	r2, [r3]
 2584              	.L151:
1967:./Drivers/FreeRTOS/tasks.c ****                     }
1968:./Drivers/FreeRTOS/tasks.c ****                     else
1969:./Drivers/FreeRTOS/tasks.c ****                     {
1970:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1971:./Drivers/FreeRTOS/tasks.c ****                     }
1972:./Drivers/FreeRTOS/tasks.c **** 
1973:./Drivers/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2585              		.loc 1 1973 30
 2586 0078 3B6A     		ldr	r3, [r7, #32]
 2587 007a 0433     		adds	r3, r3, #4
 2588 007c 1846     		mov	r0, r3
 2589 007e FFF7FEFF 		bl	uxListRemove
1974:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2590              		.loc 1 1974 21
 2591 0082 3B6A     		ldr	r3, [r7, #32]
 2592 0084 DB6A     		ldr	r3, [r3, #44]
 2593 0086 0122     		movs	r2, #1
 2594 0088 9A40     		lsls	r2, r2, r3
 2595 008a 294B     		ldr	r3, .L153+12
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 85


 2596 008c 1B68     		ldr	r3, [r3]
 2597 008e 1343     		orrs	r3, r3, r2
 2598 0090 274A     		ldr	r2, .L153+12
 2599 0092 1360     		str	r3, [r2]
 2600              	.LBB194:
 2601 0094 3B6A     		ldr	r3, [r7, #32]
 2602 0096 DA6A     		ldr	r2, [r3, #44]
 2603 0098 2649     		ldr	r1, .L153+16
 2604 009a 1346     		mov	r3, r2
 2605 009c 9B00     		lsls	r3, r3, #2
 2606 009e 1344     		add	r3, r3, r2
 2607 00a0 9B00     		lsls	r3, r3, #2
 2608 00a2 0B44     		add	r3, r3, r1
 2609 00a4 0433     		adds	r3, r3, #4
 2610 00a6 1B68     		ldr	r3, [r3]
 2611 00a8 BB61     		str	r3, [r7, #24]
 2612 00aa 3B6A     		ldr	r3, [r7, #32]
 2613 00ac BA69     		ldr	r2, [r7, #24]
 2614 00ae 9A60     		str	r2, [r3, #8]
 2615 00b0 BB69     		ldr	r3, [r7, #24]
 2616 00b2 9A68     		ldr	r2, [r3, #8]
 2617 00b4 3B6A     		ldr	r3, [r7, #32]
 2618 00b6 DA60     		str	r2, [r3, #12]
 2619 00b8 BB69     		ldr	r3, [r7, #24]
 2620 00ba 9B68     		ldr	r3, [r3, #8]
 2621 00bc 3A6A     		ldr	r2, [r7, #32]
 2622 00be 0432     		adds	r2, r2, #4
 2623 00c0 5A60     		str	r2, [r3, #4]
 2624 00c2 3B6A     		ldr	r3, [r7, #32]
 2625 00c4 1A1D     		adds	r2, r3, #4
 2626 00c6 BB69     		ldr	r3, [r7, #24]
 2627 00c8 9A60     		str	r2, [r3, #8]
 2628 00ca 3B6A     		ldr	r3, [r7, #32]
 2629 00cc DA6A     		ldr	r2, [r3, #44]
 2630 00ce 1346     		mov	r3, r2
 2631 00d0 9B00     		lsls	r3, r3, #2
 2632 00d2 1344     		add	r3, r3, r2
 2633 00d4 9B00     		lsls	r3, r3, #2
 2634 00d6 174A     		ldr	r2, .L153+16
 2635 00d8 1A44     		add	r2, r2, r3
 2636 00da 3B6A     		ldr	r3, [r7, #32]
 2637 00dc 5A61     		str	r2, [r3, #20]
 2638 00de 3B6A     		ldr	r3, [r7, #32]
 2639 00e0 DA6A     		ldr	r2, [r3, #44]
 2640 00e2 1449     		ldr	r1, .L153+16
 2641 00e4 1346     		mov	r3, r2
 2642 00e6 9B00     		lsls	r3, r3, #2
 2643 00e8 1344     		add	r3, r3, r2
 2644 00ea 9B00     		lsls	r3, r3, #2
 2645 00ec 0B44     		add	r3, r3, r1
 2646 00ee 1B68     		ldr	r3, [r3]
 2647 00f0 591C     		adds	r1, r3, #1
 2648 00f2 1048     		ldr	r0, .L153+16
 2649 00f4 1346     		mov	r3, r2
 2650 00f6 9B00     		lsls	r3, r3, #2
 2651 00f8 1344     		add	r3, r3, r2
 2652 00fa 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 86


 2653 00fc 0344     		add	r3, r3, r0
 2654 00fe 1960     		str	r1, [r3]
 2655              	.LBE194:
 2656 0100 05E0     		b	.L149
 2657              	.L150:
1975:./Drivers/FreeRTOS/tasks.c ****                 }
1976:./Drivers/FreeRTOS/tasks.c ****                 else
1977:./Drivers/FreeRTOS/tasks.c ****                 {
1978:./Drivers/FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1979:./Drivers/FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1980:./Drivers/FreeRTOS/tasks.c ****                      * unsuspended. */
1981:./Drivers/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2658              		.loc 1 1981 21
 2659 0102 3B6A     		ldr	r3, [r7, #32]
 2660 0104 1833     		adds	r3, r3, #24
 2661 0106 1946     		mov	r1, r3
 2662 0108 0B48     		ldr	r0, .L153+20
 2663 010a FFF7FEFF 		bl	vListInsertEnd
 2664              	.L149:
 2665 010e FB69     		ldr	r3, [r7, #28]
 2666 0110 BB60     		str	r3, [r7, #8]
 2667              	.LBB195:
 2668              	.LBB196:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2669              		.loc 2 232 9
 2670 0112 BB68     		ldr	r3, [r7, #8]
 2671              		.syntax unified
 2672              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2673 0114 83F31188 			msr basepri, r3	
 2674              	@ 0 "" 2
 2675              		.loc 2 236 5
 2676              		.thumb
 2677              		.syntax unified
 2678 0118 00BF     		nop
 2679              	.LBE196:
 2680              	.LBE195:
1982:./Drivers/FreeRTOS/tasks.c ****                 }
1983:./Drivers/FreeRTOS/tasks.c ****             }
1984:./Drivers/FreeRTOS/tasks.c ****             else
1985:./Drivers/FreeRTOS/tasks.c ****             {
1986:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1987:./Drivers/FreeRTOS/tasks.c ****             }
1988:./Drivers/FreeRTOS/tasks.c ****         }
1989:./Drivers/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1990:./Drivers/FreeRTOS/tasks.c **** 
1991:./Drivers/FreeRTOS/tasks.c ****         return xYieldRequired;
 2681              		.loc 1 1991 16
 2682 011a 7B6A     		ldr	r3, [r7, #36]
1992:./Drivers/FreeRTOS/tasks.c ****     }
 2683              		.loc 1 1992 5
 2684 011c 1846     		mov	r0, r3
 2685 011e 2837     		adds	r7, r7, #40
 2686              	.LCFI69:
 2687              		.cfi_def_cfa_offset 8
 2688 0120 BD46     		mov	sp, r7
 2689              	.LCFI70:
 2690              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 87


 2691              		@ sp needed
 2692 0122 80BD     		pop	{r7, pc}
 2693              	.L154:
 2694              		.align	2
 2695              	.L153:
 2696 0124 00000000 		.word	uxSchedulerSuspended
 2697 0128 00000000 		.word	pxCurrentTCB
 2698 012c 00000000 		.word	xYieldPending
 2699 0130 00000000 		.word	uxTopReadyPriority
 2700 0134 00000000 		.word	pxReadyTasksLists
 2701 0138 00000000 		.word	xPendingReadyList
 2702              		.cfi_endproc
 2703              	.LFE18:
 2705              		.section	.rodata
 2706              		.align	2
 2707              	.LC0:
 2708 0000 49444C45 		.ascii	"IDLE\000"
 2708      00
 2709              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2710              		.align	1
 2711              		.global	vTaskStartScheduler
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
 2717              	vTaskStartScheduler:
 2718              	.LFB19:
1993:./Drivers/FreeRTOS/tasks.c **** 
1994:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1995:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1996:./Drivers/FreeRTOS/tasks.c **** 
1997:./Drivers/FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1998:./Drivers/FreeRTOS/tasks.c **** {
 2719              		.loc 1 1998 1
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 16
 2722              		@ frame_needed = 1, uses_anonymous_args = 0
 2723 0000 80B5     		push	{r7, lr}
 2724              	.LCFI71:
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 7, -8
 2727              		.cfi_offset 14, -4
 2728 0002 86B0     		sub	sp, sp, #24
 2729              	.LCFI72:
 2730              		.cfi_def_cfa_offset 32
 2731 0004 02AF     		add	r7, sp, #8
 2732              	.LCFI73:
 2733              		.cfi_def_cfa 7, 24
1999:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xReturn;
2000:./Drivers/FreeRTOS/tasks.c **** 
2001:./Drivers/FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
2002:./Drivers/FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2003:./Drivers/FreeRTOS/tasks.c ****         {
2004:./Drivers/FreeRTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
2005:./Drivers/FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
2006:./Drivers/FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
2007:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 88


2008:./Drivers/FreeRTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
2009:./Drivers/FreeRTOS/tasks.c ****              * address of the RAM then create the idle task. */
2010:./Drivers/FreeRTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2011:./Drivers/FreeRTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2012:./Drivers/FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2013:./Drivers/FreeRTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2014:./Drivers/FreeRTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2015:./Drivers/FreeRTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2016:./Drivers/FreeRTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2017:./Drivers/FreeRTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2018:./Drivers/FreeRTOS/tasks.c **** 
2019:./Drivers/FreeRTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2020:./Drivers/FreeRTOS/tasks.c ****             {
2021:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2022:./Drivers/FreeRTOS/tasks.c ****             }
2023:./Drivers/FreeRTOS/tasks.c ****             else
2024:./Drivers/FreeRTOS/tasks.c ****             {
2025:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2026:./Drivers/FreeRTOS/tasks.c ****             }
2027:./Drivers/FreeRTOS/tasks.c ****         }
2028:./Drivers/FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2029:./Drivers/FreeRTOS/tasks.c ****         {
2030:./Drivers/FreeRTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2031:./Drivers/FreeRTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
 2734              		.loc 1 2031 23
 2735 0006 204B     		ldr	r3, .L160
 2736 0008 0193     		str	r3, [sp, #4]
 2737 000a 0023     		movs	r3, #0
 2738 000c 0093     		str	r3, [sp]
 2739 000e 0023     		movs	r3, #0
 2740 0010 8222     		movs	r2, #130
 2741 0012 1E49     		ldr	r1, .L160+4
 2742 0014 1E48     		ldr	r0, .L160+8
 2743 0016 FFF7FEFF 		bl	xTaskCreate
 2744 001a F860     		str	r0, [r7, #12]
2032:./Drivers/FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2033:./Drivers/FreeRTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2034:./Drivers/FreeRTOS/tasks.c ****                                    ( void * ) NULL,
2035:./Drivers/FreeRTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2036:./Drivers/FreeRTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2037:./Drivers/FreeRTOS/tasks.c ****         }
2038:./Drivers/FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2039:./Drivers/FreeRTOS/tasks.c **** 
2040:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2041:./Drivers/FreeRTOS/tasks.c ****         {
2042:./Drivers/FreeRTOS/tasks.c ****             if( xReturn == pdPASS )
 2745              		.loc 1 2042 15
 2746 001c FB68     		ldr	r3, [r7, #12]
 2747 001e 012B     		cmp	r3, #1
 2748 0020 02D1     		bne	.L156
2043:./Drivers/FreeRTOS/tasks.c ****             {
2044:./Drivers/FreeRTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
 2749              		.loc 1 2044 27
 2750 0022 FFF7FEFF 		bl	xTimerCreateTimerTask
 2751 0026 F860     		str	r0, [r7, #12]
 2752              	.L156:
2045:./Drivers/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 89


2046:./Drivers/FreeRTOS/tasks.c ****             else
2047:./Drivers/FreeRTOS/tasks.c ****             {
2048:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2049:./Drivers/FreeRTOS/tasks.c ****             }
2050:./Drivers/FreeRTOS/tasks.c ****         }
2051:./Drivers/FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2052:./Drivers/FreeRTOS/tasks.c **** 
2053:./Drivers/FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
 2753              		.loc 1 2053 7
 2754 0028 FB68     		ldr	r3, [r7, #12]
 2755 002a 012B     		cmp	r3, #1
 2756 002c 16D1     		bne	.L157
 2757              	.LBB197:
 2758              	.LBB198:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2759              		.loc 2 198 9
 2760              		.syntax unified
 2761              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2762 002e 4FF05003 			mov r3, #80												
 2763 0032 83F31188 		msr basepri, r3											
 2764 0036 BFF36F8F 		isb														
 2765 003a BFF34F8F 		dsb														
 2766              	
 2767              	@ 0 "" 2
 2768              		.thumb
 2769              		.syntax unified
 2770 003e BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2771              		.loc 2 206 5
 2772 0040 00BF     		nop
 2773              	.LBE198:
 2774              	.LBE197:
2054:./Drivers/FreeRTOS/tasks.c ****     {
2055:./Drivers/FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2056:./Drivers/FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2057:./Drivers/FreeRTOS/tasks.c ****          * the only macro called by the function. */
2058:./Drivers/FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2059:./Drivers/FreeRTOS/tasks.c ****             {
2060:./Drivers/FreeRTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2061:./Drivers/FreeRTOS/tasks.c ****             }
2062:./Drivers/FreeRTOS/tasks.c ****         #endif
2063:./Drivers/FreeRTOS/tasks.c **** 
2064:./Drivers/FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2065:./Drivers/FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2066:./Drivers/FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2067:./Drivers/FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2068:./Drivers/FreeRTOS/tasks.c ****          * starts to run. */
2069:./Drivers/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2070:./Drivers/FreeRTOS/tasks.c **** 
2071:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2072:./Drivers/FreeRTOS/tasks.c ****             {
2073:./Drivers/FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2074:./Drivers/FreeRTOS/tasks.c ****                  * structure specific to the task that will run first.
2075:./Drivers/FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2076:./Drivers/FreeRTOS/tasks.c ****                  * for additional information. */
2077:./Drivers/FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2078:./Drivers/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 90


2079:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2080:./Drivers/FreeRTOS/tasks.c **** 
2081:./Drivers/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 2775              		.loc 1 2081 30
 2776 0042 144B     		ldr	r3, .L160+12
 2777 0044 4FF0FF32 		mov	r2, #-1
 2778 0048 1A60     		str	r2, [r3]
2082:./Drivers/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2779              		.loc 1 2082 27
 2780 004a 134B     		ldr	r3, .L160+16
 2781 004c 0122     		movs	r2, #1
 2782 004e 1A60     		str	r2, [r3]
2083:./Drivers/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2783              		.loc 1 2083 20
 2784 0050 124B     		ldr	r3, .L160+20
 2785 0052 0022     		movs	r2, #0
 2786 0054 1A60     		str	r2, [r3]
2084:./Drivers/FreeRTOS/tasks.c **** 
2085:./Drivers/FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2086:./Drivers/FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2087:./Drivers/FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2088:./Drivers/FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2089:./Drivers/FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2090:./Drivers/FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2091:./Drivers/FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2092:./Drivers/FreeRTOS/tasks.c **** 
2093:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2094:./Drivers/FreeRTOS/tasks.c **** 
2095:./Drivers/FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2096:./Drivers/FreeRTOS/tasks.c ****          * portable interface. */
2097:./Drivers/FreeRTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
 2787              		.loc 1 2097 13
 2788 0056 FFF7FEFF 		bl	xPortStartScheduler
 2789 005a 0EE0     		b	.L158
 2790              	.L157:
2098:./Drivers/FreeRTOS/tasks.c ****         {
2099:./Drivers/FreeRTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2100:./Drivers/FreeRTOS/tasks.c ****              * function will not return. */
2101:./Drivers/FreeRTOS/tasks.c ****         }
2102:./Drivers/FreeRTOS/tasks.c ****         else
2103:./Drivers/FreeRTOS/tasks.c ****         {
2104:./Drivers/FreeRTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2105:./Drivers/FreeRTOS/tasks.c ****         }
2106:./Drivers/FreeRTOS/tasks.c ****     }
2107:./Drivers/FreeRTOS/tasks.c ****     else
2108:./Drivers/FreeRTOS/tasks.c ****     {
2109:./Drivers/FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2110:./Drivers/FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2111:./Drivers/FreeRTOS/tasks.c ****          * or the timer task. */
2112:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2791              		.loc 1 2112 9
 2792 005c FB68     		ldr	r3, [r7, #12]
 2793 005e B3F1FF3F 		cmp	r3, #-1
 2794 0062 0AD1     		bne	.L158
 2795              	.LBB199:
 2796              	.LBB200:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 91


 2797              		.loc 2 198 9
 2798              		.syntax unified
 2799              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2800 0064 4FF05003 			mov r3, #80												
 2801 0068 83F31188 		msr basepri, r3											
 2802 006c BFF36F8F 		isb														
 2803 0070 BFF34F8F 		dsb														
 2804              	
 2805              	@ 0 "" 2
 2806              		.thumb
 2807              		.syntax unified
 2808 0074 7B60     		str	r3, [r7, #4]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2809              		.loc 2 206 5
 2810 0076 00BF     		nop
 2811              	.L159:
 2812              	.LBE200:
 2813              	.LBE199:
 2814              		.loc 1 2112 9 discriminator 2
 2815 0078 FEE7     		b	.L159
 2816              	.L158:
2113:./Drivers/FreeRTOS/tasks.c ****     }
2114:./Drivers/FreeRTOS/tasks.c **** 
2115:./Drivers/FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2116:./Drivers/FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2117:./Drivers/FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2118:./Drivers/FreeRTOS/tasks.c **** 
2119:./Drivers/FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2120:./Drivers/FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2121:./Drivers/FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
 2817              		.loc 1 2121 5
 2818 007a 094B     		ldr	r3, .L160+24
 2819 007c 1B68     		ldr	r3, [r3]
2122:./Drivers/FreeRTOS/tasks.c **** }
 2820              		.loc 1 2122 1
 2821 007e 00BF     		nop
 2822 0080 1037     		adds	r7, r7, #16
 2823              	.LCFI74:
 2824              		.cfi_def_cfa_offset 8
 2825 0082 BD46     		mov	sp, r7
 2826              	.LCFI75:
 2827              		.cfi_def_cfa_register 13
 2828              		@ sp needed
 2829 0084 80BD     		pop	{r7, pc}
 2830              	.L161:
 2831 0086 00BF     		.align	2
 2832              	.L160:
 2833 0088 00000000 		.word	xIdleTaskHandle
 2834 008c 00000000 		.word	.LC0
 2835 0090 00000000 		.word	prvIdleTask
 2836 0094 00000000 		.word	xNextTaskUnblockTime
 2837 0098 00000000 		.word	xSchedulerRunning
 2838 009c 00000000 		.word	xTickCount
 2839 00a0 00000000 		.word	uxTopUsedPriority
 2840              		.cfi_endproc
 2841              	.LFE19:
 2843              		.section	.text.vTaskEndScheduler,"ax",%progbits
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 92


 2844              		.align	1
 2845              		.global	vTaskEndScheduler
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu fpv4-sp-d16
 2851              	vTaskEndScheduler:
 2852              	.LFB20:
2123:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2124:./Drivers/FreeRTOS/tasks.c **** 
2125:./Drivers/FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2126:./Drivers/FreeRTOS/tasks.c **** {
 2853              		.loc 1 2126 1
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 8
 2856              		@ frame_needed = 1, uses_anonymous_args = 0
 2857 0000 80B5     		push	{r7, lr}
 2858              	.LCFI76:
 2859              		.cfi_def_cfa_offset 8
 2860              		.cfi_offset 7, -8
 2861              		.cfi_offset 14, -4
 2862 0002 82B0     		sub	sp, sp, #8
 2863              	.LCFI77:
 2864              		.cfi_def_cfa_offset 16
 2865 0004 00AF     		add	r7, sp, #0
 2866              	.LCFI78:
 2867              		.cfi_def_cfa_register 7
 2868              	.LBB201:
 2869              	.LBB202:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2870              		.loc 2 198 9
 2871              		.syntax unified
 2872              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2873 0006 4FF05003 			mov r3, #80												
 2874 000a 83F31188 		msr basepri, r3											
 2875 000e BFF36F8F 		isb														
 2876 0012 BFF34F8F 		dsb														
 2877              	
 2878              	@ 0 "" 2
 2879              		.thumb
 2880              		.syntax unified
 2881 0016 7B60     		str	r3, [r7, #4]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2882              		.loc 2 206 5
 2883 0018 00BF     		nop
 2884              	.LBE202:
 2885              	.LBE201:
2127:./Drivers/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2128:./Drivers/FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2129:./Drivers/FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2130:./Drivers/FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2131:./Drivers/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2886              		.loc 1 2131 23
 2887 001a 044B     		ldr	r3, .L163
 2888 001c 0022     		movs	r2, #0
 2889 001e 1A60     		str	r2, [r3]
2132:./Drivers/FreeRTOS/tasks.c ****     vPortEndScheduler();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 93


 2890              		.loc 1 2132 5
 2891 0020 FFF7FEFF 		bl	vPortEndScheduler
2133:./Drivers/FreeRTOS/tasks.c **** }
 2892              		.loc 1 2133 1
 2893 0024 00BF     		nop
 2894 0026 0837     		adds	r7, r7, #8
 2895              	.LCFI79:
 2896              		.cfi_def_cfa_offset 8
 2897 0028 BD46     		mov	sp, r7
 2898              	.LCFI80:
 2899              		.cfi_def_cfa_register 13
 2900              		@ sp needed
 2901 002a 80BD     		pop	{r7, pc}
 2902              	.L164:
 2903              		.align	2
 2904              	.L163:
 2905 002c 00000000 		.word	xSchedulerRunning
 2906              		.cfi_endproc
 2907              	.LFE20:
 2909              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2910              		.align	1
 2911              		.global	vTaskSuspendAll
 2912              		.syntax unified
 2913              		.thumb
 2914              		.thumb_func
 2915              		.fpu fpv4-sp-d16
 2917              	vTaskSuspendAll:
 2918              	.LFB21:
2134:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2135:./Drivers/FreeRTOS/tasks.c **** 
2136:./Drivers/FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2137:./Drivers/FreeRTOS/tasks.c **** {
 2919              		.loc 1 2137 1
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 1, uses_anonymous_args = 0
 2923              		@ link register save eliminated.
 2924 0000 80B4     		push	{r7}
 2925              	.LCFI81:
 2926              		.cfi_def_cfa_offset 4
 2927              		.cfi_offset 7, -4
 2928 0002 00AF     		add	r7, sp, #0
 2929              	.LCFI82:
 2930              		.cfi_def_cfa_register 7
2138:./Drivers/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2139:./Drivers/FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2140:./Drivers/FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2141:./Drivers/FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2142:./Drivers/FreeRTOS/tasks.c **** 
2143:./Drivers/FreeRTOS/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2144:./Drivers/FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2145:./Drivers/FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2146:./Drivers/FreeRTOS/tasks.c **** 
2147:./Drivers/FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2148:./Drivers/FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2149:./Drivers/FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
 2931              		.loc 1 2149 5
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 94


 2932 0004 044B     		ldr	r3, .L166
 2933 0006 1B68     		ldr	r3, [r3]
 2934 0008 0133     		adds	r3, r3, #1
 2935 000a 034A     		ldr	r2, .L166
 2936 000c 1360     		str	r3, [r2]
2150:./Drivers/FreeRTOS/tasks.c **** 
2151:./Drivers/FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2152:./Drivers/FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2153:./Drivers/FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
 2937              		.loc 1 2153 5
2154:./Drivers/FreeRTOS/tasks.c **** }
 2938              		.loc 1 2154 1
 2939 000e 00BF     		nop
 2940 0010 BD46     		mov	sp, r7
 2941              	.LCFI83:
 2942              		.cfi_def_cfa_register 13
 2943              		@ sp needed
 2944 0012 5DF8047B 		ldr	r7, [sp], #4
 2945              	.LCFI84:
 2946              		.cfi_restore 7
 2947              		.cfi_def_cfa_offset 0
 2948 0016 7047     		bx	lr
 2949              	.L167:
 2950              		.align	2
 2951              	.L166:
 2952 0018 00000000 		.word	uxSchedulerSuspended
 2953              		.cfi_endproc
 2954              	.LFE21:
 2956              		.section	.text.xTaskResumeAll,"ax",%progbits
 2957              		.align	1
 2958              		.global	xTaskResumeAll
 2959              		.syntax unified
 2960              		.thumb
 2961              		.thumb_func
 2962              		.fpu fpv4-sp-d16
 2964              	xTaskResumeAll:
 2965              	.LFB22:
2155:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2156:./Drivers/FreeRTOS/tasks.c **** 
2157:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2158:./Drivers/FreeRTOS/tasks.c **** 
2159:./Drivers/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2160:./Drivers/FreeRTOS/tasks.c ****     {
2161:./Drivers/FreeRTOS/tasks.c ****         TickType_t xReturn;
2162:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2163:./Drivers/FreeRTOS/tasks.c **** 
2164:./Drivers/FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2165:./Drivers/FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2166:./Drivers/FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2167:./Drivers/FreeRTOS/tasks.c ****          * running. */
2168:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2169:./Drivers/FreeRTOS/tasks.c ****             {
2170:./Drivers/FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2171:./Drivers/FreeRTOS/tasks.c ****                 {
2172:./Drivers/FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2173:./Drivers/FreeRTOS/tasks.c ****                 }
2174:./Drivers/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 95


2175:./Drivers/FreeRTOS/tasks.c ****         #else
2176:./Drivers/FreeRTOS/tasks.c ****             {
2177:./Drivers/FreeRTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2178:./Drivers/FreeRTOS/tasks.c **** 
2179:./Drivers/FreeRTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2180:./Drivers/FreeRTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2181:./Drivers/FreeRTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2182:./Drivers/FreeRTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2183:./Drivers/FreeRTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2184:./Drivers/FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2185:./Drivers/FreeRTOS/tasks.c ****                 {
2186:./Drivers/FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2187:./Drivers/FreeRTOS/tasks.c ****                 }
2188:./Drivers/FreeRTOS/tasks.c ****             }
2189:./Drivers/FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2190:./Drivers/FreeRTOS/tasks.c **** 
2191:./Drivers/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2192:./Drivers/FreeRTOS/tasks.c ****         {
2193:./Drivers/FreeRTOS/tasks.c ****             xReturn = 0;
2194:./Drivers/FreeRTOS/tasks.c ****         }
2195:./Drivers/FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2196:./Drivers/FreeRTOS/tasks.c ****         {
2197:./Drivers/FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2198:./Drivers/FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2199:./Drivers/FreeRTOS/tasks.c ****              * processed. */
2200:./Drivers/FreeRTOS/tasks.c ****             xReturn = 0;
2201:./Drivers/FreeRTOS/tasks.c ****         }
2202:./Drivers/FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2203:./Drivers/FreeRTOS/tasks.c ****         {
2204:./Drivers/FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2205:./Drivers/FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2206:./Drivers/FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2207:./Drivers/FreeRTOS/tasks.c ****             xReturn = 0;
2208:./Drivers/FreeRTOS/tasks.c ****         }
2209:./Drivers/FreeRTOS/tasks.c ****         else
2210:./Drivers/FreeRTOS/tasks.c ****         {
2211:./Drivers/FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2212:./Drivers/FreeRTOS/tasks.c ****         }
2213:./Drivers/FreeRTOS/tasks.c **** 
2214:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
2215:./Drivers/FreeRTOS/tasks.c ****     }
2216:./Drivers/FreeRTOS/tasks.c **** 
2217:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2218:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2219:./Drivers/FreeRTOS/tasks.c **** 
2220:./Drivers/FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2221:./Drivers/FreeRTOS/tasks.c **** {
 2966              		.loc 1 2221 1
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 32
 2969              		@ frame_needed = 1, uses_anonymous_args = 0
 2970 0000 80B5     		push	{r7, lr}
 2971              	.LCFI85:
 2972              		.cfi_def_cfa_offset 8
 2973              		.cfi_offset 7, -8
 2974              		.cfi_offset 14, -4
 2975 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 96


 2976              	.LCFI86:
 2977              		.cfi_def_cfa_offset 40
 2978 0004 00AF     		add	r7, sp, #0
 2979              	.LCFI87:
 2980              		.cfi_def_cfa_register 7
2222:./Drivers/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2981              		.loc 1 2222 13
 2982 0006 0023     		movs	r3, #0
 2983 0008 FB61     		str	r3, [r7, #28]
2223:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2984              		.loc 1 2223 16
 2985 000a 0023     		movs	r3, #0
 2986 000c BB61     		str	r3, [r7, #24]
2224:./Drivers/FreeRTOS/tasks.c **** 
2225:./Drivers/FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2226:./Drivers/FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2227:./Drivers/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2987              		.loc 1 2227 5
 2988 000e 714B     		ldr	r3, .L181
 2989 0010 1B68     		ldr	r3, [r3]
 2990 0012 002B     		cmp	r3, #0
 2991 0014 0AD1     		bne	.L169
 2992              	.LBB203:
 2993              	.LBB204:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2994              		.loc 2 198 9
 2995              		.syntax unified
 2996              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2997 0016 4FF05003 			mov r3, #80												
 2998 001a 83F31188 		msr basepri, r3											
 2999 001e BFF36F8F 		isb														
 3000 0022 BFF34F8F 		dsb														
 3001              	
 3002              	@ 0 "" 2
 3003              		.thumb
 3004              		.syntax unified
 3005 0026 7B60     		str	r3, [r7, #4]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3006              		.loc 2 206 5
 3007 0028 00BF     		nop
 3008              	.L170:
 3009              	.LBE204:
 3010              	.LBE203:
 3011              		.loc 1 2227 5 discriminator 1
 3012 002a FEE7     		b	.L170
 3013              	.L169:
2228:./Drivers/FreeRTOS/tasks.c **** 
2229:./Drivers/FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2230:./Drivers/FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2231:./Drivers/FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2232:./Drivers/FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2233:./Drivers/FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2234:./Drivers/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 3014              		.loc 1 2234 5
 3015 002c FFF7FEFF 		bl	vPortEnterCritical
2235:./Drivers/FreeRTOS/tasks.c ****     {
2236:./Drivers/FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 97


 3016              		.loc 1 2236 9
 3017 0030 684B     		ldr	r3, .L181
 3018 0032 1B68     		ldr	r3, [r3]
 3019 0034 013B     		subs	r3, r3, #1
 3020 0036 674A     		ldr	r2, .L181
 3021 0038 1360     		str	r3, [r2]
2237:./Drivers/FreeRTOS/tasks.c **** 
2238:./Drivers/FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3022              		.loc 1 2238 34
 3023 003a 664B     		ldr	r3, .L181
 3024 003c 1B68     		ldr	r3, [r3]
 3025              		.loc 1 2238 11
 3026 003e 002B     		cmp	r3, #0
 3027 0040 40F0C080 		bne	.L171
2239:./Drivers/FreeRTOS/tasks.c ****         {
2240:./Drivers/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 3028              		.loc 1 2240 40
 3029 0044 644B     		ldr	r3, .L181+4
 3030 0046 1B68     		ldr	r3, [r3]
 3031              		.loc 1 2240 15
 3032 0048 002B     		cmp	r3, #0
 3033 004a 00F0BB80 		beq	.L171
2241:./Drivers/FreeRTOS/tasks.c ****             {
2242:./Drivers/FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2243:./Drivers/FreeRTOS/tasks.c ****                  * appropriate ready list. */
2244:./Drivers/FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 3034              		.loc 1 2244 22
 3035 004e 8AE0     		b	.L172
 3036              	.L175:
2245:./Drivers/FreeRTOS/tasks.c ****                 {
2246:./Drivers/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
 3037              		.loc 1 2246 29
 3038 0050 624B     		ldr	r3, .L181+8
 3039 0052 DB68     		ldr	r3, [r3, #12]
 3040              		.loc 1 2246 27
 3041 0054 DB68     		ldr	r3, [r3, #12]
 3042 0056 FB61     		str	r3, [r7, #28]
 3043              	.LBB205:
2247:./Drivers/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3044              		.loc 1 2247 21
 3045 0058 FB69     		ldr	r3, [r7, #28]
 3046 005a 9B6A     		ldr	r3, [r3, #40]
 3047 005c 3B61     		str	r3, [r7, #16]
 3048 005e FB69     		ldr	r3, [r7, #28]
 3049 0060 DB69     		ldr	r3, [r3, #28]
 3050 0062 FA69     		ldr	r2, [r7, #28]
 3051 0064 126A     		ldr	r2, [r2, #32]
 3052 0066 9A60     		str	r2, [r3, #8]
 3053 0068 FB69     		ldr	r3, [r7, #28]
 3054 006a 1B6A     		ldr	r3, [r3, #32]
 3055 006c FA69     		ldr	r2, [r7, #28]
 3056 006e D269     		ldr	r2, [r2, #28]
 3057 0070 5A60     		str	r2, [r3, #4]
 3058 0072 3B69     		ldr	r3, [r7, #16]
 3059 0074 5A68     		ldr	r2, [r3, #4]
 3060 0076 FB69     		ldr	r3, [r7, #28]
 3061 0078 1833     		adds	r3, r3, #24
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 98


 3062 007a 9A42     		cmp	r2, r3
 3063 007c 03D1     		bne	.L173
 3064              		.loc 1 2247 21 is_stmt 0 discriminator 1
 3065 007e FB69     		ldr	r3, [r7, #28]
 3066 0080 1A6A     		ldr	r2, [r3, #32]
 3067 0082 3B69     		ldr	r3, [r7, #16]
 3068 0084 5A60     		str	r2, [r3, #4]
 3069              	.L173:
 3070              		.loc 1 2247 21 discriminator 3
 3071 0086 FB69     		ldr	r3, [r7, #28]
 3072 0088 0022     		movs	r2, #0
 3073 008a 9A62     		str	r2, [r3, #40]
 3074 008c 3B69     		ldr	r3, [r7, #16]
 3075 008e 1B68     		ldr	r3, [r3]
 3076 0090 5A1E     		subs	r2, r3, #1
 3077 0092 3B69     		ldr	r3, [r7, #16]
 3078 0094 1A60     		str	r2, [r3]
 3079              	.LBE205:
2248:./Drivers/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 3080              		.loc 1 2248 21 is_stmt 1 discriminator 3
 3081              	.LBB206:
2249:./Drivers/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3082              		.loc 1 2249 21 discriminator 3
 3083 0096 FB69     		ldr	r3, [r7, #28]
 3084 0098 5B69     		ldr	r3, [r3, #20]
 3085 009a FB60     		str	r3, [r7, #12]
 3086 009c FB69     		ldr	r3, [r7, #28]
 3087 009e 9B68     		ldr	r3, [r3, #8]
 3088 00a0 FA69     		ldr	r2, [r7, #28]
 3089 00a2 D268     		ldr	r2, [r2, #12]
 3090 00a4 9A60     		str	r2, [r3, #8]
 3091 00a6 FB69     		ldr	r3, [r7, #28]
 3092 00a8 DB68     		ldr	r3, [r3, #12]
 3093 00aa FA69     		ldr	r2, [r7, #28]
 3094 00ac 9268     		ldr	r2, [r2, #8]
 3095 00ae 5A60     		str	r2, [r3, #4]
 3096 00b0 FB68     		ldr	r3, [r7, #12]
 3097 00b2 5A68     		ldr	r2, [r3, #4]
 3098 00b4 FB69     		ldr	r3, [r7, #28]
 3099 00b6 0433     		adds	r3, r3, #4
 3100 00b8 9A42     		cmp	r2, r3
 3101 00ba 03D1     		bne	.L174
 3102              		.loc 1 2249 21 is_stmt 0 discriminator 1
 3103 00bc FB69     		ldr	r3, [r7, #28]
 3104 00be DA68     		ldr	r2, [r3, #12]
 3105 00c0 FB68     		ldr	r3, [r7, #12]
 3106 00c2 5A60     		str	r2, [r3, #4]
 3107              	.L174:
 3108              		.loc 1 2249 21 discriminator 3
 3109 00c4 FB69     		ldr	r3, [r7, #28]
 3110 00c6 0022     		movs	r2, #0
 3111 00c8 5A61     		str	r2, [r3, #20]
 3112 00ca FB68     		ldr	r3, [r7, #12]
 3113 00cc 1B68     		ldr	r3, [r3]
 3114 00ce 5A1E     		subs	r2, r3, #1
 3115 00d0 FB68     		ldr	r3, [r7, #12]
 3116 00d2 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 99


 3117              	.LBE206:
2250:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3118              		.loc 1 2250 21 is_stmt 1 discriminator 3
 3119 00d4 FB69     		ldr	r3, [r7, #28]
 3120 00d6 DB6A     		ldr	r3, [r3, #44]
 3121 00d8 0122     		movs	r2, #1
 3122 00da 9A40     		lsls	r2, r2, r3
 3123 00dc 404B     		ldr	r3, .L181+12
 3124 00de 1B68     		ldr	r3, [r3]
 3125 00e0 1343     		orrs	r3, r3, r2
 3126 00e2 3F4A     		ldr	r2, .L181+12
 3127 00e4 1360     		str	r3, [r2]
 3128              	.LBB207:
 3129 00e6 FB69     		ldr	r3, [r7, #28]
 3130 00e8 DA6A     		ldr	r2, [r3, #44]
 3131 00ea 3E49     		ldr	r1, .L181+16
 3132 00ec 1346     		mov	r3, r2
 3133 00ee 9B00     		lsls	r3, r3, #2
 3134 00f0 1344     		add	r3, r3, r2
 3135 00f2 9B00     		lsls	r3, r3, #2
 3136 00f4 0B44     		add	r3, r3, r1
 3137 00f6 0433     		adds	r3, r3, #4
 3138 00f8 1B68     		ldr	r3, [r3]
 3139 00fa BB60     		str	r3, [r7, #8]
 3140 00fc FB69     		ldr	r3, [r7, #28]
 3141 00fe BA68     		ldr	r2, [r7, #8]
 3142 0100 9A60     		str	r2, [r3, #8]
 3143 0102 BB68     		ldr	r3, [r7, #8]
 3144 0104 9A68     		ldr	r2, [r3, #8]
 3145 0106 FB69     		ldr	r3, [r7, #28]
 3146 0108 DA60     		str	r2, [r3, #12]
 3147 010a BB68     		ldr	r3, [r7, #8]
 3148 010c 9B68     		ldr	r3, [r3, #8]
 3149 010e FA69     		ldr	r2, [r7, #28]
 3150 0110 0432     		adds	r2, r2, #4
 3151 0112 5A60     		str	r2, [r3, #4]
 3152 0114 FB69     		ldr	r3, [r7, #28]
 3153 0116 1A1D     		adds	r2, r3, #4
 3154 0118 BB68     		ldr	r3, [r7, #8]
 3155 011a 9A60     		str	r2, [r3, #8]
 3156 011c FB69     		ldr	r3, [r7, #28]
 3157 011e DA6A     		ldr	r2, [r3, #44]
 3158 0120 1346     		mov	r3, r2
 3159 0122 9B00     		lsls	r3, r3, #2
 3160 0124 1344     		add	r3, r3, r2
 3161 0126 9B00     		lsls	r3, r3, #2
 3162 0128 2E4A     		ldr	r2, .L181+16
 3163 012a 1A44     		add	r2, r2, r3
 3164 012c FB69     		ldr	r3, [r7, #28]
 3165 012e 5A61     		str	r2, [r3, #20]
 3166 0130 FB69     		ldr	r3, [r7, #28]
 3167 0132 DA6A     		ldr	r2, [r3, #44]
 3168 0134 2B49     		ldr	r1, .L181+16
 3169 0136 1346     		mov	r3, r2
 3170 0138 9B00     		lsls	r3, r3, #2
 3171 013a 1344     		add	r3, r3, r2
 3172 013c 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 100


 3173 013e 0B44     		add	r3, r3, r1
 3174 0140 1B68     		ldr	r3, [r3]
 3175 0142 591C     		adds	r1, r3, #1
 3176 0144 2748     		ldr	r0, .L181+16
 3177 0146 1346     		mov	r3, r2
 3178 0148 9B00     		lsls	r3, r3, #2
 3179 014a 1344     		add	r3, r3, r2
 3180 014c 9B00     		lsls	r3, r3, #2
 3181 014e 0344     		add	r3, r3, r0
 3182 0150 1960     		str	r1, [r3]
 3183              	.LBE207:
2251:./Drivers/FreeRTOS/tasks.c **** 
2252:./Drivers/FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2253:./Drivers/FreeRTOS/tasks.c ****                      * the current task then a yield must be performed. */
2254:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3184              		.loc 1 2254 30 discriminator 3
 3185 0152 FB69     		ldr	r3, [r7, #28]
 3186 0154 DA6A     		ldr	r2, [r3, #44]
 3187              		.loc 1 2254 58 discriminator 3
 3188 0156 244B     		ldr	r3, .L181+20
 3189 0158 1B68     		ldr	r3, [r3]
 3190 015a DB6A     		ldr	r3, [r3, #44]
 3191              		.loc 1 2254 23 discriminator 3
 3192 015c 9A42     		cmp	r2, r3
 3193 015e 02D3     		bcc	.L172
2255:./Drivers/FreeRTOS/tasks.c ****                     {
2256:./Drivers/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
 3194              		.loc 1 2256 39
 3195 0160 224B     		ldr	r3, .L181+24
 3196 0162 0122     		movs	r2, #1
 3197 0164 1A60     		str	r2, [r3]
 3198              	.L172:
2244:./Drivers/FreeRTOS/tasks.c ****                 {
 3199              		.loc 1 2244 24
 3200 0166 1D4B     		ldr	r3, .L181+8
 3201 0168 1B68     		ldr	r3, [r3]
2244:./Drivers/FreeRTOS/tasks.c ****                 {
 3202              		.loc 1 2244 22
 3203 016a 002B     		cmp	r3, #0
 3204 016c 7FF470AF 		bne	.L175
2257:./Drivers/FreeRTOS/tasks.c ****                     }
2258:./Drivers/FreeRTOS/tasks.c ****                     else
2259:./Drivers/FreeRTOS/tasks.c ****                     {
2260:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2261:./Drivers/FreeRTOS/tasks.c ****                     }
2262:./Drivers/FreeRTOS/tasks.c ****                 }
2263:./Drivers/FreeRTOS/tasks.c **** 
2264:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
 3205              		.loc 1 2264 19
 3206 0170 FB69     		ldr	r3, [r7, #28]
 3207 0172 002B     		cmp	r3, #0
 3208 0174 01D0     		beq	.L176
2265:./Drivers/FreeRTOS/tasks.c ****                 {
2266:./Drivers/FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2267:./Drivers/FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2268:./Drivers/FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2269:./Drivers/FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 101


2270:./Drivers/FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2271:./Drivers/FreeRTOS/tasks.c ****                      * state. */
2272:./Drivers/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
 3209              		.loc 1 2272 21
 3210 0176 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3211              	.L176:
 3212              	.LBB208:
2273:./Drivers/FreeRTOS/tasks.c ****                 }
2274:./Drivers/FreeRTOS/tasks.c **** 
2275:./Drivers/FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2276:./Drivers/FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2277:./Drivers/FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2278:./Drivers/FreeRTOS/tasks.c ****                  * time. */
2279:./Drivers/FreeRTOS/tasks.c ****                 {
2280:./Drivers/FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 3213              		.loc 1 2280 32
 3214 017a 1D4B     		ldr	r3, .L181+28
 3215 017c 1B68     		ldr	r3, [r3]
 3216 017e 7B61     		str	r3, [r7, #20]
2281:./Drivers/FreeRTOS/tasks.c **** 
2282:./Drivers/FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 3217              		.loc 1 2282 23
 3218 0180 7B69     		ldr	r3, [r7, #20]
 3219 0182 002B     		cmp	r3, #0
 3220 0184 10D0     		beq	.L177
 3221              	.L179:
2283:./Drivers/FreeRTOS/tasks.c ****                     {
2284:./Drivers/FreeRTOS/tasks.c ****                         do
2285:./Drivers/FreeRTOS/tasks.c ****                         {
2286:./Drivers/FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 3222              		.loc 1 2286 33
 3223 0186 FFF7FEFF 		bl	xTaskIncrementTick
 3224 018a 0346     		mov	r3, r0
 3225              		.loc 1 2286 31
 3226 018c 002B     		cmp	r3, #0
 3227 018e 02D0     		beq	.L178
2287:./Drivers/FreeRTOS/tasks.c ****                             {
2288:./Drivers/FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
 3228              		.loc 1 2288 47
 3229 0190 164B     		ldr	r3, .L181+24
 3230 0192 0122     		movs	r2, #1
 3231 0194 1A60     		str	r2, [r3]
 3232              	.L178:
2289:./Drivers/FreeRTOS/tasks.c ****                             }
2290:./Drivers/FreeRTOS/tasks.c ****                             else
2291:./Drivers/FreeRTOS/tasks.c ****                             {
2292:./Drivers/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2293:./Drivers/FreeRTOS/tasks.c ****                             }
2294:./Drivers/FreeRTOS/tasks.c **** 
2295:./Drivers/FreeRTOS/tasks.c ****                             --xPendedCounts;
 3233              		.loc 1 2295 29
 3234 0196 7B69     		ldr	r3, [r7, #20]
 3235 0198 013B     		subs	r3, r3, #1
 3236 019a 7B61     		str	r3, [r7, #20]
2296:./Drivers/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3237              		.loc 1 2296 25
 3238 019c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 102


 3239 019e 002B     		cmp	r3, #0
 3240 01a0 F1D1     		bne	.L179
2297:./Drivers/FreeRTOS/tasks.c **** 
2298:./Drivers/FreeRTOS/tasks.c ****                         xPendedTicks = 0;
 3241              		.loc 1 2298 38
 3242 01a2 134B     		ldr	r3, .L181+28
 3243 01a4 0022     		movs	r2, #0
 3244 01a6 1A60     		str	r2, [r3]
 3245              	.L177:
 3246              	.LBE208:
2299:./Drivers/FreeRTOS/tasks.c ****                     }
2300:./Drivers/FreeRTOS/tasks.c ****                     else
2301:./Drivers/FreeRTOS/tasks.c ****                     {
2302:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2303:./Drivers/FreeRTOS/tasks.c ****                     }
2304:./Drivers/FreeRTOS/tasks.c ****                 }
2305:./Drivers/FreeRTOS/tasks.c **** 
2306:./Drivers/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 3247              		.loc 1 2306 35
 3248 01a8 104B     		ldr	r3, .L181+24
 3249 01aa 1B68     		ldr	r3, [r3]
 3250              		.loc 1 2306 19
 3251 01ac 002B     		cmp	r3, #0
 3252 01ae 09D0     		beq	.L171
2307:./Drivers/FreeRTOS/tasks.c ****                 {
2308:./Drivers/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2309:./Drivers/FreeRTOS/tasks.c ****                         {
2310:./Drivers/FreeRTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
 3253              		.loc 1 2310 45
 3254 01b0 0123     		movs	r3, #1
 3255 01b2 BB61     		str	r3, [r7, #24]
2311:./Drivers/FreeRTOS/tasks.c ****                         }
2312:./Drivers/FreeRTOS/tasks.c ****                     #endif
2313:./Drivers/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 3256              		.loc 1 2313 21
 3257 01b4 0F4B     		ldr	r3, .L181+32
 3258 01b6 4FF08052 		mov	r2, #268435456
 3259 01ba 1A60     		str	r2, [r3]
 3260              		.syntax unified
 3261              	@ 2313 "./Drivers/FreeRTOS/tasks.c" 1
 3262 01bc BFF34F8F 		dsb
 3263              	@ 0 "" 2
 3264              	@ 2313 "./Drivers/FreeRTOS/tasks.c" 1
 3265 01c0 BFF36F8F 		isb
 3266              	@ 0 "" 2
 3267              		.thumb
 3268              		.syntax unified
 3269              	.L171:
2314:./Drivers/FreeRTOS/tasks.c ****                 }
2315:./Drivers/FreeRTOS/tasks.c ****                 else
2316:./Drivers/FreeRTOS/tasks.c ****                 {
2317:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2318:./Drivers/FreeRTOS/tasks.c ****                 }
2319:./Drivers/FreeRTOS/tasks.c ****             }
2320:./Drivers/FreeRTOS/tasks.c ****         }
2321:./Drivers/FreeRTOS/tasks.c ****         else
2322:./Drivers/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 103


2323:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2324:./Drivers/FreeRTOS/tasks.c ****         }
2325:./Drivers/FreeRTOS/tasks.c ****     }
2326:./Drivers/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 3270              		.loc 1 2326 5
 3271 01c4 FFF7FEFF 		bl	vPortExitCritical
2327:./Drivers/FreeRTOS/tasks.c **** 
2328:./Drivers/FreeRTOS/tasks.c ****     return xAlreadyYielded;
 3272              		.loc 1 2328 12
 3273 01c8 BB69     		ldr	r3, [r7, #24]
2329:./Drivers/FreeRTOS/tasks.c **** }
 3274              		.loc 1 2329 1
 3275 01ca 1846     		mov	r0, r3
 3276 01cc 2037     		adds	r7, r7, #32
 3277              	.LCFI88:
 3278              		.cfi_def_cfa_offset 8
 3279 01ce BD46     		mov	sp, r7
 3280              	.LCFI89:
 3281              		.cfi_def_cfa_register 13
 3282              		@ sp needed
 3283 01d0 80BD     		pop	{r7, pc}
 3284              	.L182:
 3285 01d2 00BF     		.align	2
 3286              	.L181:
 3287 01d4 00000000 		.word	uxSchedulerSuspended
 3288 01d8 00000000 		.word	uxCurrentNumberOfTasks
 3289 01dc 00000000 		.word	xPendingReadyList
 3290 01e0 00000000 		.word	uxTopReadyPriority
 3291 01e4 00000000 		.word	pxReadyTasksLists
 3292 01e8 00000000 		.word	pxCurrentTCB
 3293 01ec 00000000 		.word	xYieldPending
 3294 01f0 00000000 		.word	xPendedTicks
 3295 01f4 04ED00E0 		.word	-536810236
 3296              		.cfi_endproc
 3297              	.LFE22:
 3299              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3300              		.align	1
 3301              		.global	xTaskGetTickCount
 3302              		.syntax unified
 3303              		.thumb
 3304              		.thumb_func
 3305              		.fpu fpv4-sp-d16
 3307              	xTaskGetTickCount:
 3308              	.LFB23:
2330:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2331:./Drivers/FreeRTOS/tasks.c **** 
2332:./Drivers/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2333:./Drivers/FreeRTOS/tasks.c **** {
 3309              		.loc 1 2333 1
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 8
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313              		@ link register save eliminated.
 3314 0000 80B4     		push	{r7}
 3315              	.LCFI90:
 3316              		.cfi_def_cfa_offset 4
 3317              		.cfi_offset 7, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 104


 3318 0002 83B0     		sub	sp, sp, #12
 3319              	.LCFI91:
 3320              		.cfi_def_cfa_offset 16
 3321 0004 00AF     		add	r7, sp, #0
 3322              	.LCFI92:
 3323              		.cfi_def_cfa_register 7
2334:./Drivers/FreeRTOS/tasks.c ****     TickType_t xTicks;
2335:./Drivers/FreeRTOS/tasks.c **** 
2336:./Drivers/FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2337:./Drivers/FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2338:./Drivers/FreeRTOS/tasks.c ****     {
2339:./Drivers/FreeRTOS/tasks.c ****         xTicks = xTickCount;
 3324              		.loc 1 2339 16
 3325 0006 054B     		ldr	r3, .L185
 3326 0008 1B68     		ldr	r3, [r3]
 3327 000a 7B60     		str	r3, [r7, #4]
2340:./Drivers/FreeRTOS/tasks.c ****     }
2341:./Drivers/FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2342:./Drivers/FreeRTOS/tasks.c **** 
2343:./Drivers/FreeRTOS/tasks.c ****     return xTicks;
 3328              		.loc 1 2343 12
 3329 000c 7B68     		ldr	r3, [r7, #4]
2344:./Drivers/FreeRTOS/tasks.c **** }
 3330              		.loc 1 2344 1
 3331 000e 1846     		mov	r0, r3
 3332 0010 0C37     		adds	r7, r7, #12
 3333              	.LCFI93:
 3334              		.cfi_def_cfa_offset 4
 3335 0012 BD46     		mov	sp, r7
 3336              	.LCFI94:
 3337              		.cfi_def_cfa_register 13
 3338              		@ sp needed
 3339 0014 5DF8047B 		ldr	r7, [sp], #4
 3340              	.LCFI95:
 3341              		.cfi_restore 7
 3342              		.cfi_def_cfa_offset 0
 3343 0018 7047     		bx	lr
 3344              	.L186:
 3345 001a 00BF     		.align	2
 3346              	.L185:
 3347 001c 00000000 		.word	xTickCount
 3348              		.cfi_endproc
 3349              	.LFE23:
 3351              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3352              		.align	1
 3353              		.global	xTaskGetTickCountFromISR
 3354              		.syntax unified
 3355              		.thumb
 3356              		.thumb_func
 3357              		.fpu fpv4-sp-d16
 3359              	xTaskGetTickCountFromISR:
 3360              	.LFB24:
2345:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2346:./Drivers/FreeRTOS/tasks.c **** 
2347:./Drivers/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2348:./Drivers/FreeRTOS/tasks.c **** {
 3361              		.loc 1 2348 1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 105


 3362              		.cfi_startproc
 3363              		@ args = 0, pretend = 0, frame = 8
 3364              		@ frame_needed = 1, uses_anonymous_args = 0
 3365 0000 80B5     		push	{r7, lr}
 3366              	.LCFI96:
 3367              		.cfi_def_cfa_offset 8
 3368              		.cfi_offset 7, -8
 3369              		.cfi_offset 14, -4
 3370 0002 82B0     		sub	sp, sp, #8
 3371              	.LCFI97:
 3372              		.cfi_def_cfa_offset 16
 3373 0004 00AF     		add	r7, sp, #0
 3374              	.LCFI98:
 3375              		.cfi_def_cfa_register 7
2349:./Drivers/FreeRTOS/tasks.c ****     TickType_t xReturn;
2350:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2351:./Drivers/FreeRTOS/tasks.c **** 
2352:./Drivers/FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2353:./Drivers/FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2354:./Drivers/FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2355:./Drivers/FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2356:./Drivers/FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2357:./Drivers/FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2358:./Drivers/FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2359:./Drivers/FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2360:./Drivers/FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2361:./Drivers/FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2362:./Drivers/FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2363:./Drivers/FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2364:./Drivers/FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2365:./Drivers/FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2366:./Drivers/FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3376              		.loc 1 2366 5
 3377 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2367:./Drivers/FreeRTOS/tasks.c **** 
2368:./Drivers/FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3378              		.loc 1 2368 28
 3379 000a 0023     		movs	r3, #0
 3380 000c 7B60     		str	r3, [r7, #4]
2369:./Drivers/FreeRTOS/tasks.c ****     {
2370:./Drivers/FreeRTOS/tasks.c ****         xReturn = xTickCount;
 3381              		.loc 1 2370 17
 3382 000e 044B     		ldr	r3, .L189
 3383 0010 1B68     		ldr	r3, [r3]
 3384 0012 3B60     		str	r3, [r7]
2371:./Drivers/FreeRTOS/tasks.c ****     }
2372:./Drivers/FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2373:./Drivers/FreeRTOS/tasks.c **** 
2374:./Drivers/FreeRTOS/tasks.c ****     return xReturn;
 3385              		.loc 1 2374 12
 3386 0014 3B68     		ldr	r3, [r7]
2375:./Drivers/FreeRTOS/tasks.c **** }
 3387              		.loc 1 2375 1
 3388 0016 1846     		mov	r0, r3
 3389 0018 0837     		adds	r7, r7, #8
 3390              	.LCFI99:
 3391              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 106


 3392 001a BD46     		mov	sp, r7
 3393              	.LCFI100:
 3394              		.cfi_def_cfa_register 13
 3395              		@ sp needed
 3396 001c 80BD     		pop	{r7, pc}
 3397              	.L190:
 3398 001e 00BF     		.align	2
 3399              	.L189:
 3400 0020 00000000 		.word	xTickCount
 3401              		.cfi_endproc
 3402              	.LFE24:
 3404              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3405              		.align	1
 3406              		.global	uxTaskGetNumberOfTasks
 3407              		.syntax unified
 3408              		.thumb
 3409              		.thumb_func
 3410              		.fpu fpv4-sp-d16
 3412              	uxTaskGetNumberOfTasks:
 3413              	.LFB25:
2376:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2377:./Drivers/FreeRTOS/tasks.c **** 
2378:./Drivers/FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2379:./Drivers/FreeRTOS/tasks.c **** {
 3414              		.loc 1 2379 1
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 0
 3417              		@ frame_needed = 1, uses_anonymous_args = 0
 3418              		@ link register save eliminated.
 3419 0000 80B4     		push	{r7}
 3420              	.LCFI101:
 3421              		.cfi_def_cfa_offset 4
 3422              		.cfi_offset 7, -4
 3423 0002 00AF     		add	r7, sp, #0
 3424              	.LCFI102:
 3425              		.cfi_def_cfa_register 7
2380:./Drivers/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2381:./Drivers/FreeRTOS/tasks.c ****      * BaseType_t. */
2382:./Drivers/FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
 3426              		.loc 1 2382 12
 3427 0004 034B     		ldr	r3, .L193
 3428 0006 1B68     		ldr	r3, [r3]
2383:./Drivers/FreeRTOS/tasks.c **** }
 3429              		.loc 1 2383 1
 3430 0008 1846     		mov	r0, r3
 3431 000a BD46     		mov	sp, r7
 3432              	.LCFI103:
 3433              		.cfi_def_cfa_register 13
 3434              		@ sp needed
 3435 000c 5DF8047B 		ldr	r7, [sp], #4
 3436              	.LCFI104:
 3437              		.cfi_restore 7
 3438              		.cfi_def_cfa_offset 0
 3439 0010 7047     		bx	lr
 3440              	.L194:
 3441 0012 00BF     		.align	2
 3442              	.L193:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 107


 3443 0014 00000000 		.word	uxCurrentNumberOfTasks
 3444              		.cfi_endproc
 3445              	.LFE25:
 3447              		.section	.text.pcTaskGetName,"ax",%progbits
 3448              		.align	1
 3449              		.global	pcTaskGetName
 3450              		.syntax unified
 3451              		.thumb
 3452              		.thumb_func
 3453              		.fpu fpv4-sp-d16
 3455              	pcTaskGetName:
 3456              	.LFB26:
2384:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2385:./Drivers/FreeRTOS/tasks.c **** 
2386:./Drivers/FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2387:./Drivers/FreeRTOS/tasks.c **** {
 3457              		.loc 1 2387 1
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 16
 3460              		@ frame_needed = 1, uses_anonymous_args = 0
 3461              		@ link register save eliminated.
 3462 0000 80B4     		push	{r7}
 3463              	.LCFI105:
 3464              		.cfi_def_cfa_offset 4
 3465              		.cfi_offset 7, -4
 3466 0002 85B0     		sub	sp, sp, #20
 3467              	.LCFI106:
 3468              		.cfi_def_cfa_offset 24
 3469 0004 00AF     		add	r7, sp, #0
 3470              	.LCFI107:
 3471              		.cfi_def_cfa_register 7
 3472 0006 7860     		str	r0, [r7, #4]
2388:./Drivers/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2389:./Drivers/FreeRTOS/tasks.c **** 
2390:./Drivers/FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2391:./Drivers/FreeRTOS/tasks.c ****      * queried. */
2392:./Drivers/FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3473              		.loc 1 2392 13
 3474 0008 7B68     		ldr	r3, [r7, #4]
 3475 000a 002B     		cmp	r3, #0
 3476 000c 02D1     		bne	.L196
 3477              		.loc 1 2392 13 is_stmt 0 discriminator 1
 3478 000e 0D4B     		ldr	r3, .L201
 3479 0010 1B68     		ldr	r3, [r3]
 3480 0012 00E0     		b	.L197
 3481              	.L196:
 3482              		.loc 1 2392 13 discriminator 2
 3483 0014 7B68     		ldr	r3, [r7, #4]
 3484              	.L197:
 3485              		.loc 1 2392 11 is_stmt 1 discriminator 4
 3486 0016 FB60     		str	r3, [r7, #12]
2393:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 3487              		.loc 1 2393 5 discriminator 4
 3488 0018 FB68     		ldr	r3, [r7, #12]
 3489 001a 002B     		cmp	r3, #0
 3490 001c 0AD1     		bne	.L198
 3491              	.LBB209:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 108


 3492              	.LBB210:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3493              		.loc 2 198 9
 3494              		.syntax unified
 3495              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3496 001e 4FF05003 			mov r3, #80												
 3497 0022 83F31188 		msr basepri, r3											
 3498 0026 BFF36F8F 		isb														
 3499 002a BFF34F8F 		dsb														
 3500              	
 3501              	@ 0 "" 2
 3502              		.thumb
 3503              		.syntax unified
 3504 002e BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3505              		.loc 2 206 5
 3506 0030 00BF     		nop
 3507              	.L199:
 3508              	.LBE210:
 3509              	.LBE209:
 3510              		.loc 1 2393 5 discriminator 1
 3511 0032 FEE7     		b	.L199
 3512              	.L198:
2394:./Drivers/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 3513              		.loc 1 2394 12
 3514 0034 FB68     		ldr	r3, [r7, #12]
 3515 0036 3433     		adds	r3, r3, #52
2395:./Drivers/FreeRTOS/tasks.c **** }
 3516              		.loc 1 2395 1
 3517 0038 1846     		mov	r0, r3
 3518 003a 1437     		adds	r7, r7, #20
 3519              	.LCFI108:
 3520              		.cfi_def_cfa_offset 4
 3521 003c BD46     		mov	sp, r7
 3522              	.LCFI109:
 3523              		.cfi_def_cfa_register 13
 3524              		@ sp needed
 3525 003e 5DF8047B 		ldr	r7, [sp], #4
 3526              	.LCFI110:
 3527              		.cfi_restore 7
 3528              		.cfi_def_cfa_offset 0
 3529 0042 7047     		bx	lr
 3530              	.L202:
 3531              		.align	2
 3532              	.L201:
 3533 0044 00000000 		.word	pxCurrentTCB
 3534              		.cfi_endproc
 3535              	.LFE26:
 3537              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3538              		.align	1
 3539              		.global	uxTaskGetSystemState
 3540              		.syntax unified
 3541              		.thumb
 3542              		.thumb_func
 3543              		.fpu fpv4-sp-d16
 3545              	uxTaskGetSystemState:
 3546              	.LFB27:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 109


2396:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:./Drivers/FreeRTOS/tasks.c **** 
2398:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2399:./Drivers/FreeRTOS/tasks.c **** 
2400:./Drivers/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2401:./Drivers/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2402:./Drivers/FreeRTOS/tasks.c ****     {
2403:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2404:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t x;
2405:./Drivers/FreeRTOS/tasks.c ****         char cNextChar;
2406:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
2407:./Drivers/FreeRTOS/tasks.c **** 
2408:./Drivers/FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2409:./Drivers/FreeRTOS/tasks.c **** 
2410:./Drivers/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2411:./Drivers/FreeRTOS/tasks.c ****         {
2412:./Drivers/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2413:./Drivers/FreeRTOS/tasks.c **** 
2414:./Drivers/FreeRTOS/tasks.c ****             do
2415:./Drivers/FreeRTOS/tasks.c ****             {
2416:./Drivers/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2417:./Drivers/FreeRTOS/tasks.c **** 
2418:./Drivers/FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2419:./Drivers/FreeRTOS/tasks.c ****                  * mismatch. */
2420:./Drivers/FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2421:./Drivers/FreeRTOS/tasks.c **** 
2422:./Drivers/FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2423:./Drivers/FreeRTOS/tasks.c ****                 {
2424:./Drivers/FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2425:./Drivers/FreeRTOS/tasks.c **** 
2426:./Drivers/FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2427:./Drivers/FreeRTOS/tasks.c ****                     {
2428:./Drivers/FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2429:./Drivers/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2430:./Drivers/FreeRTOS/tasks.c ****                     }
2431:./Drivers/FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2432:./Drivers/FreeRTOS/tasks.c ****                     {
2433:./Drivers/FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2434:./Drivers/FreeRTOS/tasks.c ****                          * found. */
2435:./Drivers/FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2436:./Drivers/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2437:./Drivers/FreeRTOS/tasks.c ****                     }
2438:./Drivers/FreeRTOS/tasks.c ****                     else
2439:./Drivers/FreeRTOS/tasks.c ****                     {
2440:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2441:./Drivers/FreeRTOS/tasks.c ****                     }
2442:./Drivers/FreeRTOS/tasks.c **** 
2443:./Drivers/FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2444:./Drivers/FreeRTOS/tasks.c ****                     {
2445:./Drivers/FreeRTOS/tasks.c ****                         break;
2446:./Drivers/FreeRTOS/tasks.c ****                     }
2447:./Drivers/FreeRTOS/tasks.c ****                 }
2448:./Drivers/FreeRTOS/tasks.c **** 
2449:./Drivers/FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
2450:./Drivers/FreeRTOS/tasks.c ****                 {
2451:./Drivers/FreeRTOS/tasks.c ****                     /* The handle has been found. */
2452:./Drivers/FreeRTOS/tasks.c ****                     break;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 110


2453:./Drivers/FreeRTOS/tasks.c ****                 }
2454:./Drivers/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2455:./Drivers/FreeRTOS/tasks.c ****         }
2456:./Drivers/FreeRTOS/tasks.c ****         else
2457:./Drivers/FreeRTOS/tasks.c ****         {
2458:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2459:./Drivers/FreeRTOS/tasks.c ****         }
2460:./Drivers/FreeRTOS/tasks.c **** 
2461:./Drivers/FreeRTOS/tasks.c ****         return pxReturn;
2462:./Drivers/FreeRTOS/tasks.c ****     }
2463:./Drivers/FreeRTOS/tasks.c **** 
2464:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2465:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2466:./Drivers/FreeRTOS/tasks.c **** 
2467:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2468:./Drivers/FreeRTOS/tasks.c **** 
2469:./Drivers/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2470:./Drivers/FreeRTOS/tasks.c ****     {
2471:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2472:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2473:./Drivers/FreeRTOS/tasks.c **** 
2474:./Drivers/FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2475:./Drivers/FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2476:./Drivers/FreeRTOS/tasks.c **** 
2477:./Drivers/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2478:./Drivers/FreeRTOS/tasks.c ****         {
2479:./Drivers/FreeRTOS/tasks.c ****             /* Search the ready lists. */
2480:./Drivers/FreeRTOS/tasks.c ****             do
2481:./Drivers/FreeRTOS/tasks.c ****             {
2482:./Drivers/FreeRTOS/tasks.c ****                 uxQueue--;
2483:./Drivers/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2484:./Drivers/FreeRTOS/tasks.c **** 
2485:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2486:./Drivers/FreeRTOS/tasks.c ****                 {
2487:./Drivers/FreeRTOS/tasks.c ****                     /* Found the handle. */
2488:./Drivers/FreeRTOS/tasks.c ****                     break;
2489:./Drivers/FreeRTOS/tasks.c ****                 }
2490:./Drivers/FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2491:./Drivers/FreeRTOS/tasks.c **** 
2492:./Drivers/FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2493:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2494:./Drivers/FreeRTOS/tasks.c ****             {
2495:./Drivers/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2496:./Drivers/FreeRTOS/tasks.c ****             }
2497:./Drivers/FreeRTOS/tasks.c **** 
2498:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2499:./Drivers/FreeRTOS/tasks.c ****             {
2500:./Drivers/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2501:./Drivers/FreeRTOS/tasks.c ****             }
2502:./Drivers/FreeRTOS/tasks.c **** 
2503:./Drivers/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2504:./Drivers/FreeRTOS/tasks.c ****                 {
2505:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2506:./Drivers/FreeRTOS/tasks.c ****                     {
2507:./Drivers/FreeRTOS/tasks.c ****                         /* Search the suspended list. */
2508:./Drivers/FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2509:./Drivers/FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 111


2510:./Drivers/FreeRTOS/tasks.c ****                 }
2511:./Drivers/FreeRTOS/tasks.c ****             #endif
2512:./Drivers/FreeRTOS/tasks.c **** 
2513:./Drivers/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2514:./Drivers/FreeRTOS/tasks.c ****                 {
2515:./Drivers/FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2516:./Drivers/FreeRTOS/tasks.c ****                     {
2517:./Drivers/FreeRTOS/tasks.c ****                         /* Search the deleted list. */
2518:./Drivers/FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2519:./Drivers/FreeRTOS/tasks.c ****                     }
2520:./Drivers/FreeRTOS/tasks.c ****                 }
2521:./Drivers/FreeRTOS/tasks.c ****             #endif
2522:./Drivers/FreeRTOS/tasks.c ****         }
2523:./Drivers/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2524:./Drivers/FreeRTOS/tasks.c **** 
2525:./Drivers/FreeRTOS/tasks.c ****         return pxTCB;
2526:./Drivers/FreeRTOS/tasks.c ****     }
2527:./Drivers/FreeRTOS/tasks.c **** 
2528:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2529:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2530:./Drivers/FreeRTOS/tasks.c **** 
2531:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2532:./Drivers/FreeRTOS/tasks.c **** 
2533:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2534:./Drivers/FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2535:./Drivers/FreeRTOS/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2536:./Drivers/FreeRTOS/tasks.c ****     {
 3547              		.loc 1 2536 5
 3548              		.cfi_startproc
 3549              		@ args = 0, pretend = 0, frame = 24
 3550              		@ frame_needed = 1, uses_anonymous_args = 0
 3551 0000 80B5     		push	{r7, lr}
 3552              	.LCFI111:
 3553              		.cfi_def_cfa_offset 8
 3554              		.cfi_offset 7, -8
 3555              		.cfi_offset 14, -4
 3556 0002 86B0     		sub	sp, sp, #24
 3557              	.LCFI112:
 3558              		.cfi_def_cfa_offset 32
 3559 0004 00AF     		add	r7, sp, #0
 3560              	.LCFI113:
 3561              		.cfi_def_cfa_register 7
 3562 0006 F860     		str	r0, [r7, #12]
 3563 0008 B960     		str	r1, [r7, #8]
 3564 000a 7A60     		str	r2, [r7, #4]
2537:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3565              		.loc 1 2537 21
 3566 000c 0023     		movs	r3, #0
 3567 000e 7B61     		str	r3, [r7, #20]
 3568              		.loc 1 2537 33
 3569 0010 0523     		movs	r3, #5
 3570 0012 3B61     		str	r3, [r7, #16]
2538:./Drivers/FreeRTOS/tasks.c **** 
2539:./Drivers/FreeRTOS/tasks.c ****         vTaskSuspendAll();
 3571              		.loc 1 2539 9
 3572 0014 FFF7FEFF 		bl	vTaskSuspendAll
2540:./Drivers/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 112


2541:./Drivers/FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2542:./Drivers/FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
 3573              		.loc 1 2542 29
 3574 0018 3A4B     		ldr	r3, .L207
 3575 001a 1B68     		ldr	r3, [r3]
 3576              		.loc 1 2542 15
 3577 001c BA68     		ldr	r2, [r7, #8]
 3578 001e 9A42     		cmp	r2, r3
 3579 0020 68D3     		bcc	.L204
 3580              	.L205:
2543:./Drivers/FreeRTOS/tasks.c ****             {
2544:./Drivers/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2545:./Drivers/FreeRTOS/tasks.c ****                  * task in the Ready state. */
2546:./Drivers/FreeRTOS/tasks.c ****                 do
2547:./Drivers/FreeRTOS/tasks.c ****                 {
2548:./Drivers/FreeRTOS/tasks.c ****                     uxQueue--;
 3581              		.loc 1 2548 28 discriminator 1
 3582 0022 3B69     		ldr	r3, [r7, #16]
 3583 0024 013B     		subs	r3, r3, #1
 3584 0026 3B61     		str	r3, [r7, #16]
2549:./Drivers/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 3585              		.loc 1 2549 81 discriminator 1
 3586 0028 7A69     		ldr	r2, [r7, #20]
 3587 002a 1346     		mov	r3, r2
 3588 002c DB00     		lsls	r3, r3, #3
 3589 002e 1344     		add	r3, r3, r2
 3590 0030 9B00     		lsls	r3, r3, #2
 3591 0032 1A46     		mov	r2, r3
 3592              		.loc 1 2549 31 discriminator 1
 3593 0034 FB68     		ldr	r3, [r7, #12]
 3594 0036 9818     		adds	r0, r3, r2
 3595 0038 3A69     		ldr	r2, [r7, #16]
 3596 003a 1346     		mov	r3, r2
 3597 003c 9B00     		lsls	r3, r3, #2
 3598 003e 1344     		add	r3, r3, r2
 3599 0040 9B00     		lsls	r3, r3, #2
 3600 0042 314A     		ldr	r2, .L207+4
 3601 0044 1344     		add	r3, r3, r2
 3602 0046 0122     		movs	r2, #1
 3603 0048 1946     		mov	r1, r3
 3604 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3605 004e 0246     		mov	r2, r0
 3606              		.loc 1 2549 28 discriminator 1
 3607 0050 7B69     		ldr	r3, [r7, #20]
 3608 0052 1344     		add	r3, r3, r2
 3609 0054 7B61     		str	r3, [r7, #20]
2550:./Drivers/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 3610              		.loc 1 2550 17 discriminator 1
 3611 0056 3B69     		ldr	r3, [r7, #16]
 3612 0058 002B     		cmp	r3, #0
 3613 005a E2D1     		bne	.L205
2551:./Drivers/FreeRTOS/tasks.c **** 
2552:./Drivers/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2553:./Drivers/FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2554:./Drivers/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3614              		.loc 1 2554 77
 3615 005c 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 113


 3616 005e 1346     		mov	r3, r2
 3617 0060 DB00     		lsls	r3, r3, #3
 3618 0062 1344     		add	r3, r3, r2
 3619 0064 9B00     		lsls	r3, r3, #2
 3620 0066 1A46     		mov	r2, r3
 3621              		.loc 1 2554 27
 3622 0068 FB68     		ldr	r3, [r7, #12]
 3623 006a 1344     		add	r3, r3, r2
 3624 006c 274A     		ldr	r2, .L207+8
 3625 006e 1168     		ldr	r1, [r2]
 3626 0070 0222     		movs	r2, #2
 3627 0072 1846     		mov	r0, r3
 3628 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3629 0078 0246     		mov	r2, r0
 3630              		.loc 1 2554 24
 3631 007a 7B69     		ldr	r3, [r7, #20]
 3632 007c 1344     		add	r3, r3, r2
 3633 007e 7B61     		str	r3, [r7, #20]
2555:./Drivers/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 3634              		.loc 1 2555 77
 3635 0080 7A69     		ldr	r2, [r7, #20]
 3636 0082 1346     		mov	r3, r2
 3637 0084 DB00     		lsls	r3, r3, #3
 3638 0086 1344     		add	r3, r3, r2
 3639 0088 9B00     		lsls	r3, r3, #2
 3640 008a 1A46     		mov	r2, r3
 3641              		.loc 1 2555 27
 3642 008c FB68     		ldr	r3, [r7, #12]
 3643 008e 1344     		add	r3, r3, r2
 3644 0090 1F4A     		ldr	r2, .L207+12
 3645 0092 1168     		ldr	r1, [r2]
 3646 0094 0222     		movs	r2, #2
 3647 0096 1846     		mov	r0, r3
 3648 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3649 009c 0246     		mov	r2, r0
 3650              		.loc 1 2555 24
 3651 009e 7B69     		ldr	r3, [r7, #20]
 3652 00a0 1344     		add	r3, r3, r2
 3653 00a2 7B61     		str	r3, [r7, #20]
2556:./Drivers/FreeRTOS/tasks.c **** 
2557:./Drivers/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2558:./Drivers/FreeRTOS/tasks.c ****                     {
2559:./Drivers/FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2560:./Drivers/FreeRTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2561:./Drivers/FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3654              		.loc 1 2561 85
 3655 00a4 7A69     		ldr	r2, [r7, #20]
 3656 00a6 1346     		mov	r3, r2
 3657 00a8 DB00     		lsls	r3, r3, #3
 3658 00aa 1344     		add	r3, r3, r2
 3659 00ac 9B00     		lsls	r3, r3, #2
 3660 00ae 1A46     		mov	r2, r3
 3661              		.loc 1 2561 35
 3662 00b0 FB68     		ldr	r3, [r7, #12]
 3663 00b2 1344     		add	r3, r3, r2
 3664 00b4 0422     		movs	r2, #4
 3665 00b6 1749     		ldr	r1, .L207+16
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 114


 3666 00b8 1846     		mov	r0, r3
 3667 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3668 00be 0246     		mov	r2, r0
 3669              		.loc 1 2561 32
 3670 00c0 7B69     		ldr	r3, [r7, #20]
 3671 00c2 1344     		add	r3, r3, r2
 3672 00c4 7B61     		str	r3, [r7, #20]
2562:./Drivers/FreeRTOS/tasks.c ****                     }
2563:./Drivers/FreeRTOS/tasks.c ****                 #endif
2564:./Drivers/FreeRTOS/tasks.c **** 
2565:./Drivers/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2566:./Drivers/FreeRTOS/tasks.c ****                     {
2567:./Drivers/FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2568:./Drivers/FreeRTOS/tasks.c ****                          * each task in the Suspended state. */
2569:./Drivers/FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3673              		.loc 1 2569 85
 3674 00c6 7A69     		ldr	r2, [r7, #20]
 3675 00c8 1346     		mov	r3, r2
 3676 00ca DB00     		lsls	r3, r3, #3
 3677 00cc 1344     		add	r3, r3, r2
 3678 00ce 9B00     		lsls	r3, r3, #2
 3679 00d0 1A46     		mov	r2, r3
 3680              		.loc 1 2569 35
 3681 00d2 FB68     		ldr	r3, [r7, #12]
 3682 00d4 1344     		add	r3, r3, r2
 3683 00d6 0322     		movs	r2, #3
 3684 00d8 0F49     		ldr	r1, .L207+20
 3685 00da 1846     		mov	r0, r3
 3686 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3687 00e0 0246     		mov	r2, r0
 3688              		.loc 1 2569 32
 3689 00e2 7B69     		ldr	r3, [r7, #20]
 3690 00e4 1344     		add	r3, r3, r2
 3691 00e6 7B61     		str	r3, [r7, #20]
2570:./Drivers/FreeRTOS/tasks.c ****                     }
2571:./Drivers/FreeRTOS/tasks.c ****                 #endif
2572:./Drivers/FreeRTOS/tasks.c **** 
2573:./Drivers/FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2574:./Drivers/FreeRTOS/tasks.c ****                     {
2575:./Drivers/FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2576:./Drivers/FreeRTOS/tasks.c ****                         {
2577:./Drivers/FreeRTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2578:./Drivers/FreeRTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2579:./Drivers/FreeRTOS/tasks.c ****                             #else
2580:./Drivers/FreeRTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2581:./Drivers/FreeRTOS/tasks.c ****                             #endif
2582:./Drivers/FreeRTOS/tasks.c ****                         }
2583:./Drivers/FreeRTOS/tasks.c ****                     }
2584:./Drivers/FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2585:./Drivers/FreeRTOS/tasks.c ****                     {
2586:./Drivers/FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
 3692              		.loc 1 2586 27
 3693 00e8 7B68     		ldr	r3, [r7, #4]
 3694 00ea 002B     		cmp	r3, #0
 3695 00ec 02D0     		beq	.L204
2587:./Drivers/FreeRTOS/tasks.c ****                         {
2588:./Drivers/FreeRTOS/tasks.c ****                             *pulTotalRunTime = 0;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 115


 3696              		.loc 1 2588 46
 3697 00ee 7B68     		ldr	r3, [r7, #4]
 3698 00f0 0022     		movs	r2, #0
 3699 00f2 1A60     		str	r2, [r3]
 3700              	.L204:
2589:./Drivers/FreeRTOS/tasks.c ****                         }
2590:./Drivers/FreeRTOS/tasks.c ****                     }
2591:./Drivers/FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2592:./Drivers/FreeRTOS/tasks.c ****             }
2593:./Drivers/FreeRTOS/tasks.c ****             else
2594:./Drivers/FreeRTOS/tasks.c ****             {
2595:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2596:./Drivers/FreeRTOS/tasks.c ****             }
2597:./Drivers/FreeRTOS/tasks.c ****         }
2598:./Drivers/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3701              		.loc 1 2598 18
 3702 00f4 FFF7FEFF 		bl	xTaskResumeAll
2599:./Drivers/FreeRTOS/tasks.c **** 
2600:./Drivers/FreeRTOS/tasks.c ****         return uxTask;
 3703              		.loc 1 2600 16
 3704 00f8 7B69     		ldr	r3, [r7, #20]
2601:./Drivers/FreeRTOS/tasks.c ****     }
 3705              		.loc 1 2601 5
 3706 00fa 1846     		mov	r0, r3
 3707 00fc 1837     		adds	r7, r7, #24
 3708              	.LCFI114:
 3709              		.cfi_def_cfa_offset 8
 3710 00fe BD46     		mov	sp, r7
 3711              	.LCFI115:
 3712              		.cfi_def_cfa_register 13
 3713              		@ sp needed
 3714 0100 80BD     		pop	{r7, pc}
 3715              	.L208:
 3716 0102 00BF     		.align	2
 3717              	.L207:
 3718 0104 00000000 		.word	uxCurrentNumberOfTasks
 3719 0108 00000000 		.word	pxReadyTasksLists
 3720 010c 00000000 		.word	pxDelayedTaskList
 3721 0110 00000000 		.word	pxOverflowDelayedTaskList
 3722 0114 00000000 		.word	xTasksWaitingTermination
 3723 0118 00000000 		.word	xSuspendedTaskList
 3724              		.cfi_endproc
 3725              	.LFE27:
 3727              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3728              		.align	1
 3729              		.global	xTaskCatchUpTicks
 3730              		.syntax unified
 3731              		.thumb
 3732              		.thumb_func
 3733              		.fpu fpv4-sp-d16
 3735              	xTaskCatchUpTicks:
 3736              	.LFB28:
2602:./Drivers/FreeRTOS/tasks.c **** 
2603:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2604:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2605:./Drivers/FreeRTOS/tasks.c **** 
2606:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 116


2607:./Drivers/FreeRTOS/tasks.c **** 
2608:./Drivers/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2609:./Drivers/FreeRTOS/tasks.c ****     {
2610:./Drivers/FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2611:./Drivers/FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2612:./Drivers/FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2613:./Drivers/FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2614:./Drivers/FreeRTOS/tasks.c ****     }
2615:./Drivers/FreeRTOS/tasks.c **** 
2616:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2617:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2618:./Drivers/FreeRTOS/tasks.c **** 
2619:./Drivers/FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2620:./Drivers/FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2621:./Drivers/FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2622:./Drivers/FreeRTOS/tasks.c ****  * 1. */
2623:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2624:./Drivers/FreeRTOS/tasks.c **** 
2625:./Drivers/FreeRTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2626:./Drivers/FreeRTOS/tasks.c ****     {
2627:./Drivers/FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2628:./Drivers/FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2629:./Drivers/FreeRTOS/tasks.c ****          * each stepped tick. */
2630:./Drivers/FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2631:./Drivers/FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2632:./Drivers/FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2633:./Drivers/FreeRTOS/tasks.c ****     }
2634:./Drivers/FreeRTOS/tasks.c **** 
2635:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2636:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2637:./Drivers/FreeRTOS/tasks.c **** 
2638:./Drivers/FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2639:./Drivers/FreeRTOS/tasks.c **** {
 3737              		.loc 1 2639 1
 3738              		.cfi_startproc
 3739              		@ args = 0, pretend = 0, frame = 16
 3740              		@ frame_needed = 1, uses_anonymous_args = 0
 3741 0000 80B5     		push	{r7, lr}
 3742              	.LCFI116:
 3743              		.cfi_def_cfa_offset 8
 3744              		.cfi_offset 7, -8
 3745              		.cfi_offset 14, -4
 3746 0002 84B0     		sub	sp, sp, #16
 3747              	.LCFI117:
 3748              		.cfi_def_cfa_offset 24
 3749 0004 00AF     		add	r7, sp, #0
 3750              	.LCFI118:
 3751              		.cfi_def_cfa_register 7
 3752 0006 7860     		str	r0, [r7, #4]
2640:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2641:./Drivers/FreeRTOS/tasks.c **** 
2642:./Drivers/FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2643:./Drivers/FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2644:./Drivers/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 3753              		.loc 1 2644 5
 3754 0008 0F4B     		ldr	r3, .L213
 3755 000a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 117


 3756 000c 002B     		cmp	r3, #0
 3757 000e 0AD0     		beq	.L210
 3758              	.LBB211:
 3759              	.LBB212:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3760              		.loc 2 198 9
 3761              		.syntax unified
 3762              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3763 0010 4FF05003 			mov r3, #80												
 3764 0014 83F31188 		msr basepri, r3											
 3765 0018 BFF36F8F 		isb														
 3766 001c BFF34F8F 		dsb														
 3767              	
 3768              	@ 0 "" 2
 3769              		.thumb
 3770              		.syntax unified
 3771 0020 BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3772              		.loc 2 206 5
 3773 0022 00BF     		nop
 3774              	.L211:
 3775              	.LBE212:
 3776              	.LBE211:
 3777              		.loc 1 2644 5 discriminator 1
 3778 0024 FEE7     		b	.L211
 3779              	.L210:
2645:./Drivers/FreeRTOS/tasks.c **** 
2646:./Drivers/FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2647:./Drivers/FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2648:./Drivers/FreeRTOS/tasks.c ****     vTaskSuspendAll();
 3780              		.loc 1 2648 5
 3781 0026 FFF7FEFF 		bl	vTaskSuspendAll
2649:./Drivers/FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3782              		.loc 1 2649 18
 3783 002a 084B     		ldr	r3, .L213+4
 3784 002c 1A68     		ldr	r2, [r3]
 3785 002e 7B68     		ldr	r3, [r7, #4]
 3786 0030 1344     		add	r3, r3, r2
 3787 0032 064A     		ldr	r2, .L213+4
 3788 0034 1360     		str	r3, [r2]
2650:./Drivers/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3789              		.loc 1 2650 22
 3790 0036 FFF7FEFF 		bl	xTaskResumeAll
 3791 003a F860     		str	r0, [r7, #12]
2651:./Drivers/FreeRTOS/tasks.c **** 
2652:./Drivers/FreeRTOS/tasks.c ****     return xYieldOccurred;
 3792              		.loc 1 2652 12
 3793 003c FB68     		ldr	r3, [r7, #12]
2653:./Drivers/FreeRTOS/tasks.c **** }
 3794              		.loc 1 2653 1
 3795 003e 1846     		mov	r0, r3
 3796 0040 1037     		adds	r7, r7, #16
 3797              	.LCFI119:
 3798              		.cfi_def_cfa_offset 8
 3799 0042 BD46     		mov	sp, r7
 3800              	.LCFI120:
 3801              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 118


 3802              		@ sp needed
 3803 0044 80BD     		pop	{r7, pc}
 3804              	.L214:
 3805 0046 00BF     		.align	2
 3806              	.L213:
 3807 0048 00000000 		.word	uxSchedulerSuspended
 3808 004c 00000000 		.word	xPendedTicks
 3809              		.cfi_endproc
 3810              	.LFE28:
 3812              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3813              		.align	1
 3814              		.global	xTaskIncrementTick
 3815              		.syntax unified
 3816              		.thumb
 3817              		.thumb_func
 3818              		.fpu fpv4-sp-d16
 3820              	xTaskIncrementTick:
 3821              	.LFB29:
2654:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2655:./Drivers/FreeRTOS/tasks.c **** 
2656:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2657:./Drivers/FreeRTOS/tasks.c **** 
2658:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2659:./Drivers/FreeRTOS/tasks.c ****     {
2660:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2661:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2662:./Drivers/FreeRTOS/tasks.c **** 
2663:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2664:./Drivers/FreeRTOS/tasks.c **** 
2665:./Drivers/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2666:./Drivers/FreeRTOS/tasks.c ****         {
2667:./Drivers/FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2668:./Drivers/FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2669:./Drivers/FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2670:./Drivers/FreeRTOS/tasks.c ****             {
2671:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2672:./Drivers/FreeRTOS/tasks.c **** 
2673:./Drivers/FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2674:./Drivers/FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2675:./Drivers/FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2676:./Drivers/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2677:./Drivers/FreeRTOS/tasks.c **** 
2678:./Drivers/FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2679:./Drivers/FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2680:./Drivers/FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2681:./Drivers/FreeRTOS/tasks.c ****                  * is used. */
2682:./Drivers/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2683:./Drivers/FreeRTOS/tasks.c ****                 {
2684:./Drivers/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2685:./Drivers/FreeRTOS/tasks.c ****                     {
2686:./Drivers/FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2687:./Drivers/FreeRTOS/tasks.c **** 
2688:./Drivers/FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2689:./Drivers/FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2690:./Drivers/FreeRTOS/tasks.c ****                          * then block again. */
2691:./Drivers/FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2692:./Drivers/FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 119


2693:./Drivers/FreeRTOS/tasks.c ****                     else
2694:./Drivers/FreeRTOS/tasks.c ****                     {
2695:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2696:./Drivers/FreeRTOS/tasks.c ****                     }
2697:./Drivers/FreeRTOS/tasks.c ****                 }
2698:./Drivers/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2699:./Drivers/FreeRTOS/tasks.c **** 
2700:./Drivers/FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2701:./Drivers/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2702:./Drivers/FreeRTOS/tasks.c **** 
2703:./Drivers/FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2704:./Drivers/FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2705:./Drivers/FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2706:./Drivers/FreeRTOS/tasks.c ****                     {
2707:./Drivers/FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2708:./Drivers/FreeRTOS/tasks.c ****                          * performed if the unblocked task has a priority that is
2709:./Drivers/FreeRTOS/tasks.c ****                          * higher than the currently executing task. */
2710:./Drivers/FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2711:./Drivers/FreeRTOS/tasks.c ****                         {
2712:./Drivers/FreeRTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2713:./Drivers/FreeRTOS/tasks.c ****                              * is unsuspended. */
2714:./Drivers/FreeRTOS/tasks.c ****                             xYieldPending = pdTRUE;
2715:./Drivers/FreeRTOS/tasks.c ****                         }
2716:./Drivers/FreeRTOS/tasks.c ****                         else
2717:./Drivers/FreeRTOS/tasks.c ****                         {
2718:./Drivers/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2719:./Drivers/FreeRTOS/tasks.c ****                         }
2720:./Drivers/FreeRTOS/tasks.c ****                     }
2721:./Drivers/FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2722:./Drivers/FreeRTOS/tasks.c ****             }
2723:./Drivers/FreeRTOS/tasks.c ****             else
2724:./Drivers/FreeRTOS/tasks.c ****             {
2725:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2726:./Drivers/FreeRTOS/tasks.c ****             }
2727:./Drivers/FreeRTOS/tasks.c ****         }
2728:./Drivers/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2729:./Drivers/FreeRTOS/tasks.c **** 
2730:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
2731:./Drivers/FreeRTOS/tasks.c ****     }
2732:./Drivers/FreeRTOS/tasks.c **** 
2733:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2734:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2735:./Drivers/FreeRTOS/tasks.c **** 
2736:./Drivers/FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2737:./Drivers/FreeRTOS/tasks.c **** {
 3822              		.loc 1 2737 1
 3823              		.cfi_startproc
 3824              		@ args = 0, pretend = 0, frame = 40
 3825              		@ frame_needed = 1, uses_anonymous_args = 0
 3826 0000 80B5     		push	{r7, lr}
 3827              	.LCFI121:
 3828              		.cfi_def_cfa_offset 8
 3829              		.cfi_offset 7, -8
 3830              		.cfi_offset 14, -4
 3831 0002 8AB0     		sub	sp, sp, #40
 3832              	.LCFI122:
 3833              		.cfi_def_cfa_offset 48
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 120


 3834 0004 00AF     		add	r7, sp, #0
 3835              	.LCFI123:
 3836              		.cfi_def_cfa_register 7
2738:./Drivers/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2739:./Drivers/FreeRTOS/tasks.c ****     TickType_t xItemValue;
2740:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3837              		.loc 1 2740 16
 3838 0006 0023     		movs	r3, #0
 3839 0008 7B62     		str	r3, [r7, #36]
2741:./Drivers/FreeRTOS/tasks.c **** 
2742:./Drivers/FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2743:./Drivers/FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2744:./Drivers/FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2745:./Drivers/FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2746:./Drivers/FreeRTOS/tasks.c **** 
2747:./Drivers/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3840              		.loc 1 2747 30
 3841 000a 7D4B     		ldr	r3, .L231
 3842 000c 1B68     		ldr	r3, [r3]
 3843              		.loc 1 2747 7
 3844 000e 002B     		cmp	r3, #0
 3845 0010 40F0EC80 		bne	.L216
 3846              	.LBB213:
2748:./Drivers/FreeRTOS/tasks.c ****     {
2749:./Drivers/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2750:./Drivers/FreeRTOS/tasks.c ****          * block. */
2751:./Drivers/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3847              		.loc 1 2751 55
 3848 0014 7B4B     		ldr	r3, .L231+4
 3849 0016 1B68     		ldr	r3, [r3]
 3850              		.loc 1 2751 26
 3851 0018 0133     		adds	r3, r3, #1
 3852 001a 3B62     		str	r3, [r7, #32]
2752:./Drivers/FreeRTOS/tasks.c **** 
2753:./Drivers/FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2754:./Drivers/FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2755:./Drivers/FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
 3853              		.loc 1 2755 20
 3854 001c 794A     		ldr	r2, .L231+4
 3855 001e 3B6A     		ldr	r3, [r7, #32]
 3856 0020 1360     		str	r3, [r2]
2756:./Drivers/FreeRTOS/tasks.c **** 
2757:./Drivers/FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 3857              		.loc 1 2757 11
 3858 0022 3B6A     		ldr	r3, [r7, #32]
 3859 0024 002B     		cmp	r3, #0
 3860 0026 20D1     		bne	.L217
 3861              	.LBB214:
2758:./Drivers/FreeRTOS/tasks.c ****         {
2759:./Drivers/FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 3862              		.loc 1 2759 13
 3863 0028 774B     		ldr	r3, .L231+8
 3864 002a 1B68     		ldr	r3, [r3]
 3865 002c 1B68     		ldr	r3, [r3]
 3866 002e 002B     		cmp	r3, #0
 3867 0030 0AD0     		beq	.L218
 3868              	.LBB215:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 121


 3869              	.LBB216:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3870              		.loc 2 198 9
 3871              		.syntax unified
 3872              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3873 0032 4FF05003 			mov r3, #80												
 3874 0036 83F31188 		msr basepri, r3											
 3875 003a BFF36F8F 		isb														
 3876 003e BFF34F8F 		dsb														
 3877              	
 3878              	@ 0 "" 2
 3879              		.thumb
 3880              		.syntax unified
 3881 0042 7B60     		str	r3, [r7, #4]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3882              		.loc 2 206 5
 3883 0044 00BF     		nop
 3884              	.L219:
 3885              	.LBE216:
 3886              	.LBE215:
 3887              		.loc 1 2759 13 discriminator 1
 3888 0046 FEE7     		b	.L219
 3889              	.L218:
 3890              		.loc 1 2759 13 is_stmt 0 discriminator 2
 3891 0048 6F4B     		ldr	r3, .L231+8
 3892 004a 1B68     		ldr	r3, [r3]
 3893 004c FB61     		str	r3, [r7, #28]
 3894 004e 6F4B     		ldr	r3, .L231+12
 3895 0050 1B68     		ldr	r3, [r3]
 3896 0052 6D4A     		ldr	r2, .L231+8
 3897 0054 1360     		str	r3, [r2]
 3898 0056 6D4A     		ldr	r2, .L231+12
 3899 0058 FB69     		ldr	r3, [r7, #28]
 3900 005a 1360     		str	r3, [r2]
 3901 005c 6C4B     		ldr	r3, .L231+16
 3902 005e 1B68     		ldr	r3, [r3]
 3903 0060 0133     		adds	r3, r3, #1
 3904 0062 6B4A     		ldr	r2, .L231+16
 3905 0064 1360     		str	r3, [r2]
 3906 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3907              	.L217:
 3908              	.LBE214:
2760:./Drivers/FreeRTOS/tasks.c ****         }
2761:./Drivers/FreeRTOS/tasks.c ****         else
2762:./Drivers/FreeRTOS/tasks.c ****         {
2763:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2764:./Drivers/FreeRTOS/tasks.c ****         }
2765:./Drivers/FreeRTOS/tasks.c **** 
2766:./Drivers/FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2767:./Drivers/FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2768:./Drivers/FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2769:./Drivers/FreeRTOS/tasks.c ****          * look any further down the list. */
2770:./Drivers/FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 3909              		.loc 1 2770 29 is_stmt 1
 3910 006a 6A4B     		ldr	r3, .L231+20
 3911 006c 1B68     		ldr	r3, [r3]
 3912              		.loc 1 2770 11
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 122


 3913 006e 3A6A     		ldr	r2, [r7, #32]
 3914 0070 9A42     		cmp	r2, r3
 3915 0072 C0F0A680 		bcc	.L220
 3916              	.L227:
2771:./Drivers/FreeRTOS/tasks.c ****         {
2772:./Drivers/FreeRTOS/tasks.c ****             for( ; ; )
2773:./Drivers/FreeRTOS/tasks.c ****             {
2774:./Drivers/FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3917              		.loc 1 2774 21
 3918 0076 644B     		ldr	r3, .L231+8
 3919 0078 1B68     		ldr	r3, [r3]
 3920 007a 1B68     		ldr	r3, [r3]
 3921              		.loc 1 2774 19
 3922 007c 002B     		cmp	r3, #0
 3923 007e 04D1     		bne	.L221
2775:./Drivers/FreeRTOS/tasks.c ****                 {
2776:./Drivers/FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2777:./Drivers/FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2778:./Drivers/FreeRTOS/tasks.c ****                      * unlikely that the
2779:./Drivers/FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2780:./Drivers/FreeRTOS/tasks.c ****                      * next time through. */
2781:./Drivers/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 3924              		.loc 1 2781 42
 3925 0080 644B     		ldr	r3, .L231+20
 3926 0082 4FF0FF32 		mov	r2, #-1
 3927 0086 1A60     		str	r2, [r3]
2782:./Drivers/FreeRTOS/tasks.c ****                     break;
 3928              		.loc 1 2782 21
 3929 0088 9BE0     		b	.L220
 3930              	.L221:
2783:./Drivers/FreeRTOS/tasks.c ****                 }
2784:./Drivers/FreeRTOS/tasks.c ****                 else
2785:./Drivers/FreeRTOS/tasks.c ****                 {
2786:./Drivers/FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2787:./Drivers/FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2788:./Drivers/FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2789:./Drivers/FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2790:./Drivers/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 3931              		.loc 1 2790 29
 3932 008a 5F4B     		ldr	r3, .L231+8
 3933 008c 1B68     		ldr	r3, [r3]
 3934 008e DB68     		ldr	r3, [r3, #12]
 3935              		.loc 1 2790 27
 3936 0090 DB68     		ldr	r3, [r3, #12]
 3937 0092 BB61     		str	r3, [r7, #24]
2791:./Drivers/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3938              		.loc 1 2791 32
 3939 0094 BB69     		ldr	r3, [r7, #24]
 3940 0096 5B68     		ldr	r3, [r3, #4]
 3941 0098 7B61     		str	r3, [r7, #20]
2792:./Drivers/FreeRTOS/tasks.c **** 
2793:./Drivers/FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
 3942              		.loc 1 2793 23
 3943 009a 3A6A     		ldr	r2, [r7, #32]
 3944 009c 7B69     		ldr	r3, [r7, #20]
 3945 009e 9A42     		cmp	r2, r3
 3946 00a0 03D2     		bcs	.L222
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 123


2794:./Drivers/FreeRTOS/tasks.c ****                     {
2795:./Drivers/FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2796:./Drivers/FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2797:./Drivers/FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2798:./Drivers/FreeRTOS/tasks.c ****                          * state -  so record the item value in
2799:./Drivers/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2800:./Drivers/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 3947              		.loc 1 2800 46
 3948 00a2 5C4A     		ldr	r2, .L231+20
 3949 00a4 7B69     		ldr	r3, [r7, #20]
 3950 00a6 1360     		str	r3, [r2]
2801:./Drivers/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3951              		.loc 1 2801 25
 3952 00a8 8BE0     		b	.L220
 3953              	.L222:
 3954              	.LBB217:
2802:./Drivers/FreeRTOS/tasks.c ****                     }
2803:./Drivers/FreeRTOS/tasks.c ****                     else
2804:./Drivers/FreeRTOS/tasks.c ****                     {
2805:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2806:./Drivers/FreeRTOS/tasks.c ****                     }
2807:./Drivers/FreeRTOS/tasks.c **** 
2808:./Drivers/FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2809:./Drivers/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 3955              		.loc 1 2809 21
 3956 00aa BB69     		ldr	r3, [r7, #24]
 3957 00ac 5B69     		ldr	r3, [r3, #20]
 3958 00ae 3B61     		str	r3, [r7, #16]
 3959 00b0 BB69     		ldr	r3, [r7, #24]
 3960 00b2 9B68     		ldr	r3, [r3, #8]
 3961 00b4 BA69     		ldr	r2, [r7, #24]
 3962 00b6 D268     		ldr	r2, [r2, #12]
 3963 00b8 9A60     		str	r2, [r3, #8]
 3964 00ba BB69     		ldr	r3, [r7, #24]
 3965 00bc DB68     		ldr	r3, [r3, #12]
 3966 00be BA69     		ldr	r2, [r7, #24]
 3967 00c0 9268     		ldr	r2, [r2, #8]
 3968 00c2 5A60     		str	r2, [r3, #4]
 3969 00c4 3B69     		ldr	r3, [r7, #16]
 3970 00c6 5A68     		ldr	r2, [r3, #4]
 3971 00c8 BB69     		ldr	r3, [r7, #24]
 3972 00ca 0433     		adds	r3, r3, #4
 3973 00cc 9A42     		cmp	r2, r3
 3974 00ce 03D1     		bne	.L223
 3975              		.loc 1 2809 21 is_stmt 0 discriminator 1
 3976 00d0 BB69     		ldr	r3, [r7, #24]
 3977 00d2 DA68     		ldr	r2, [r3, #12]
 3978 00d4 3B69     		ldr	r3, [r7, #16]
 3979 00d6 5A60     		str	r2, [r3, #4]
 3980              	.L223:
 3981              		.loc 1 2809 21 discriminator 3
 3982 00d8 BB69     		ldr	r3, [r7, #24]
 3983 00da 0022     		movs	r2, #0
 3984 00dc 5A61     		str	r2, [r3, #20]
 3985 00de 3B69     		ldr	r3, [r7, #16]
 3986 00e0 1B68     		ldr	r3, [r3]
 3987 00e2 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 124


 3988 00e4 3B69     		ldr	r3, [r7, #16]
 3989 00e6 1A60     		str	r2, [r3]
 3990              	.LBE217:
2810:./Drivers/FreeRTOS/tasks.c **** 
2811:./Drivers/FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2812:./Drivers/FreeRTOS/tasks.c ****                      * it from the event list. */
2813:./Drivers/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3991              		.loc 1 2813 25 is_stmt 1 discriminator 3
 3992 00e8 BB69     		ldr	r3, [r7, #24]
 3993 00ea 9B6A     		ldr	r3, [r3, #40]
 3994              		.loc 1 2813 23 discriminator 3
 3995 00ec 002B     		cmp	r3, #0
 3996 00ee 1ED0     		beq	.L224
 3997              	.LBB218:
2814:./Drivers/FreeRTOS/tasks.c ****                     {
2815:./Drivers/FreeRTOS/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 3998              		.loc 1 2815 25
 3999 00f0 BB69     		ldr	r3, [r7, #24]
 4000 00f2 9B6A     		ldr	r3, [r3, #40]
 4001 00f4 FB60     		str	r3, [r7, #12]
 4002 00f6 BB69     		ldr	r3, [r7, #24]
 4003 00f8 DB69     		ldr	r3, [r3, #28]
 4004 00fa BA69     		ldr	r2, [r7, #24]
 4005 00fc 126A     		ldr	r2, [r2, #32]
 4006 00fe 9A60     		str	r2, [r3, #8]
 4007 0100 BB69     		ldr	r3, [r7, #24]
 4008 0102 1B6A     		ldr	r3, [r3, #32]
 4009 0104 BA69     		ldr	r2, [r7, #24]
 4010 0106 D269     		ldr	r2, [r2, #28]
 4011 0108 5A60     		str	r2, [r3, #4]
 4012 010a FB68     		ldr	r3, [r7, #12]
 4013 010c 5A68     		ldr	r2, [r3, #4]
 4014 010e BB69     		ldr	r3, [r7, #24]
 4015 0110 1833     		adds	r3, r3, #24
 4016 0112 9A42     		cmp	r2, r3
 4017 0114 03D1     		bne	.L225
 4018              		.loc 1 2815 25 is_stmt 0 discriminator 1
 4019 0116 BB69     		ldr	r3, [r7, #24]
 4020 0118 1A6A     		ldr	r2, [r3, #32]
 4021 011a FB68     		ldr	r3, [r7, #12]
 4022 011c 5A60     		str	r2, [r3, #4]
 4023              	.L225:
 4024              		.loc 1 2815 25 discriminator 3
 4025 011e BB69     		ldr	r3, [r7, #24]
 4026 0120 0022     		movs	r2, #0
 4027 0122 9A62     		str	r2, [r3, #40]
 4028 0124 FB68     		ldr	r3, [r7, #12]
 4029 0126 1B68     		ldr	r3, [r3]
 4030 0128 5A1E     		subs	r2, r3, #1
 4031 012a FB68     		ldr	r3, [r7, #12]
 4032 012c 1A60     		str	r2, [r3]
 4033              	.L224:
 4034              	.LBE218:
2816:./Drivers/FreeRTOS/tasks.c ****                     }
2817:./Drivers/FreeRTOS/tasks.c ****                     else
2818:./Drivers/FreeRTOS/tasks.c ****                     {
2819:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 125


2820:./Drivers/FreeRTOS/tasks.c ****                     }
2821:./Drivers/FreeRTOS/tasks.c **** 
2822:./Drivers/FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2823:./Drivers/FreeRTOS/tasks.c ****                      * list. */
2824:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4035              		.loc 1 2824 21 is_stmt 1
 4036 012e BB69     		ldr	r3, [r7, #24]
 4037 0130 DB6A     		ldr	r3, [r3, #44]
 4038 0132 0122     		movs	r2, #1
 4039 0134 9A40     		lsls	r2, r2, r3
 4040 0136 384B     		ldr	r3, .L231+24
 4041 0138 1B68     		ldr	r3, [r3]
 4042 013a 1343     		orrs	r3, r3, r2
 4043 013c 364A     		ldr	r2, .L231+24
 4044 013e 1360     		str	r3, [r2]
 4045              	.LBB219:
 4046 0140 BB69     		ldr	r3, [r7, #24]
 4047 0142 DA6A     		ldr	r2, [r3, #44]
 4048 0144 3549     		ldr	r1, .L231+28
 4049 0146 1346     		mov	r3, r2
 4050 0148 9B00     		lsls	r3, r3, #2
 4051 014a 1344     		add	r3, r3, r2
 4052 014c 9B00     		lsls	r3, r3, #2
 4053 014e 0B44     		add	r3, r3, r1
 4054 0150 0433     		adds	r3, r3, #4
 4055 0152 1B68     		ldr	r3, [r3]
 4056 0154 BB60     		str	r3, [r7, #8]
 4057 0156 BB69     		ldr	r3, [r7, #24]
 4058 0158 BA68     		ldr	r2, [r7, #8]
 4059 015a 9A60     		str	r2, [r3, #8]
 4060 015c BB68     		ldr	r3, [r7, #8]
 4061 015e 9A68     		ldr	r2, [r3, #8]
 4062 0160 BB69     		ldr	r3, [r7, #24]
 4063 0162 DA60     		str	r2, [r3, #12]
 4064 0164 BB68     		ldr	r3, [r7, #8]
 4065 0166 9B68     		ldr	r3, [r3, #8]
 4066 0168 BA69     		ldr	r2, [r7, #24]
 4067 016a 0432     		adds	r2, r2, #4
 4068 016c 5A60     		str	r2, [r3, #4]
 4069 016e BB69     		ldr	r3, [r7, #24]
 4070 0170 1A1D     		adds	r2, r3, #4
 4071 0172 BB68     		ldr	r3, [r7, #8]
 4072 0174 9A60     		str	r2, [r3, #8]
 4073 0176 BB69     		ldr	r3, [r7, #24]
 4074 0178 DA6A     		ldr	r2, [r3, #44]
 4075 017a 1346     		mov	r3, r2
 4076 017c 9B00     		lsls	r3, r3, #2
 4077 017e 1344     		add	r3, r3, r2
 4078 0180 9B00     		lsls	r3, r3, #2
 4079 0182 264A     		ldr	r2, .L231+28
 4080 0184 1A44     		add	r2, r2, r3
 4081 0186 BB69     		ldr	r3, [r7, #24]
 4082 0188 5A61     		str	r2, [r3, #20]
 4083 018a BB69     		ldr	r3, [r7, #24]
 4084 018c DA6A     		ldr	r2, [r3, #44]
 4085 018e 2349     		ldr	r1, .L231+28
 4086 0190 1346     		mov	r3, r2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 126


 4087 0192 9B00     		lsls	r3, r3, #2
 4088 0194 1344     		add	r3, r3, r2
 4089 0196 9B00     		lsls	r3, r3, #2
 4090 0198 0B44     		add	r3, r3, r1
 4091 019a 1B68     		ldr	r3, [r3]
 4092 019c 591C     		adds	r1, r3, #1
 4093 019e 1F48     		ldr	r0, .L231+28
 4094 01a0 1346     		mov	r3, r2
 4095 01a2 9B00     		lsls	r3, r3, #2
 4096 01a4 1344     		add	r3, r3, r2
 4097 01a6 9B00     		lsls	r3, r3, #2
 4098 01a8 0344     		add	r3, r3, r0
 4099 01aa 1960     		str	r1, [r3]
 4100              	.LBE219:
2825:./Drivers/FreeRTOS/tasks.c **** 
2826:./Drivers/FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2827:./Drivers/FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2828:./Drivers/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2829:./Drivers/FreeRTOS/tasks.c ****                         {
2830:./Drivers/FreeRTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2831:./Drivers/FreeRTOS/tasks.c ****                              * only be performed if the unblocked task has a
2832:./Drivers/FreeRTOS/tasks.c ****                              * priority that is equal to or higher than the
2833:./Drivers/FreeRTOS/tasks.c ****                              * currently executing task. */
2834:./Drivers/FreeRTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 4101              		.loc 1 2834 38
 4102 01ac BB69     		ldr	r3, [r7, #24]
 4103 01ae DA6A     		ldr	r2, [r3, #44]
 4104              		.loc 1 2834 66
 4105 01b0 1B4B     		ldr	r3, .L231+32
 4106 01b2 1B68     		ldr	r3, [r3]
 4107 01b4 DB6A     		ldr	r3, [r3, #44]
 4108              		.loc 1 2834 31
 4109 01b6 9A42     		cmp	r2, r3
 4110 01b8 FFF45DAF 		bcc	.L227
2835:./Drivers/FreeRTOS/tasks.c ****                             {
2836:./Drivers/FreeRTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
 4111              		.loc 1 2836 49
 4112 01bc 0123     		movs	r3, #1
 4113 01be 7B62     		str	r3, [r7, #36]
2774:./Drivers/FreeRTOS/tasks.c ****                 {
 4114              		.loc 1 2774 19
 4115 01c0 59E7     		b	.L227
 4116              	.L220:
2837:./Drivers/FreeRTOS/tasks.c ****                             }
2838:./Drivers/FreeRTOS/tasks.c ****                             else
2839:./Drivers/FreeRTOS/tasks.c ****                             {
2840:./Drivers/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2841:./Drivers/FreeRTOS/tasks.c ****                             }
2842:./Drivers/FreeRTOS/tasks.c ****                         }
2843:./Drivers/FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2844:./Drivers/FreeRTOS/tasks.c ****                 }
2845:./Drivers/FreeRTOS/tasks.c ****             }
2846:./Drivers/FreeRTOS/tasks.c ****         }
2847:./Drivers/FreeRTOS/tasks.c **** 
2848:./Drivers/FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2849:./Drivers/FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2850:./Drivers/FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 127


2851:./Drivers/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2852:./Drivers/FreeRTOS/tasks.c ****             {
2853:./Drivers/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
 4117              		.loc 1 2853 21
 4118 01c2 174B     		ldr	r3, .L231+32
 4119 01c4 1B68     		ldr	r3, [r3]
 4120 01c6 DA6A     		ldr	r2, [r3, #44]
 4121 01c8 1449     		ldr	r1, .L231+28
 4122 01ca 1346     		mov	r3, r2
 4123 01cc 9B00     		lsls	r3, r3, #2
 4124 01ce 1344     		add	r3, r3, r2
 4125 01d0 9B00     		lsls	r3, r3, #2
 4126 01d2 0B44     		add	r3, r3, r1
 4127 01d4 1B68     		ldr	r3, [r3]
 4128              		.loc 1 2853 19
 4129 01d6 012B     		cmp	r3, #1
 4130 01d8 01D9     		bls	.L228
2854:./Drivers/FreeRTOS/tasks.c ****                 {
2855:./Drivers/FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 4131              		.loc 1 2855 37
 4132 01da 0123     		movs	r3, #1
 4133 01dc 7B62     		str	r3, [r7, #36]
 4134              	.L228:
2856:./Drivers/FreeRTOS/tasks.c ****                 }
2857:./Drivers/FreeRTOS/tasks.c ****                 else
2858:./Drivers/FreeRTOS/tasks.c ****                 {
2859:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2860:./Drivers/FreeRTOS/tasks.c ****                 }
2861:./Drivers/FreeRTOS/tasks.c ****             }
2862:./Drivers/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2863:./Drivers/FreeRTOS/tasks.c **** 
2864:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2865:./Drivers/FreeRTOS/tasks.c ****             {
2866:./Drivers/FreeRTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2867:./Drivers/FreeRTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2868:./Drivers/FreeRTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2869:./Drivers/FreeRTOS/tasks.c ****                 {
2870:./Drivers/FreeRTOS/tasks.c ****                     vApplicationTickHook();
2871:./Drivers/FreeRTOS/tasks.c ****                 }
2872:./Drivers/FreeRTOS/tasks.c ****                 else
2873:./Drivers/FreeRTOS/tasks.c ****                 {
2874:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2875:./Drivers/FreeRTOS/tasks.c ****                 }
2876:./Drivers/FreeRTOS/tasks.c ****             }
2877:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2878:./Drivers/FreeRTOS/tasks.c **** 
2879:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2880:./Drivers/FreeRTOS/tasks.c ****             {
2881:./Drivers/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 4135              		.loc 1 2881 35
 4136 01de 114B     		ldr	r3, .L231+36
 4137 01e0 1B68     		ldr	r3, [r3]
 4138              		.loc 1 2881 19
 4139 01e2 002B     		cmp	r3, #0
 4140 01e4 07D0     		beq	.L229
2882:./Drivers/FreeRTOS/tasks.c ****                 {
2883:./Drivers/FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 128


 4141              		.loc 1 2883 37
 4142 01e6 0123     		movs	r3, #1
 4143 01e8 7B62     		str	r3, [r7, #36]
 4144 01ea 04E0     		b	.L229
 4145              	.L216:
 4146              	.LBE213:
2884:./Drivers/FreeRTOS/tasks.c ****                 }
2885:./Drivers/FreeRTOS/tasks.c ****                 else
2886:./Drivers/FreeRTOS/tasks.c ****                 {
2887:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2888:./Drivers/FreeRTOS/tasks.c ****                 }
2889:./Drivers/FreeRTOS/tasks.c ****             }
2890:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2891:./Drivers/FreeRTOS/tasks.c ****     }
2892:./Drivers/FreeRTOS/tasks.c ****     else
2893:./Drivers/FreeRTOS/tasks.c ****     {
2894:./Drivers/FreeRTOS/tasks.c ****         ++xPendedTicks;
 4147              		.loc 1 2894 9
 4148 01ec 0E4B     		ldr	r3, .L231+40
 4149 01ee 1B68     		ldr	r3, [r3]
 4150 01f0 0133     		adds	r3, r3, #1
 4151 01f2 0D4A     		ldr	r2, .L231+40
 4152 01f4 1360     		str	r3, [r2]
 4153              	.L229:
2895:./Drivers/FreeRTOS/tasks.c **** 
2896:./Drivers/FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2897:./Drivers/FreeRTOS/tasks.c ****          * scheduler is locked. */
2898:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2899:./Drivers/FreeRTOS/tasks.c ****             {
2900:./Drivers/FreeRTOS/tasks.c ****                 vApplicationTickHook();
2901:./Drivers/FreeRTOS/tasks.c ****             }
2902:./Drivers/FreeRTOS/tasks.c ****         #endif
2903:./Drivers/FreeRTOS/tasks.c ****     }
2904:./Drivers/FreeRTOS/tasks.c **** 
2905:./Drivers/FreeRTOS/tasks.c ****     return xSwitchRequired;
 4154              		.loc 1 2905 12
 4155 01f6 7B6A     		ldr	r3, [r7, #36]
2906:./Drivers/FreeRTOS/tasks.c **** }
 4156              		.loc 1 2906 1
 4157 01f8 1846     		mov	r0, r3
 4158 01fa 2837     		adds	r7, r7, #40
 4159              	.LCFI124:
 4160              		.cfi_def_cfa_offset 8
 4161 01fc BD46     		mov	sp, r7
 4162              	.LCFI125:
 4163              		.cfi_def_cfa_register 13
 4164              		@ sp needed
 4165 01fe 80BD     		pop	{r7, pc}
 4166              	.L232:
 4167              		.align	2
 4168              	.L231:
 4169 0200 00000000 		.word	uxSchedulerSuspended
 4170 0204 00000000 		.word	xTickCount
 4171 0208 00000000 		.word	pxDelayedTaskList
 4172 020c 00000000 		.word	pxOverflowDelayedTaskList
 4173 0210 00000000 		.word	xNumOfOverflows
 4174 0214 00000000 		.word	xNextTaskUnblockTime
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 129


 4175 0218 00000000 		.word	uxTopReadyPriority
 4176 021c 00000000 		.word	pxReadyTasksLists
 4177 0220 00000000 		.word	pxCurrentTCB
 4178 0224 00000000 		.word	xYieldPending
 4179 0228 00000000 		.word	xPendedTicks
 4180              		.cfi_endproc
 4181              	.LFE29:
 4183              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4184              		.align	1
 4185              		.global	vTaskSwitchContext
 4186              		.syntax unified
 4187              		.thumb
 4188              		.thumb_func
 4189              		.fpu fpv4-sp-d16
 4191              	vTaskSwitchContext:
 4192              	.LFB30:
2907:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2908:./Drivers/FreeRTOS/tasks.c **** 
2909:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2910:./Drivers/FreeRTOS/tasks.c **** 
2911:./Drivers/FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2912:./Drivers/FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2913:./Drivers/FreeRTOS/tasks.c ****     {
2914:./Drivers/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2915:./Drivers/FreeRTOS/tasks.c **** 
2916:./Drivers/FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2917:./Drivers/FreeRTOS/tasks.c ****          * getting set. */
2918:./Drivers/FreeRTOS/tasks.c ****         if( xTask == NULL )
2919:./Drivers/FreeRTOS/tasks.c ****         {
2920:./Drivers/FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2921:./Drivers/FreeRTOS/tasks.c ****         }
2922:./Drivers/FreeRTOS/tasks.c ****         else
2923:./Drivers/FreeRTOS/tasks.c ****         {
2924:./Drivers/FreeRTOS/tasks.c ****             xTCB = xTask;
2925:./Drivers/FreeRTOS/tasks.c ****         }
2926:./Drivers/FreeRTOS/tasks.c **** 
2927:./Drivers/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2928:./Drivers/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2929:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2930:./Drivers/FreeRTOS/tasks.c ****         {
2931:./Drivers/FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2932:./Drivers/FreeRTOS/tasks.c ****         }
2933:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2934:./Drivers/FreeRTOS/tasks.c ****     }
2935:./Drivers/FreeRTOS/tasks.c **** 
2936:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2937:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2938:./Drivers/FreeRTOS/tasks.c **** 
2939:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2940:./Drivers/FreeRTOS/tasks.c **** 
2941:./Drivers/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2942:./Drivers/FreeRTOS/tasks.c ****     {
2943:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2944:./Drivers/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2945:./Drivers/FreeRTOS/tasks.c **** 
2946:./Drivers/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2947:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 130


2948:./Drivers/FreeRTOS/tasks.c **** 
2949:./Drivers/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2950:./Drivers/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2951:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2952:./Drivers/FreeRTOS/tasks.c ****         {
2953:./Drivers/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2954:./Drivers/FreeRTOS/tasks.c ****         }
2955:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2956:./Drivers/FreeRTOS/tasks.c **** 
2957:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
2958:./Drivers/FreeRTOS/tasks.c ****     }
2959:./Drivers/FreeRTOS/tasks.c **** 
2960:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2961:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2962:./Drivers/FreeRTOS/tasks.c **** 
2963:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2964:./Drivers/FreeRTOS/tasks.c **** 
2965:./Drivers/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2966:./Drivers/FreeRTOS/tasks.c ****     {
2967:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2968:./Drivers/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2969:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2970:./Drivers/FreeRTOS/tasks.c **** 
2971:./Drivers/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2972:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2973:./Drivers/FreeRTOS/tasks.c **** 
2974:./Drivers/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2975:./Drivers/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2976:./Drivers/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2977:./Drivers/FreeRTOS/tasks.c ****         {
2978:./Drivers/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2979:./Drivers/FreeRTOS/tasks.c ****         }
2980:./Drivers/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2981:./Drivers/FreeRTOS/tasks.c **** 
2982:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
2983:./Drivers/FreeRTOS/tasks.c ****     }
2984:./Drivers/FreeRTOS/tasks.c **** 
2985:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2986:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2987:./Drivers/FreeRTOS/tasks.c **** 
2988:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2989:./Drivers/FreeRTOS/tasks.c **** 
2990:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2991:./Drivers/FreeRTOS/tasks.c ****                                              void * pvParameter )
2992:./Drivers/FreeRTOS/tasks.c ****     {
2993:./Drivers/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2994:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2995:./Drivers/FreeRTOS/tasks.c **** 
2996:./Drivers/FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2997:./Drivers/FreeRTOS/tasks.c ****         if( xTask == NULL )
2998:./Drivers/FreeRTOS/tasks.c ****         {
2999:./Drivers/FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
3000:./Drivers/FreeRTOS/tasks.c ****         }
3001:./Drivers/FreeRTOS/tasks.c ****         else
3002:./Drivers/FreeRTOS/tasks.c ****         {
3003:./Drivers/FreeRTOS/tasks.c ****             xTCB = xTask;
3004:./Drivers/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 131


3005:./Drivers/FreeRTOS/tasks.c **** 
3006:./Drivers/FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
3007:./Drivers/FreeRTOS/tasks.c ****         {
3008:./Drivers/FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
3009:./Drivers/FreeRTOS/tasks.c ****         }
3010:./Drivers/FreeRTOS/tasks.c ****         else
3011:./Drivers/FreeRTOS/tasks.c ****         {
3012:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3013:./Drivers/FreeRTOS/tasks.c ****         }
3014:./Drivers/FreeRTOS/tasks.c **** 
3015:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
3016:./Drivers/FreeRTOS/tasks.c ****     }
3017:./Drivers/FreeRTOS/tasks.c **** 
3018:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3019:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3020:./Drivers/FreeRTOS/tasks.c **** 
3021:./Drivers/FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3022:./Drivers/FreeRTOS/tasks.c **** {
 4193              		.loc 1 3022 1
 4194              		.cfi_startproc
 4195              		@ args = 0, pretend = 0, frame = 24
 4196              		@ frame_needed = 1, uses_anonymous_args = 0
 4197              		@ link register save eliminated.
 4198 0000 80B4     		push	{r7}
 4199              	.LCFI126:
 4200              		.cfi_def_cfa_offset 4
 4201              		.cfi_offset 7, -4
 4202 0002 87B0     		sub	sp, sp, #28
 4203              	.LCFI127:
 4204              		.cfi_def_cfa_offset 32
 4205 0004 00AF     		add	r7, sp, #0
 4206              	.LCFI128:
 4207              		.cfi_def_cfa_register 7
3023:./Drivers/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4208              		.loc 1 3023 30
 4209 0006 274B     		ldr	r3, .L241
 4210 0008 1B68     		ldr	r3, [r3]
 4211              		.loc 1 3023 7
 4212 000a 002B     		cmp	r3, #0
 4213 000c 03D0     		beq	.L234
3024:./Drivers/FreeRTOS/tasks.c ****     {
3025:./Drivers/FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3026:./Drivers/FreeRTOS/tasks.c ****          * switch. */
3027:./Drivers/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 4214              		.loc 1 3027 23
 4215 000e 264B     		ldr	r3, .L241+4
 4216 0010 0122     		movs	r2, #1
 4217 0012 1A60     		str	r2, [r3]
3028:./Drivers/FreeRTOS/tasks.c ****     }
3029:./Drivers/FreeRTOS/tasks.c ****     else
3030:./Drivers/FreeRTOS/tasks.c ****     {
3031:./Drivers/FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3032:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3033:./Drivers/FreeRTOS/tasks.c **** 
3034:./Drivers/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3035:./Drivers/FreeRTOS/tasks.c ****             {
3036:./Drivers/FreeRTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 132


3037:./Drivers/FreeRTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3038:./Drivers/FreeRTOS/tasks.c ****                 #else
3039:./Drivers/FreeRTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3040:./Drivers/FreeRTOS/tasks.c ****                 #endif
3041:./Drivers/FreeRTOS/tasks.c **** 
3042:./Drivers/FreeRTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3043:./Drivers/FreeRTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3044:./Drivers/FreeRTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3045:./Drivers/FreeRTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3046:./Drivers/FreeRTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3047:./Drivers/FreeRTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3048:./Drivers/FreeRTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3049:./Drivers/FreeRTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3050:./Drivers/FreeRTOS/tasks.c ****                 {
3051:./Drivers/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3052:./Drivers/FreeRTOS/tasks.c ****                 }
3053:./Drivers/FreeRTOS/tasks.c ****                 else
3054:./Drivers/FreeRTOS/tasks.c ****                 {
3055:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3056:./Drivers/FreeRTOS/tasks.c ****                 }
3057:./Drivers/FreeRTOS/tasks.c **** 
3058:./Drivers/FreeRTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3059:./Drivers/FreeRTOS/tasks.c ****             }
3060:./Drivers/FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3061:./Drivers/FreeRTOS/tasks.c **** 
3062:./Drivers/FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3063:./Drivers/FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3064:./Drivers/FreeRTOS/tasks.c **** 
3065:./Drivers/FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3066:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:./Drivers/FreeRTOS/tasks.c ****             {
3068:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3069:./Drivers/FreeRTOS/tasks.c ****             }
3070:./Drivers/FreeRTOS/tasks.c ****         #endif
3071:./Drivers/FreeRTOS/tasks.c **** 
3072:./Drivers/FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3073:./Drivers/FreeRTOS/tasks.c ****          * optimised asm code. */
3074:./Drivers/FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3075:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3076:./Drivers/FreeRTOS/tasks.c **** 
3077:./Drivers/FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3078:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3079:./Drivers/FreeRTOS/tasks.c ****             {
3080:./Drivers/FreeRTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3081:./Drivers/FreeRTOS/tasks.c ****             }
3082:./Drivers/FreeRTOS/tasks.c ****         #endif
3083:./Drivers/FreeRTOS/tasks.c **** 
3084:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3085:./Drivers/FreeRTOS/tasks.c ****             {
3086:./Drivers/FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3087:./Drivers/FreeRTOS/tasks.c ****                  * structure specific to this task.
3088:./Drivers/FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3089:./Drivers/FreeRTOS/tasks.c ****                  * for additional information. */
3090:./Drivers/FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3091:./Drivers/FreeRTOS/tasks.c ****             }
3092:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3093:./Drivers/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 133


3094:./Drivers/FreeRTOS/tasks.c **** }
 4218              		.loc 1 3094 1
 4219 0014 3FE0     		b	.L240
 4220              	.L234:
3031:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 4221              		.loc 1 3031 23
 4222 0016 244B     		ldr	r3, .L241+4
 4223 0018 0022     		movs	r2, #0
 4224 001a 1A60     		str	r2, [r3]
 4225              	.LBB220:
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4226              		.loc 1 3074 9
 4227 001c 234B     		ldr	r3, .L241+8
 4228 001e 1B68     		ldr	r3, [r3]
 4229 0020 FB60     		str	r3, [r7, #12]
 4230              	.LBB221:
 4231              	.LBB222:
 136:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4232              		.loc 2 136 13
 4233 0022 FB68     		ldr	r3, [r7, #12]
 4234              		.syntax unified
 4235              	@ 136 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4236 0024 B3FA83F3 		clz r3, r3
 4237              	@ 0 "" 2
 4238              		.thumb
 4239              		.syntax unified
 4240 0028 FB72     		strb	r3, [r7, #11]
 138:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 4241              		.loc 2 138 20
 4242 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4243              	.LBE222:
 4244              	.LBE221:
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4245              		.loc 1 3074 9
 4246 002c C3F11F03 		rsb	r3, r3, #31
 4247 0030 7B61     		str	r3, [r7, #20]
 4248 0032 1F49     		ldr	r1, .L241+12
 4249 0034 7A69     		ldr	r2, [r7, #20]
 4250 0036 1346     		mov	r3, r2
 4251 0038 9B00     		lsls	r3, r3, #2
 4252 003a 1344     		add	r3, r3, r2
 4253 003c 9B00     		lsls	r3, r3, #2
 4254 003e 0B44     		add	r3, r3, r1
 4255 0040 1B68     		ldr	r3, [r3]
 4256 0042 002B     		cmp	r3, #0
 4257 0044 0AD1     		bne	.L237
 4258              	.LBB223:
 4259              	.LBB224:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4260              		.loc 2 198 9
 4261              		.syntax unified
 4262              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4263 0046 4FF05003 			mov r3, #80												
 4264 004a 83F31188 		msr basepri, r3											
 4265 004e BFF36F8F 		isb														
 4266 0052 BFF34F8F 		dsb														
 4267              	
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 134


 4268              	@ 0 "" 2
 4269              		.thumb
 4270              		.syntax unified
 4271 0056 7B60     		str	r3, [r7, #4]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4272              		.loc 2 206 5
 4273 0058 00BF     		nop
 4274              	.L238:
 4275              	.LBE224:
 4276              	.LBE223:
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4277              		.loc 1 3074 9 discriminator 1
 4278 005a FEE7     		b	.L238
 4279              	.L237:
 4280              	.LBB225:
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4281              		.loc 1 3074 9 is_stmt 0 discriminator 2
 4282 005c 7A69     		ldr	r2, [r7, #20]
 4283 005e 1346     		mov	r3, r2
 4284 0060 9B00     		lsls	r3, r3, #2
 4285 0062 1344     		add	r3, r3, r2
 4286 0064 9B00     		lsls	r3, r3, #2
 4287 0066 124A     		ldr	r2, .L241+12
 4288 0068 1344     		add	r3, r3, r2
 4289 006a 3B61     		str	r3, [r7, #16]
 4290 006c 3B69     		ldr	r3, [r7, #16]
 4291 006e 5B68     		ldr	r3, [r3, #4]
 4292 0070 5A68     		ldr	r2, [r3, #4]
 4293 0072 3B69     		ldr	r3, [r7, #16]
 4294 0074 5A60     		str	r2, [r3, #4]
 4295 0076 3B69     		ldr	r3, [r7, #16]
 4296 0078 5A68     		ldr	r2, [r3, #4]
 4297 007a 3B69     		ldr	r3, [r7, #16]
 4298 007c 0833     		adds	r3, r3, #8
 4299 007e 9A42     		cmp	r2, r3
 4300 0080 04D1     		bne	.L239
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4301              		.loc 1 3074 9 discriminator 3
 4302 0082 3B69     		ldr	r3, [r7, #16]
 4303 0084 5B68     		ldr	r3, [r3, #4]
 4304 0086 5A68     		ldr	r2, [r3, #4]
 4305 0088 3B69     		ldr	r3, [r7, #16]
 4306 008a 5A60     		str	r2, [r3, #4]
 4307              	.L239:
3074:./Drivers/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 4308              		.loc 1 3074 9 discriminator 5
 4309 008c 3B69     		ldr	r3, [r7, #16]
 4310 008e 5B68     		ldr	r3, [r3, #4]
 4311 0090 DB68     		ldr	r3, [r3, #12]
 4312 0092 084A     		ldr	r2, .L241+16
 4313 0094 1360     		str	r3, [r2]
 4314              	.L240:
 4315              	.LBE225:
 4316              	.LBE220:
 4317              		.loc 1 3094 1 is_stmt 1
 4318 0096 00BF     		nop
 4319 0098 1C37     		adds	r7, r7, #28
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 135


 4320              	.LCFI129:
 4321              		.cfi_def_cfa_offset 4
 4322 009a BD46     		mov	sp, r7
 4323              	.LCFI130:
 4324              		.cfi_def_cfa_register 13
 4325              		@ sp needed
 4326 009c 5DF8047B 		ldr	r7, [sp], #4
 4327              	.LCFI131:
 4328              		.cfi_restore 7
 4329              		.cfi_def_cfa_offset 0
 4330 00a0 7047     		bx	lr
 4331              	.L242:
 4332 00a2 00BF     		.align	2
 4333              	.L241:
 4334 00a4 00000000 		.word	uxSchedulerSuspended
 4335 00a8 00000000 		.word	xYieldPending
 4336 00ac 00000000 		.word	uxTopReadyPriority
 4337 00b0 00000000 		.word	pxReadyTasksLists
 4338 00b4 00000000 		.word	pxCurrentTCB
 4339              		.cfi_endproc
 4340              	.LFE30:
 4342              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4343              		.align	1
 4344              		.global	vTaskPlaceOnEventList
 4345              		.syntax unified
 4346              		.thumb
 4347              		.thumb_func
 4348              		.fpu fpv4-sp-d16
 4350              	vTaskPlaceOnEventList:
 4351              	.LFB31:
3095:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3096:./Drivers/FreeRTOS/tasks.c **** 
3097:./Drivers/FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3098:./Drivers/FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3099:./Drivers/FreeRTOS/tasks.c **** {
 4352              		.loc 1 3099 1
 4353              		.cfi_startproc
 4354              		@ args = 0, pretend = 0, frame = 16
 4355              		@ frame_needed = 1, uses_anonymous_args = 0
 4356 0000 80B5     		push	{r7, lr}
 4357              	.LCFI132:
 4358              		.cfi_def_cfa_offset 8
 4359              		.cfi_offset 7, -8
 4360              		.cfi_offset 14, -4
 4361 0002 84B0     		sub	sp, sp, #16
 4362              	.LCFI133:
 4363              		.cfi_def_cfa_offset 24
 4364 0004 00AF     		add	r7, sp, #0
 4365              	.LCFI134:
 4366              		.cfi_def_cfa_register 7
 4367 0006 7860     		str	r0, [r7, #4]
 4368 0008 3960     		str	r1, [r7]
3100:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4369              		.loc 1 3100 5
 4370 000a 7B68     		ldr	r3, [r7, #4]
 4371 000c 002B     		cmp	r3, #0
 4372 000e 0AD1     		bne	.L244
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 136


 4373              	.LBB226:
 4374              	.LBB227:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4375              		.loc 2 198 9
 4376              		.syntax unified
 4377              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4378 0010 4FF05003 			mov r3, #80												
 4379 0014 83F31188 		msr basepri, r3											
 4380 0018 BFF36F8F 		isb														
 4381 001c BFF34F8F 		dsb														
 4382              	
 4383              	@ 0 "" 2
 4384              		.thumb
 4385              		.syntax unified
 4386 0020 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4387              		.loc 2 206 5
 4388 0022 00BF     		nop
 4389              	.L245:
 4390              	.LBE227:
 4391              	.LBE226:
 4392              		.loc 1 3100 5 discriminator 1
 4393 0024 FEE7     		b	.L245
 4394              	.L244:
3101:./Drivers/FreeRTOS/tasks.c **** 
3102:./Drivers/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3103:./Drivers/FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3104:./Drivers/FreeRTOS/tasks.c **** 
3105:./Drivers/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3106:./Drivers/FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3107:./Drivers/FreeRTOS/tasks.c ****      * is the first to be woken by the event.
3108:./Drivers/FreeRTOS/tasks.c ****      *
3109:./Drivers/FreeRTOS/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3110:./Drivers/FreeRTOS/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3111:./Drivers/FreeRTOS/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3112:./Drivers/FreeRTOS/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3113:./Drivers/FreeRTOS/tasks.c ****      *
3114:./Drivers/FreeRTOS/tasks.c ****      * The queue that contains the event list is locked, preventing
3115:./Drivers/FreeRTOS/tasks.c ****      * simultaneous access from interrupts. */
3116:./Drivers/FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4395              		.loc 1 3116 46
 4396 0026 074B     		ldr	r3, .L246
 4397 0028 1B68     		ldr	r3, [r3]
 4398              		.loc 1 3116 5
 4399 002a 1833     		adds	r3, r3, #24
 4400 002c 1946     		mov	r1, r3
 4401 002e 7868     		ldr	r0, [r7, #4]
 4402 0030 FFF7FEFF 		bl	vListInsert
3117:./Drivers/FreeRTOS/tasks.c **** 
3118:./Drivers/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4403              		.loc 1 3118 5
 4404 0034 0121     		movs	r1, #1
 4405 0036 3868     		ldr	r0, [r7]
 4406 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3119:./Drivers/FreeRTOS/tasks.c **** }
 4407              		.loc 1 3119 1
 4408 003c 00BF     		nop
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 137


 4409 003e 1037     		adds	r7, r7, #16
 4410              	.LCFI135:
 4411              		.cfi_def_cfa_offset 8
 4412 0040 BD46     		mov	sp, r7
 4413              	.LCFI136:
 4414              		.cfi_def_cfa_register 13
 4415              		@ sp needed
 4416 0042 80BD     		pop	{r7, pc}
 4417              	.L247:
 4418              		.align	2
 4419              	.L246:
 4420 0044 00000000 		.word	pxCurrentTCB
 4421              		.cfi_endproc
 4422              	.LFE31:
 4424              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4425              		.align	1
 4426              		.global	vTaskPlaceOnUnorderedEventList
 4427              		.syntax unified
 4428              		.thumb
 4429              		.thumb_func
 4430              		.fpu fpv4-sp-d16
 4432              	vTaskPlaceOnUnorderedEventList:
 4433              	.LFB32:
3120:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3121:./Drivers/FreeRTOS/tasks.c **** 
3122:./Drivers/FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3123:./Drivers/FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3124:./Drivers/FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3125:./Drivers/FreeRTOS/tasks.c **** {
 4434              		.loc 1 3125 1
 4435              		.cfi_startproc
 4436              		@ args = 0, pretend = 0, frame = 32
 4437              		@ frame_needed = 1, uses_anonymous_args = 0
 4438 0000 80B5     		push	{r7, lr}
 4439              	.LCFI137:
 4440              		.cfi_def_cfa_offset 8
 4441              		.cfi_offset 7, -8
 4442              		.cfi_offset 14, -4
 4443 0002 88B0     		sub	sp, sp, #32
 4444              	.LCFI138:
 4445              		.cfi_def_cfa_offset 40
 4446 0004 00AF     		add	r7, sp, #0
 4447              	.LCFI139:
 4448              		.cfi_def_cfa_register 7
 4449 0006 F860     		str	r0, [r7, #12]
 4450 0008 B960     		str	r1, [r7, #8]
 4451 000a 7A60     		str	r2, [r7, #4]
3126:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4452              		.loc 1 3126 5
 4453 000c FB68     		ldr	r3, [r7, #12]
 4454 000e 002B     		cmp	r3, #0
 4455 0010 0AD1     		bne	.L249
 4456              	.LBB228:
 4457              	.LBB229:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4458              		.loc 2 198 9
 4459              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 138


 4460              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4461 0012 4FF05003 			mov r3, #80												
 4462 0016 83F31188 		msr basepri, r3											
 4463 001a BFF36F8F 		isb														
 4464 001e BFF34F8F 		dsb														
 4465              	
 4466              	@ 0 "" 2
 4467              		.thumb
 4468              		.syntax unified
 4469 0022 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4470              		.loc 2 206 5
 4471 0024 00BF     		nop
 4472              	.L250:
 4473              	.LBE229:
 4474              	.LBE228:
 4475              		.loc 1 3126 5 discriminator 1
 4476 0026 FEE7     		b	.L250
 4477              	.L249:
3127:./Drivers/FreeRTOS/tasks.c **** 
3128:./Drivers/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3129:./Drivers/FreeRTOS/tasks.c ****      * the event groups implementation. */
3130:./Drivers/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 4478              		.loc 1 3130 5
 4479 0028 1E4B     		ldr	r3, .L253
 4480 002a 1B68     		ldr	r3, [r3]
 4481 002c 002B     		cmp	r3, #0
 4482 002e 0AD1     		bne	.L251
 4483              	.LBB230:
 4484              	.LBB231:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4485              		.loc 2 198 9
 4486              		.syntax unified
 4487              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4488 0030 4FF05003 			mov r3, #80												
 4489 0034 83F31188 		msr basepri, r3											
 4490 0038 BFF36F8F 		isb														
 4491 003c BFF34F8F 		dsb														
 4492              	
 4493              	@ 0 "" 2
 4494              		.thumb
 4495              		.syntax unified
 4496 0040 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4497              		.loc 2 206 5
 4498 0042 00BF     		nop
 4499              	.L252:
 4500              	.LBE231:
 4501              	.LBE230:
 4502              		.loc 1 3130 5 discriminator 2
 4503 0044 FEE7     		b	.L252
 4504              	.L251:
3131:./Drivers/FreeRTOS/tasks.c **** 
3132:./Drivers/FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3133:./Drivers/FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3134:./Drivers/FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3135:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 139


 4505              		.loc 1 3135 5
 4506 0046 184B     		ldr	r3, .L253+4
 4507 0048 1B68     		ldr	r3, [r3]
 4508 004a BA68     		ldr	r2, [r7, #8]
 4509 004c 42F00042 		orr	r2, r2, #-2147483648
 4510 0050 9A61     		str	r2, [r3, #24]
 4511              	.LBB232:
3136:./Drivers/FreeRTOS/tasks.c **** 
3137:./Drivers/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3138:./Drivers/FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3139:./Drivers/FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3140:./Drivers/FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3141:./Drivers/FreeRTOS/tasks.c ****      * the task level). */
3142:./Drivers/FreeRTOS/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4512              		.loc 1 3142 5
 4513 0052 FB68     		ldr	r3, [r7, #12]
 4514 0054 5B68     		ldr	r3, [r3, #4]
 4515 0056 FB61     		str	r3, [r7, #28]
 4516 0058 134B     		ldr	r3, .L253+4
 4517 005a 1B68     		ldr	r3, [r3]
 4518 005c FA69     		ldr	r2, [r7, #28]
 4519 005e DA61     		str	r2, [r3, #28]
 4520 0060 114B     		ldr	r3, .L253+4
 4521 0062 1B68     		ldr	r3, [r3]
 4522 0064 FA69     		ldr	r2, [r7, #28]
 4523 0066 9268     		ldr	r2, [r2, #8]
 4524 0068 1A62     		str	r2, [r3, #32]
 4525 006a 0F4B     		ldr	r3, .L253+4
 4526 006c 1A68     		ldr	r2, [r3]
 4527 006e FB69     		ldr	r3, [r7, #28]
 4528 0070 9B68     		ldr	r3, [r3, #8]
 4529 0072 1832     		adds	r2, r2, #24
 4530 0074 5A60     		str	r2, [r3, #4]
 4531 0076 0C4B     		ldr	r3, .L253+4
 4532 0078 1B68     		ldr	r3, [r3]
 4533 007a 03F11802 		add	r2, r3, #24
 4534 007e FB69     		ldr	r3, [r7, #28]
 4535 0080 9A60     		str	r2, [r3, #8]
 4536 0082 094B     		ldr	r3, .L253+4
 4537 0084 1B68     		ldr	r3, [r3]
 4538 0086 FA68     		ldr	r2, [r7, #12]
 4539 0088 9A62     		str	r2, [r3, #40]
 4540 008a FB68     		ldr	r3, [r7, #12]
 4541 008c 1B68     		ldr	r3, [r3]
 4542 008e 5A1C     		adds	r2, r3, #1
 4543 0090 FB68     		ldr	r3, [r7, #12]
 4544 0092 1A60     		str	r2, [r3]
 4545              	.LBE232:
3143:./Drivers/FreeRTOS/tasks.c **** 
3144:./Drivers/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4546              		.loc 1 3144 5
 4547 0094 0121     		movs	r1, #1
 4548 0096 7868     		ldr	r0, [r7, #4]
 4549 0098 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3145:./Drivers/FreeRTOS/tasks.c **** }
 4550              		.loc 1 3145 1
 4551 009c 00BF     		nop
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 140


 4552 009e 2037     		adds	r7, r7, #32
 4553              	.LCFI140:
 4554              		.cfi_def_cfa_offset 8
 4555 00a0 BD46     		mov	sp, r7
 4556              	.LCFI141:
 4557              		.cfi_def_cfa_register 13
 4558              		@ sp needed
 4559 00a2 80BD     		pop	{r7, pc}
 4560              	.L254:
 4561              		.align	2
 4562              	.L253:
 4563 00a4 00000000 		.word	uxSchedulerSuspended
 4564 00a8 00000000 		.word	pxCurrentTCB
 4565              		.cfi_endproc
 4566              	.LFE32:
 4568              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4569              		.align	1
 4570              		.global	vTaskPlaceOnEventListRestricted
 4571              		.syntax unified
 4572              		.thumb
 4573              		.thumb_func
 4574              		.fpu fpv4-sp-d16
 4576              	vTaskPlaceOnEventListRestricted:
 4577              	.LFB33:
3146:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3147:./Drivers/FreeRTOS/tasks.c **** 
3148:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3149:./Drivers/FreeRTOS/tasks.c **** 
3150:./Drivers/FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3151:./Drivers/FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3152:./Drivers/FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3153:./Drivers/FreeRTOS/tasks.c ****     {
 4578              		.loc 1 3153 5
 4579              		.cfi_startproc
 4580              		@ args = 0, pretend = 0, frame = 24
 4581              		@ frame_needed = 1, uses_anonymous_args = 0
 4582 0000 80B5     		push	{r7, lr}
 4583              	.LCFI142:
 4584              		.cfi_def_cfa_offset 8
 4585              		.cfi_offset 7, -8
 4586              		.cfi_offset 14, -4
 4587 0002 86B0     		sub	sp, sp, #24
 4588              	.LCFI143:
 4589              		.cfi_def_cfa_offset 32
 4590 0004 00AF     		add	r7, sp, #0
 4591              	.LCFI144:
 4592              		.cfi_def_cfa_register 7
 4593 0006 F860     		str	r0, [r7, #12]
 4594 0008 B960     		str	r1, [r7, #8]
 4595 000a 7A60     		str	r2, [r7, #4]
3154:./Drivers/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 4596              		.loc 1 3154 9
 4597 000c FB68     		ldr	r3, [r7, #12]
 4598 000e 002B     		cmp	r3, #0
 4599 0010 0AD1     		bne	.L256
 4600              	.LBB233:
 4601              	.LBB234:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 141


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4602              		.loc 2 198 9
 4603              		.syntax unified
 4604              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4605 0012 4FF05003 			mov r3, #80												
 4606 0016 83F31188 		msr basepri, r3											
 4607 001a BFF36F8F 		isb														
 4608 001e BFF34F8F 		dsb														
 4609              	
 4610              	@ 0 "" 2
 4611              		.thumb
 4612              		.syntax unified
 4613 0022 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4614              		.loc 2 206 5
 4615 0024 00BF     		nop
 4616              	.L257:
 4617              	.LBE234:
 4618              	.LBE233:
 4619              		.loc 1 3154 9 discriminator 1
 4620 0026 FEE7     		b	.L257
 4621              	.L256:
 4622              	.LBB235:
3155:./Drivers/FreeRTOS/tasks.c **** 
3156:./Drivers/FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3157:./Drivers/FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3158:./Drivers/FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3159:./Drivers/FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3160:./Drivers/FreeRTOS/tasks.c **** 
3161:./Drivers/FreeRTOS/tasks.c **** 
3162:./Drivers/FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3163:./Drivers/FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3164:./Drivers/FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3165:./Drivers/FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3166:./Drivers/FreeRTOS/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4623              		.loc 1 3166 9
 4624 0028 FB68     		ldr	r3, [r7, #12]
 4625 002a 5B68     		ldr	r3, [r3, #4]
 4626 002c 7B61     		str	r3, [r7, #20]
 4627 002e 164B     		ldr	r3, .L259
 4628 0030 1B68     		ldr	r3, [r3]
 4629 0032 7A69     		ldr	r2, [r7, #20]
 4630 0034 DA61     		str	r2, [r3, #28]
 4631 0036 144B     		ldr	r3, .L259
 4632 0038 1B68     		ldr	r3, [r3]
 4633 003a 7A69     		ldr	r2, [r7, #20]
 4634 003c 9268     		ldr	r2, [r2, #8]
 4635 003e 1A62     		str	r2, [r3, #32]
 4636 0040 114B     		ldr	r3, .L259
 4637 0042 1A68     		ldr	r2, [r3]
 4638 0044 7B69     		ldr	r3, [r7, #20]
 4639 0046 9B68     		ldr	r3, [r3, #8]
 4640 0048 1832     		adds	r2, r2, #24
 4641 004a 5A60     		str	r2, [r3, #4]
 4642 004c 0E4B     		ldr	r3, .L259
 4643 004e 1B68     		ldr	r3, [r3]
 4644 0050 03F11802 		add	r2, r3, #24
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 142


 4645 0054 7B69     		ldr	r3, [r7, #20]
 4646 0056 9A60     		str	r2, [r3, #8]
 4647 0058 0B4B     		ldr	r3, .L259
 4648 005a 1B68     		ldr	r3, [r3]
 4649 005c FA68     		ldr	r2, [r7, #12]
 4650 005e 9A62     		str	r2, [r3, #40]
 4651 0060 FB68     		ldr	r3, [r7, #12]
 4652 0062 1B68     		ldr	r3, [r3]
 4653 0064 5A1C     		adds	r2, r3, #1
 4654 0066 FB68     		ldr	r3, [r7, #12]
 4655 0068 1A60     		str	r2, [r3]
 4656              	.LBE235:
3167:./Drivers/FreeRTOS/tasks.c **** 
3168:./Drivers/FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3169:./Drivers/FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3170:./Drivers/FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3171:./Drivers/FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 4657              		.loc 1 3171 11
 4658 006a 7B68     		ldr	r3, [r7, #4]
 4659 006c 002B     		cmp	r3, #0
 4660 006e 02D0     		beq	.L258
3172:./Drivers/FreeRTOS/tasks.c ****         {
3173:./Drivers/FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
 4661              		.loc 1 3173 26
 4662 0070 4FF0FF33 		mov	r3, #-1
 4663 0074 BB60     		str	r3, [r7, #8]
 4664              	.L258:
3174:./Drivers/FreeRTOS/tasks.c ****         }
3175:./Drivers/FreeRTOS/tasks.c **** 
3176:./Drivers/FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3177:./Drivers/FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4665              		.loc 1 3177 9
 4666 0076 7968     		ldr	r1, [r7, #4]
 4667 0078 B868     		ldr	r0, [r7, #8]
 4668 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3178:./Drivers/FreeRTOS/tasks.c ****     }
 4669              		.loc 1 3178 5
 4670 007e 00BF     		nop
 4671 0080 1837     		adds	r7, r7, #24
 4672              	.LCFI145:
 4673              		.cfi_def_cfa_offset 8
 4674 0082 BD46     		mov	sp, r7
 4675              	.LCFI146:
 4676              		.cfi_def_cfa_register 13
 4677              		@ sp needed
 4678 0084 80BD     		pop	{r7, pc}
 4679              	.L260:
 4680 0086 00BF     		.align	2
 4681              	.L259:
 4682 0088 00000000 		.word	pxCurrentTCB
 4683              		.cfi_endproc
 4684              	.LFE33:
 4686              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4687              		.align	1
 4688              		.global	xTaskRemoveFromEventList
 4689              		.syntax unified
 4690              		.thumb
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 143


 4691              		.thumb_func
 4692              		.fpu fpv4-sp-d16
 4694              	xTaskRemoveFromEventList:
 4695              	.LFB34:
3179:./Drivers/FreeRTOS/tasks.c **** 
3180:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3181:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3182:./Drivers/FreeRTOS/tasks.c **** 
3183:./Drivers/FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3184:./Drivers/FreeRTOS/tasks.c **** {
 4696              		.loc 1 3184 1
 4697              		.cfi_startproc
 4698              		@ args = 0, pretend = 0, frame = 40
 4699              		@ frame_needed = 1, uses_anonymous_args = 0
 4700              		@ link register save eliminated.
 4701 0000 80B4     		push	{r7}
 4702              	.LCFI147:
 4703              		.cfi_def_cfa_offset 4
 4704              		.cfi_offset 7, -4
 4705 0002 8BB0     		sub	sp, sp, #44
 4706              	.LCFI148:
 4707              		.cfi_def_cfa_offset 48
 4708 0004 00AF     		add	r7, sp, #0
 4709              	.LCFI149:
 4710              		.cfi_def_cfa_register 7
 4711 0006 7860     		str	r0, [r7, #4]
3185:./Drivers/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3186:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3187:./Drivers/FreeRTOS/tasks.c **** 
3188:./Drivers/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3189:./Drivers/FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3190:./Drivers/FreeRTOS/tasks.c **** 
3191:./Drivers/FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3192:./Drivers/FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3193:./Drivers/FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3194:./Drivers/FreeRTOS/tasks.c ****      *
3195:./Drivers/FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3196:./Drivers/FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3197:./Drivers/FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3198:./Drivers/FreeRTOS/tasks.c ****      *
3199:./Drivers/FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3200:./Drivers/FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3201:./Drivers/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 4712              		.loc 1 3201 22
 4713 0008 7B68     		ldr	r3, [r7, #4]
 4714 000a DB68     		ldr	r3, [r3, #12]
 4715              		.loc 1 3201 20
 4716 000c DB68     		ldr	r3, [r3, #12]
 4717 000e 3B62     		str	r3, [r7, #32]
3202:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4718              		.loc 1 3202 5
 4719 0010 3B6A     		ldr	r3, [r7, #32]
 4720 0012 002B     		cmp	r3, #0
 4721 0014 0AD1     		bne	.L262
 4722              	.LBB236:
 4723              	.LBB237:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 144


 4724              		.loc 2 198 9
 4725              		.syntax unified
 4726              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4727 0016 4FF05003 			mov r3, #80												
 4728 001a 83F31188 		msr basepri, r3											
 4729 001e BFF36F8F 		isb														
 4730 0022 BFF34F8F 		dsb														
 4731              	
 4732              	@ 0 "" 2
 4733              		.thumb
 4734              		.syntax unified
 4735 0026 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4736              		.loc 2 206 5
 4737 0028 00BF     		nop
 4738              	.L263:
 4739              	.LBE237:
 4740              	.LBE236:
 4741              		.loc 1 3202 5 discriminator 1
 4742 002a FEE7     		b	.L263
 4743              	.L262:
 4744              	.LBB238:
3203:./Drivers/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4745              		.loc 1 3203 5
 4746 002c 3B6A     		ldr	r3, [r7, #32]
 4747 002e 9B6A     		ldr	r3, [r3, #40]
 4748 0030 FB61     		str	r3, [r7, #28]
 4749 0032 3B6A     		ldr	r3, [r7, #32]
 4750 0034 DB69     		ldr	r3, [r3, #28]
 4751 0036 3A6A     		ldr	r2, [r7, #32]
 4752 0038 126A     		ldr	r2, [r2, #32]
 4753 003a 9A60     		str	r2, [r3, #8]
 4754 003c 3B6A     		ldr	r3, [r7, #32]
 4755 003e 1B6A     		ldr	r3, [r3, #32]
 4756 0040 3A6A     		ldr	r2, [r7, #32]
 4757 0042 D269     		ldr	r2, [r2, #28]
 4758 0044 5A60     		str	r2, [r3, #4]
 4759 0046 FB69     		ldr	r3, [r7, #28]
 4760 0048 5A68     		ldr	r2, [r3, #4]
 4761 004a 3B6A     		ldr	r3, [r7, #32]
 4762 004c 1833     		adds	r3, r3, #24
 4763 004e 9A42     		cmp	r2, r3
 4764 0050 03D1     		bne	.L264
 4765              		.loc 1 3203 5 is_stmt 0 discriminator 1
 4766 0052 3B6A     		ldr	r3, [r7, #32]
 4767 0054 1A6A     		ldr	r2, [r3, #32]
 4768 0056 FB69     		ldr	r3, [r7, #28]
 4769 0058 5A60     		str	r2, [r3, #4]
 4770              	.L264:
 4771              		.loc 1 3203 5 discriminator 3
 4772 005a 3B6A     		ldr	r3, [r7, #32]
 4773 005c 0022     		movs	r2, #0
 4774 005e 9A62     		str	r2, [r3, #40]
 4775 0060 FB69     		ldr	r3, [r7, #28]
 4776 0062 1B68     		ldr	r3, [r3]
 4777 0064 5A1E     		subs	r2, r3, #1
 4778 0066 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 145


 4779 0068 1A60     		str	r2, [r3]
 4780              	.LBE238:
3204:./Drivers/FreeRTOS/tasks.c **** 
3205:./Drivers/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4781              		.loc 1 3205 30 is_stmt 1 discriminator 3
 4782 006a 4A4B     		ldr	r3, .L271
 4783 006c 1B68     		ldr	r3, [r3]
 4784              		.loc 1 3205 7 discriminator 3
 4785 006e 002B     		cmp	r3, #0
 4786 0070 5ED1     		bne	.L265
 4787              	.LBB239:
3206:./Drivers/FreeRTOS/tasks.c ****     {
3207:./Drivers/FreeRTOS/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 4788              		.loc 1 3207 9
 4789 0072 3B6A     		ldr	r3, [r7, #32]
 4790 0074 5B69     		ldr	r3, [r3, #20]
 4791 0076 7B61     		str	r3, [r7, #20]
 4792 0078 3B6A     		ldr	r3, [r7, #32]
 4793 007a 9B68     		ldr	r3, [r3, #8]
 4794 007c 3A6A     		ldr	r2, [r7, #32]
 4795 007e D268     		ldr	r2, [r2, #12]
 4796 0080 9A60     		str	r2, [r3, #8]
 4797 0082 3B6A     		ldr	r3, [r7, #32]
 4798 0084 DB68     		ldr	r3, [r3, #12]
 4799 0086 3A6A     		ldr	r2, [r7, #32]
 4800 0088 9268     		ldr	r2, [r2, #8]
 4801 008a 5A60     		str	r2, [r3, #4]
 4802 008c 7B69     		ldr	r3, [r7, #20]
 4803 008e 5A68     		ldr	r2, [r3, #4]
 4804 0090 3B6A     		ldr	r3, [r7, #32]
 4805 0092 0433     		adds	r3, r3, #4
 4806 0094 9A42     		cmp	r2, r3
 4807 0096 03D1     		bne	.L266
 4808              		.loc 1 3207 9 is_stmt 0 discriminator 1
 4809 0098 3B6A     		ldr	r3, [r7, #32]
 4810 009a DA68     		ldr	r2, [r3, #12]
 4811 009c 7B69     		ldr	r3, [r7, #20]
 4812 009e 5A60     		str	r2, [r3, #4]
 4813              	.L266:
 4814              		.loc 1 3207 9 discriminator 3
 4815 00a0 3B6A     		ldr	r3, [r7, #32]
 4816 00a2 0022     		movs	r2, #0
 4817 00a4 5A61     		str	r2, [r3, #20]
 4818 00a6 7B69     		ldr	r3, [r7, #20]
 4819 00a8 1B68     		ldr	r3, [r3]
 4820 00aa 5A1E     		subs	r2, r3, #1
 4821 00ac 7B69     		ldr	r3, [r7, #20]
 4822 00ae 1A60     		str	r2, [r3]
 4823              	.LBE239:
3208:./Drivers/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4824              		.loc 1 3208 9 is_stmt 1 discriminator 3
 4825 00b0 3B6A     		ldr	r3, [r7, #32]
 4826 00b2 DB6A     		ldr	r3, [r3, #44]
 4827 00b4 0122     		movs	r2, #1
 4828 00b6 9A40     		lsls	r2, r2, r3
 4829 00b8 374B     		ldr	r3, .L271+4
 4830 00ba 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 146


 4831 00bc 1343     		orrs	r3, r3, r2
 4832 00be 364A     		ldr	r2, .L271+4
 4833 00c0 1360     		str	r3, [r2]
 4834              	.LBB240:
 4835 00c2 3B6A     		ldr	r3, [r7, #32]
 4836 00c4 DA6A     		ldr	r2, [r3, #44]
 4837 00c6 3549     		ldr	r1, .L271+8
 4838 00c8 1346     		mov	r3, r2
 4839 00ca 9B00     		lsls	r3, r3, #2
 4840 00cc 1344     		add	r3, r3, r2
 4841 00ce 9B00     		lsls	r3, r3, #2
 4842 00d0 0B44     		add	r3, r3, r1
 4843 00d2 0433     		adds	r3, r3, #4
 4844 00d4 1B68     		ldr	r3, [r3]
 4845 00d6 3B61     		str	r3, [r7, #16]
 4846 00d8 3B6A     		ldr	r3, [r7, #32]
 4847 00da 3A69     		ldr	r2, [r7, #16]
 4848 00dc 9A60     		str	r2, [r3, #8]
 4849 00de 3B69     		ldr	r3, [r7, #16]
 4850 00e0 9A68     		ldr	r2, [r3, #8]
 4851 00e2 3B6A     		ldr	r3, [r7, #32]
 4852 00e4 DA60     		str	r2, [r3, #12]
 4853 00e6 3B69     		ldr	r3, [r7, #16]
 4854 00e8 9B68     		ldr	r3, [r3, #8]
 4855 00ea 3A6A     		ldr	r2, [r7, #32]
 4856 00ec 0432     		adds	r2, r2, #4
 4857 00ee 5A60     		str	r2, [r3, #4]
 4858 00f0 3B6A     		ldr	r3, [r7, #32]
 4859 00f2 1A1D     		adds	r2, r3, #4
 4860 00f4 3B69     		ldr	r3, [r7, #16]
 4861 00f6 9A60     		str	r2, [r3, #8]
 4862 00f8 3B6A     		ldr	r3, [r7, #32]
 4863 00fa DA6A     		ldr	r2, [r3, #44]
 4864 00fc 1346     		mov	r3, r2
 4865 00fe 9B00     		lsls	r3, r3, #2
 4866 0100 1344     		add	r3, r3, r2
 4867 0102 9B00     		lsls	r3, r3, #2
 4868 0104 254A     		ldr	r2, .L271+8
 4869 0106 1A44     		add	r2, r2, r3
 4870 0108 3B6A     		ldr	r3, [r7, #32]
 4871 010a 5A61     		str	r2, [r3, #20]
 4872 010c 3B6A     		ldr	r3, [r7, #32]
 4873 010e DA6A     		ldr	r2, [r3, #44]
 4874 0110 2249     		ldr	r1, .L271+8
 4875 0112 1346     		mov	r3, r2
 4876 0114 9B00     		lsls	r3, r3, #2
 4877 0116 1344     		add	r3, r3, r2
 4878 0118 9B00     		lsls	r3, r3, #2
 4879 011a 0B44     		add	r3, r3, r1
 4880 011c 1B68     		ldr	r3, [r3]
 4881 011e 591C     		adds	r1, r3, #1
 4882 0120 1E48     		ldr	r0, .L271+8
 4883 0122 1346     		mov	r3, r2
 4884 0124 9B00     		lsls	r3, r3, #2
 4885 0126 1344     		add	r3, r3, r2
 4886 0128 9B00     		lsls	r3, r3, #2
 4887 012a 0344     		add	r3, r3, r0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 147


 4888 012c 1960     		str	r1, [r3]
 4889              	.LBE240:
 4890 012e 1BE0     		b	.L267
 4891              	.L265:
 4892              	.LBB241:
3209:./Drivers/FreeRTOS/tasks.c **** 
3210:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3211:./Drivers/FreeRTOS/tasks.c ****             {
3212:./Drivers/FreeRTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3213:./Drivers/FreeRTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3214:./Drivers/FreeRTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3215:./Drivers/FreeRTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3216:./Drivers/FreeRTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3217:./Drivers/FreeRTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3218:./Drivers/FreeRTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3219:./Drivers/FreeRTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3220:./Drivers/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3221:./Drivers/FreeRTOS/tasks.c ****             }
3222:./Drivers/FreeRTOS/tasks.c ****         #endif
3223:./Drivers/FreeRTOS/tasks.c ****     }
3224:./Drivers/FreeRTOS/tasks.c ****     else
3225:./Drivers/FreeRTOS/tasks.c ****     {
3226:./Drivers/FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3227:./Drivers/FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3228:./Drivers/FreeRTOS/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4893              		.loc 1 3228 9
 4894 0130 1B4B     		ldr	r3, .L271+12
 4895 0132 5B68     		ldr	r3, [r3, #4]
 4896 0134 BB61     		str	r3, [r7, #24]
 4897 0136 3B6A     		ldr	r3, [r7, #32]
 4898 0138 BA69     		ldr	r2, [r7, #24]
 4899 013a DA61     		str	r2, [r3, #28]
 4900 013c BB69     		ldr	r3, [r7, #24]
 4901 013e 9A68     		ldr	r2, [r3, #8]
 4902 0140 3B6A     		ldr	r3, [r7, #32]
 4903 0142 1A62     		str	r2, [r3, #32]
 4904 0144 BB69     		ldr	r3, [r7, #24]
 4905 0146 9B68     		ldr	r3, [r3, #8]
 4906 0148 3A6A     		ldr	r2, [r7, #32]
 4907 014a 1832     		adds	r2, r2, #24
 4908 014c 5A60     		str	r2, [r3, #4]
 4909 014e 3B6A     		ldr	r3, [r7, #32]
 4910 0150 03F11802 		add	r2, r3, #24
 4911 0154 BB69     		ldr	r3, [r7, #24]
 4912 0156 9A60     		str	r2, [r3, #8]
 4913 0158 3B6A     		ldr	r3, [r7, #32]
 4914 015a 114A     		ldr	r2, .L271+12
 4915 015c 9A62     		str	r2, [r3, #40]
 4916 015e 104B     		ldr	r3, .L271+12
 4917 0160 1B68     		ldr	r3, [r3]
 4918 0162 0133     		adds	r3, r3, #1
 4919 0164 0E4A     		ldr	r2, .L271+12
 4920 0166 1360     		str	r3, [r2]
 4921              	.L267:
 4922              	.LBE241:
3229:./Drivers/FreeRTOS/tasks.c ****     }
3230:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 148


3231:./Drivers/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4923              		.loc 1 3231 23
 4924 0168 3B6A     		ldr	r3, [r7, #32]
 4925 016a DA6A     		ldr	r2, [r3, #44]
 4926              		.loc 1 3231 50
 4927 016c 0D4B     		ldr	r3, .L271+16
 4928 016e 1B68     		ldr	r3, [r3]
 4929 0170 DB6A     		ldr	r3, [r3, #44]
 4930              		.loc 1 3231 7
 4931 0172 9A42     		cmp	r2, r3
 4932 0174 05D9     		bls	.L268
3232:./Drivers/FreeRTOS/tasks.c ****     {
3233:./Drivers/FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3234:./Drivers/FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3235:./Drivers/FreeRTOS/tasks.c ****          * it should force a context switch now. */
3236:./Drivers/FreeRTOS/tasks.c ****         xReturn = pdTRUE;
 4933              		.loc 1 3236 17
 4934 0176 0123     		movs	r3, #1
 4935 0178 7B62     		str	r3, [r7, #36]
3237:./Drivers/FreeRTOS/tasks.c **** 
3238:./Drivers/FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3239:./Drivers/FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3240:./Drivers/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 4936              		.loc 1 3240 23
 4937 017a 0B4B     		ldr	r3, .L271+20
 4938 017c 0122     		movs	r2, #1
 4939 017e 1A60     		str	r2, [r3]
 4940 0180 01E0     		b	.L269
 4941              	.L268:
3241:./Drivers/FreeRTOS/tasks.c ****     }
3242:./Drivers/FreeRTOS/tasks.c ****     else
3243:./Drivers/FreeRTOS/tasks.c ****     {
3244:./Drivers/FreeRTOS/tasks.c ****         xReturn = pdFALSE;
 4942              		.loc 1 3244 17
 4943 0182 0023     		movs	r3, #0
 4944 0184 7B62     		str	r3, [r7, #36]
 4945              	.L269:
3245:./Drivers/FreeRTOS/tasks.c ****     }
3246:./Drivers/FreeRTOS/tasks.c **** 
3247:./Drivers/FreeRTOS/tasks.c ****     return xReturn;
 4946              		.loc 1 3247 12
 4947 0186 7B6A     		ldr	r3, [r7, #36]
3248:./Drivers/FreeRTOS/tasks.c **** }
 4948              		.loc 1 3248 1
 4949 0188 1846     		mov	r0, r3
 4950 018a 2C37     		adds	r7, r7, #44
 4951              	.LCFI150:
 4952              		.cfi_def_cfa_offset 4
 4953 018c BD46     		mov	sp, r7
 4954              	.LCFI151:
 4955              		.cfi_def_cfa_register 13
 4956              		@ sp needed
 4957 018e 5DF8047B 		ldr	r7, [sp], #4
 4958              	.LCFI152:
 4959              		.cfi_restore 7
 4960              		.cfi_def_cfa_offset 0
 4961 0192 7047     		bx	lr
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 149


 4962              	.L272:
 4963              		.align	2
 4964              	.L271:
 4965 0194 00000000 		.word	uxSchedulerSuspended
 4966 0198 00000000 		.word	uxTopReadyPriority
 4967 019c 00000000 		.word	pxReadyTasksLists
 4968 01a0 00000000 		.word	xPendingReadyList
 4969 01a4 00000000 		.word	pxCurrentTCB
 4970 01a8 00000000 		.word	xYieldPending
 4971              		.cfi_endproc
 4972              	.LFE34:
 4974              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4975              		.align	1
 4976              		.global	vTaskRemoveFromUnorderedEventList
 4977              		.syntax unified
 4978              		.thumb
 4979              		.thumb_func
 4980              		.fpu fpv4-sp-d16
 4982              	vTaskRemoveFromUnorderedEventList:
 4983              	.LFB35:
3249:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3250:./Drivers/FreeRTOS/tasks.c **** 
3251:./Drivers/FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3252:./Drivers/FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3253:./Drivers/FreeRTOS/tasks.c **** {
 4984              		.loc 1 3253 1
 4985              		.cfi_startproc
 4986              		@ args = 0, pretend = 0, frame = 32
 4987              		@ frame_needed = 1, uses_anonymous_args = 0
 4988              		@ link register save eliminated.
 4989 0000 80B4     		push	{r7}
 4990              	.LCFI153:
 4991              		.cfi_def_cfa_offset 4
 4992              		.cfi_offset 7, -4
 4993 0002 89B0     		sub	sp, sp, #36
 4994              	.LCFI154:
 4995              		.cfi_def_cfa_offset 40
 4996 0004 00AF     		add	r7, sp, #0
 4997              	.LCFI155:
 4998              		.cfi_def_cfa_register 7
 4999 0006 7860     		str	r0, [r7, #4]
 5000 0008 3960     		str	r1, [r7]
3254:./Drivers/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3255:./Drivers/FreeRTOS/tasks.c **** 
3256:./Drivers/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3257:./Drivers/FreeRTOS/tasks.c ****      * the event flags implementation. */
3258:./Drivers/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 5001              		.loc 1 3258 5
 5002 000a 584B     		ldr	r3, .L282
 5003 000c 1B68     		ldr	r3, [r3]
 5004 000e 002B     		cmp	r3, #0
 5005 0010 0AD1     		bne	.L274
 5006              	.LBB242:
 5007              	.LBB243:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5008              		.loc 2 198 9
 5009              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 150


 5010              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5011 0012 4FF05003 			mov r3, #80												
 5012 0016 83F31188 		msr basepri, r3											
 5013 001a BFF36F8F 		isb														
 5014 001e BFF34F8F 		dsb														
 5015              	
 5016              	@ 0 "" 2
 5017              		.thumb
 5018              		.syntax unified
 5019 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5020              		.loc 2 206 5
 5021 0024 00BF     		nop
 5022              	.L275:
 5023              	.LBE243:
 5024              	.LBE242:
 5025              		.loc 1 3258 5 discriminator 1
 5026 0026 FEE7     		b	.L275
 5027              	.L274:
3259:./Drivers/FreeRTOS/tasks.c **** 
3260:./Drivers/FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3261:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 5028              		.loc 1 3261 5
 5029 0028 3B68     		ldr	r3, [r7]
 5030 002a 43F00042 		orr	r2, r3, #-2147483648
 5031 002e 7B68     		ldr	r3, [r7, #4]
 5032 0030 1A60     		str	r2, [r3]
3262:./Drivers/FreeRTOS/tasks.c **** 
3263:./Drivers/FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3264:./Drivers/FreeRTOS/tasks.c ****      * event flags. */
3265:./Drivers/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 5033              		.loc 1 3265 20
 5034 0032 7B68     		ldr	r3, [r7, #4]
 5035 0034 DB68     		ldr	r3, [r3, #12]
 5036 0036 FB61     		str	r3, [r7, #28]
3266:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 5037              		.loc 1 3266 5
 5038 0038 FB69     		ldr	r3, [r7, #28]
 5039 003a 002B     		cmp	r3, #0
 5040 003c 0AD1     		bne	.L276
 5041              	.LBB244:
 5042              	.LBB245:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5043              		.loc 2 198 9
 5044              		.syntax unified
 5045              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5046 003e 4FF05003 			mov r3, #80												
 5047 0042 83F31188 		msr basepri, r3											
 5048 0046 BFF36F8F 		isb														
 5049 004a BFF34F8F 		dsb														
 5050              	
 5051              	@ 0 "" 2
 5052              		.thumb
 5053              		.syntax unified
 5054 004e BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5055              		.loc 2 206 5
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 151


 5056 0050 00BF     		nop
 5057              	.L277:
 5058              	.LBE245:
 5059              	.LBE244:
 5060              		.loc 1 3266 5 discriminator 2
 5061 0052 FEE7     		b	.L277
 5062              	.L276:
 5063              	.LBB246:
3267:./Drivers/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 5064              		.loc 1 3267 5
 5065 0054 7B68     		ldr	r3, [r7, #4]
 5066 0056 1B69     		ldr	r3, [r3, #16]
 5067 0058 BB61     		str	r3, [r7, #24]
 5068 005a 7B68     		ldr	r3, [r7, #4]
 5069 005c 5B68     		ldr	r3, [r3, #4]
 5070 005e 7A68     		ldr	r2, [r7, #4]
 5071 0060 9268     		ldr	r2, [r2, #8]
 5072 0062 9A60     		str	r2, [r3, #8]
 5073 0064 7B68     		ldr	r3, [r7, #4]
 5074 0066 9B68     		ldr	r3, [r3, #8]
 5075 0068 7A68     		ldr	r2, [r7, #4]
 5076 006a 5268     		ldr	r2, [r2, #4]
 5077 006c 5A60     		str	r2, [r3, #4]
 5078 006e BB69     		ldr	r3, [r7, #24]
 5079 0070 5B68     		ldr	r3, [r3, #4]
 5080 0072 7A68     		ldr	r2, [r7, #4]
 5081 0074 9A42     		cmp	r2, r3
 5082 0076 03D1     		bne	.L278
 5083              		.loc 1 3267 5 is_stmt 0 discriminator 1
 5084 0078 7B68     		ldr	r3, [r7, #4]
 5085 007a 9A68     		ldr	r2, [r3, #8]
 5086 007c BB69     		ldr	r3, [r7, #24]
 5087 007e 5A60     		str	r2, [r3, #4]
 5088              	.L278:
 5089              		.loc 1 3267 5 discriminator 3
 5090 0080 7B68     		ldr	r3, [r7, #4]
 5091 0082 0022     		movs	r2, #0
 5092 0084 1A61     		str	r2, [r3, #16]
 5093 0086 BB69     		ldr	r3, [r7, #24]
 5094 0088 1B68     		ldr	r3, [r3]
 5095 008a 5A1E     		subs	r2, r3, #1
 5096 008c BB69     		ldr	r3, [r7, #24]
 5097 008e 1A60     		str	r2, [r3]
 5098              	.LBE246:
 5099              	.LBB247:
3268:./Drivers/FreeRTOS/tasks.c **** 
3269:./Drivers/FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3270:./Drivers/FreeRTOS/tasks.c ****         {
3271:./Drivers/FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3272:./Drivers/FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3273:./Drivers/FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3274:./Drivers/FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3275:./Drivers/FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3276:./Drivers/FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3277:./Drivers/FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3278:./Drivers/FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3279:./Drivers/FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 152


3280:./Drivers/FreeRTOS/tasks.c ****         }
3281:./Drivers/FreeRTOS/tasks.c ****     #endif
3282:./Drivers/FreeRTOS/tasks.c **** 
3283:./Drivers/FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3284:./Drivers/FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3285:./Drivers/FreeRTOS/tasks.c ****      * lists. */
3286:./Drivers/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 5100              		.loc 1 3286 5 is_stmt 1 discriminator 3
 5101 0090 FB69     		ldr	r3, [r7, #28]
 5102 0092 5B69     		ldr	r3, [r3, #20]
 5103 0094 7B61     		str	r3, [r7, #20]
 5104 0096 FB69     		ldr	r3, [r7, #28]
 5105 0098 9B68     		ldr	r3, [r3, #8]
 5106 009a FA69     		ldr	r2, [r7, #28]
 5107 009c D268     		ldr	r2, [r2, #12]
 5108 009e 9A60     		str	r2, [r3, #8]
 5109 00a0 FB69     		ldr	r3, [r7, #28]
 5110 00a2 DB68     		ldr	r3, [r3, #12]
 5111 00a4 FA69     		ldr	r2, [r7, #28]
 5112 00a6 9268     		ldr	r2, [r2, #8]
 5113 00a8 5A60     		str	r2, [r3, #4]
 5114 00aa 7B69     		ldr	r3, [r7, #20]
 5115 00ac 5A68     		ldr	r2, [r3, #4]
 5116 00ae FB69     		ldr	r3, [r7, #28]
 5117 00b0 0433     		adds	r3, r3, #4
 5118 00b2 9A42     		cmp	r2, r3
 5119 00b4 03D1     		bne	.L279
 5120              		.loc 1 3286 5 is_stmt 0 discriminator 1
 5121 00b6 FB69     		ldr	r3, [r7, #28]
 5122 00b8 DA68     		ldr	r2, [r3, #12]
 5123 00ba 7B69     		ldr	r3, [r7, #20]
 5124 00bc 5A60     		str	r2, [r3, #4]
 5125              	.L279:
 5126              		.loc 1 3286 5 discriminator 3
 5127 00be FB69     		ldr	r3, [r7, #28]
 5128 00c0 0022     		movs	r2, #0
 5129 00c2 5A61     		str	r2, [r3, #20]
 5130 00c4 7B69     		ldr	r3, [r7, #20]
 5131 00c6 1B68     		ldr	r3, [r3]
 5132 00c8 5A1E     		subs	r2, r3, #1
 5133 00ca 7B69     		ldr	r3, [r7, #20]
 5134 00cc 1A60     		str	r2, [r3]
 5135              	.LBE247:
3287:./Drivers/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 5136              		.loc 1 3287 5 is_stmt 1 discriminator 3
 5137 00ce FB69     		ldr	r3, [r7, #28]
 5138 00d0 DB6A     		ldr	r3, [r3, #44]
 5139 00d2 0122     		movs	r2, #1
 5140 00d4 9A40     		lsls	r2, r2, r3
 5141 00d6 264B     		ldr	r3, .L282+4
 5142 00d8 1B68     		ldr	r3, [r3]
 5143 00da 1343     		orrs	r3, r3, r2
 5144 00dc 244A     		ldr	r2, .L282+4
 5145 00de 1360     		str	r3, [r2]
 5146              	.LBB248:
 5147 00e0 FB69     		ldr	r3, [r7, #28]
 5148 00e2 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 153


 5149 00e4 2349     		ldr	r1, .L282+8
 5150 00e6 1346     		mov	r3, r2
 5151 00e8 9B00     		lsls	r3, r3, #2
 5152 00ea 1344     		add	r3, r3, r2
 5153 00ec 9B00     		lsls	r3, r3, #2
 5154 00ee 0B44     		add	r3, r3, r1
 5155 00f0 0433     		adds	r3, r3, #4
 5156 00f2 1B68     		ldr	r3, [r3]
 5157 00f4 3B61     		str	r3, [r7, #16]
 5158 00f6 FB69     		ldr	r3, [r7, #28]
 5159 00f8 3A69     		ldr	r2, [r7, #16]
 5160 00fa 9A60     		str	r2, [r3, #8]
 5161 00fc 3B69     		ldr	r3, [r7, #16]
 5162 00fe 9A68     		ldr	r2, [r3, #8]
 5163 0100 FB69     		ldr	r3, [r7, #28]
 5164 0102 DA60     		str	r2, [r3, #12]
 5165 0104 3B69     		ldr	r3, [r7, #16]
 5166 0106 9B68     		ldr	r3, [r3, #8]
 5167 0108 FA69     		ldr	r2, [r7, #28]
 5168 010a 0432     		adds	r2, r2, #4
 5169 010c 5A60     		str	r2, [r3, #4]
 5170 010e FB69     		ldr	r3, [r7, #28]
 5171 0110 1A1D     		adds	r2, r3, #4
 5172 0112 3B69     		ldr	r3, [r7, #16]
 5173 0114 9A60     		str	r2, [r3, #8]
 5174 0116 FB69     		ldr	r3, [r7, #28]
 5175 0118 DA6A     		ldr	r2, [r3, #44]
 5176 011a 1346     		mov	r3, r2
 5177 011c 9B00     		lsls	r3, r3, #2
 5178 011e 1344     		add	r3, r3, r2
 5179 0120 9B00     		lsls	r3, r3, #2
 5180 0122 144A     		ldr	r2, .L282+8
 5181 0124 1A44     		add	r2, r2, r3
 5182 0126 FB69     		ldr	r3, [r7, #28]
 5183 0128 5A61     		str	r2, [r3, #20]
 5184 012a FB69     		ldr	r3, [r7, #28]
 5185 012c DA6A     		ldr	r2, [r3, #44]
 5186 012e 1149     		ldr	r1, .L282+8
 5187 0130 1346     		mov	r3, r2
 5188 0132 9B00     		lsls	r3, r3, #2
 5189 0134 1344     		add	r3, r3, r2
 5190 0136 9B00     		lsls	r3, r3, #2
 5191 0138 0B44     		add	r3, r3, r1
 5192 013a 1B68     		ldr	r3, [r3]
 5193 013c 591C     		adds	r1, r3, #1
 5194 013e 0D48     		ldr	r0, .L282+8
 5195 0140 1346     		mov	r3, r2
 5196 0142 9B00     		lsls	r3, r3, #2
 5197 0144 1344     		add	r3, r3, r2
 5198 0146 9B00     		lsls	r3, r3, #2
 5199 0148 0344     		add	r3, r3, r0
 5200 014a 1960     		str	r1, [r3]
 5201              	.LBE248:
3288:./Drivers/FreeRTOS/tasks.c **** 
3289:./Drivers/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 5202              		.loc 1 3289 23 discriminator 3
 5203 014c FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 154


 5204 014e DA6A     		ldr	r2, [r3, #44]
 5205              		.loc 1 3289 50 discriminator 3
 5206 0150 094B     		ldr	r3, .L282+12
 5207 0152 1B68     		ldr	r3, [r3]
 5208 0154 DB6A     		ldr	r3, [r3, #44]
 5209              		.loc 1 3289 7 discriminator 3
 5210 0156 9A42     		cmp	r2, r3
 5211 0158 02D9     		bls	.L281
3290:./Drivers/FreeRTOS/tasks.c ****     {
3291:./Drivers/FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3292:./Drivers/FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3293:./Drivers/FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3294:./Drivers/FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3295:./Drivers/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
 5212              		.loc 1 3295 23
 5213 015a 084B     		ldr	r3, .L282+16
 5214 015c 0122     		movs	r2, #1
 5215 015e 1A60     		str	r2, [r3]
 5216              	.L281:
3296:./Drivers/FreeRTOS/tasks.c ****     }
3297:./Drivers/FreeRTOS/tasks.c **** }
 5217              		.loc 1 3297 1
 5218 0160 00BF     		nop
 5219 0162 2437     		adds	r7, r7, #36
 5220              	.LCFI156:
 5221              		.cfi_def_cfa_offset 4
 5222 0164 BD46     		mov	sp, r7
 5223              	.LCFI157:
 5224              		.cfi_def_cfa_register 13
 5225              		@ sp needed
 5226 0166 5DF8047B 		ldr	r7, [sp], #4
 5227              	.LCFI158:
 5228              		.cfi_restore 7
 5229              		.cfi_def_cfa_offset 0
 5230 016a 7047     		bx	lr
 5231              	.L283:
 5232              		.align	2
 5233              	.L282:
 5234 016c 00000000 		.word	uxSchedulerSuspended
 5235 0170 00000000 		.word	uxTopReadyPriority
 5236 0174 00000000 		.word	pxReadyTasksLists
 5237 0178 00000000 		.word	pxCurrentTCB
 5238 017c 00000000 		.word	xYieldPending
 5239              		.cfi_endproc
 5240              	.LFE35:
 5242              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5243              		.align	1
 5244              		.global	vTaskSetTimeOutState
 5245              		.syntax unified
 5246              		.thumb
 5247              		.thumb_func
 5248              		.fpu fpv4-sp-d16
 5250              	vTaskSetTimeOutState:
 5251              	.LFB36:
3298:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3299:./Drivers/FreeRTOS/tasks.c **** 
3300:./Drivers/FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 155


3301:./Drivers/FreeRTOS/tasks.c **** {
 5252              		.loc 1 3301 1
 5253              		.cfi_startproc
 5254              		@ args = 0, pretend = 0, frame = 16
 5255              		@ frame_needed = 1, uses_anonymous_args = 0
 5256 0000 80B5     		push	{r7, lr}
 5257              	.LCFI159:
 5258              		.cfi_def_cfa_offset 8
 5259              		.cfi_offset 7, -8
 5260              		.cfi_offset 14, -4
 5261 0002 84B0     		sub	sp, sp, #16
 5262              	.LCFI160:
 5263              		.cfi_def_cfa_offset 24
 5264 0004 00AF     		add	r7, sp, #0
 5265              	.LCFI161:
 5266              		.cfi_def_cfa_register 7
 5267 0006 7860     		str	r0, [r7, #4]
3302:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 5268              		.loc 1 3302 5
 5269 0008 7B68     		ldr	r3, [r7, #4]
 5270 000a 002B     		cmp	r3, #0
 5271 000c 0AD1     		bne	.L285
 5272              	.LBB249:
 5273              	.LBB250:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5274              		.loc 2 198 9
 5275              		.syntax unified
 5276              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5277 000e 4FF05003 			mov r3, #80												
 5278 0012 83F31188 		msr basepri, r3											
 5279 0016 BFF36F8F 		isb														
 5280 001a BFF34F8F 		dsb														
 5281              	
 5282              	@ 0 "" 2
 5283              		.thumb
 5284              		.syntax unified
 5285 001e FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5286              		.loc 2 206 5
 5287 0020 00BF     		nop
 5288              	.L286:
 5289              	.LBE250:
 5290              	.LBE249:
 5291              		.loc 1 3302 5 discriminator 1
 5292 0022 FEE7     		b	.L286
 5293              	.L285:
3303:./Drivers/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 5294              		.loc 1 3303 5
 5295 0024 FFF7FEFF 		bl	vPortEnterCritical
3304:./Drivers/FreeRTOS/tasks.c ****     {
3305:./Drivers/FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 5296              		.loc 1 3305 35
 5297 0028 064B     		ldr	r3, .L287
 5298 002a 1A68     		ldr	r2, [r3]
 5299 002c 7B68     		ldr	r3, [r7, #4]
 5300 002e 1A60     		str	r2, [r3]
3306:./Drivers/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 156


 5301              		.loc 1 3306 36
 5302 0030 054B     		ldr	r3, .L287+4
 5303 0032 1A68     		ldr	r2, [r3]
 5304 0034 7B68     		ldr	r3, [r7, #4]
 5305 0036 5A60     		str	r2, [r3, #4]
3307:./Drivers/FreeRTOS/tasks.c ****     }
3308:./Drivers/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 5306              		.loc 1 3308 5
 5307 0038 FFF7FEFF 		bl	vPortExitCritical
3309:./Drivers/FreeRTOS/tasks.c **** }
 5308              		.loc 1 3309 1
 5309 003c 00BF     		nop
 5310 003e 1037     		adds	r7, r7, #16
 5311              	.LCFI162:
 5312              		.cfi_def_cfa_offset 8
 5313 0040 BD46     		mov	sp, r7
 5314              	.LCFI163:
 5315              		.cfi_def_cfa_register 13
 5316              		@ sp needed
 5317 0042 80BD     		pop	{r7, pc}
 5318              	.L288:
 5319              		.align	2
 5320              	.L287:
 5321 0044 00000000 		.word	xNumOfOverflows
 5322 0048 00000000 		.word	xTickCount
 5323              		.cfi_endproc
 5324              	.LFE36:
 5326              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5327              		.align	1
 5328              		.global	vTaskInternalSetTimeOutState
 5329              		.syntax unified
 5330              		.thumb
 5331              		.thumb_func
 5332              		.fpu fpv4-sp-d16
 5334              	vTaskInternalSetTimeOutState:
 5335              	.LFB37:
3310:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3311:./Drivers/FreeRTOS/tasks.c **** 
3312:./Drivers/FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3313:./Drivers/FreeRTOS/tasks.c **** {
 5336              		.loc 1 3313 1
 5337              		.cfi_startproc
 5338              		@ args = 0, pretend = 0, frame = 8
 5339              		@ frame_needed = 1, uses_anonymous_args = 0
 5340              		@ link register save eliminated.
 5341 0000 80B4     		push	{r7}
 5342              	.LCFI164:
 5343              		.cfi_def_cfa_offset 4
 5344              		.cfi_offset 7, -4
 5345 0002 83B0     		sub	sp, sp, #12
 5346              	.LCFI165:
 5347              		.cfi_def_cfa_offset 16
 5348 0004 00AF     		add	r7, sp, #0
 5349              	.LCFI166:
 5350              		.cfi_def_cfa_register 7
 5351 0006 7860     		str	r0, [r7, #4]
3314:./Drivers/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 157


3315:./Drivers/FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 5352              		.loc 1 3315 31
 5353 0008 064B     		ldr	r3, .L290
 5354 000a 1A68     		ldr	r2, [r3]
 5355 000c 7B68     		ldr	r3, [r7, #4]
 5356 000e 1A60     		str	r2, [r3]
3316:./Drivers/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5357              		.loc 1 3316 32
 5358 0010 054B     		ldr	r3, .L290+4
 5359 0012 1A68     		ldr	r2, [r3]
 5360 0014 7B68     		ldr	r3, [r7, #4]
 5361 0016 5A60     		str	r2, [r3, #4]
3317:./Drivers/FreeRTOS/tasks.c **** }
 5362              		.loc 1 3317 1
 5363 0018 00BF     		nop
 5364 001a 0C37     		adds	r7, r7, #12
 5365              	.LCFI167:
 5366              		.cfi_def_cfa_offset 4
 5367 001c BD46     		mov	sp, r7
 5368              	.LCFI168:
 5369              		.cfi_def_cfa_register 13
 5370              		@ sp needed
 5371 001e 5DF8047B 		ldr	r7, [sp], #4
 5372              	.LCFI169:
 5373              		.cfi_restore 7
 5374              		.cfi_def_cfa_offset 0
 5375 0022 7047     		bx	lr
 5376              	.L291:
 5377              		.align	2
 5378              	.L290:
 5379 0024 00000000 		.word	xNumOfOverflows
 5380 0028 00000000 		.word	xTickCount
 5381              		.cfi_endproc
 5382              	.LFE37:
 5384              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5385              		.align	1
 5386              		.global	xTaskCheckForTimeOut
 5387              		.syntax unified
 5388              		.thumb
 5389              		.thumb_func
 5390              		.fpu fpv4-sp-d16
 5392              	xTaskCheckForTimeOut:
 5393              	.LFB38:
3318:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3319:./Drivers/FreeRTOS/tasks.c **** 
3320:./Drivers/FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3321:./Drivers/FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3322:./Drivers/FreeRTOS/tasks.c **** {
 5394              		.loc 1 3322 1
 5395              		.cfi_startproc
 5396              		@ args = 0, pretend = 0, frame = 32
 5397              		@ frame_needed = 1, uses_anonymous_args = 0
 5398 0000 80B5     		push	{r7, lr}
 5399              	.LCFI170:
 5400              		.cfi_def_cfa_offset 8
 5401              		.cfi_offset 7, -8
 5402              		.cfi_offset 14, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 158


 5403 0002 88B0     		sub	sp, sp, #32
 5404              	.LCFI171:
 5405              		.cfi_def_cfa_offset 40
 5406 0004 00AF     		add	r7, sp, #0
 5407              	.LCFI172:
 5408              		.cfi_def_cfa_register 7
 5409 0006 7860     		str	r0, [r7, #4]
 5410 0008 3960     		str	r1, [r7]
3323:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3324:./Drivers/FreeRTOS/tasks.c **** 
3325:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 5411              		.loc 1 3325 5
 5412 000a 7B68     		ldr	r3, [r7, #4]
 5413 000c 002B     		cmp	r3, #0
 5414 000e 0AD1     		bne	.L293
 5415              	.LBB251:
 5416              	.LBB252:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5417              		.loc 2 198 9
 5418              		.syntax unified
 5419              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5420 0010 4FF05003 			mov r3, #80												
 5421 0014 83F31188 		msr basepri, r3											
 5422 0018 BFF36F8F 		isb														
 5423 001c BFF34F8F 		dsb														
 5424              	
 5425              	@ 0 "" 2
 5426              		.thumb
 5427              		.syntax unified
 5428 0020 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5429              		.loc 2 206 5
 5430 0022 00BF     		nop
 5431              	.L294:
 5432              	.LBE252:
 5433              	.LBE251:
 5434              		.loc 1 3325 5 discriminator 1
 5435 0024 FEE7     		b	.L294
 5436              	.L293:
3326:./Drivers/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 5437              		.loc 1 3326 5
 5438 0026 3B68     		ldr	r3, [r7]
 5439 0028 002B     		cmp	r3, #0
 5440 002a 0AD1     		bne	.L295
 5441              	.LBB253:
 5442              	.LBB254:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 5443              		.loc 2 198 9
 5444              		.syntax unified
 5445              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 5446 002c 4FF05003 			mov r3, #80												
 5447 0030 83F31188 		msr basepri, r3											
 5448 0034 BFF36F8F 		isb														
 5449 0038 BFF34F8F 		dsb														
 5450              	
 5451              	@ 0 "" 2
 5452              		.thumb
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 159


 5453              		.syntax unified
 5454 003c FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 5455              		.loc 2 206 5
 5456 003e 00BF     		nop
 5457              	.L296:
 5458              	.LBE254:
 5459              	.LBE253:
 5460              		.loc 1 3326 5 discriminator 2
 5461 0040 FEE7     		b	.L296
 5462              	.L295:
3327:./Drivers/FreeRTOS/tasks.c **** 
3328:./Drivers/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 5463              		.loc 1 3328 5
 5464 0042 FFF7FEFF 		bl	vPortEnterCritical
 5465              	.LBB255:
3329:./Drivers/FreeRTOS/tasks.c ****     {
3330:./Drivers/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3331:./Drivers/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 5466              		.loc 1 3331 26
 5467 0046 1F4B     		ldr	r3, .L302
 5468 0048 1B68     		ldr	r3, [r3]
 5469 004a BB61     		str	r3, [r7, #24]
3332:./Drivers/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5470              		.loc 1 3332 68
 5471 004c 7B68     		ldr	r3, [r7, #4]
 5472 004e 5B68     		ldr	r3, [r3, #4]
 5473              		.loc 1 3332 26
 5474 0050 BA69     		ldr	r2, [r7, #24]
 5475 0052 D31A     		subs	r3, r2, r3
 5476 0054 7B61     		str	r3, [r7, #20]
3333:./Drivers/FreeRTOS/tasks.c **** 
3334:./Drivers/FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3335:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3336:./Drivers/FreeRTOS/tasks.c ****             {
3337:./Drivers/FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3338:./Drivers/FreeRTOS/tasks.c ****                  * but has the same result. */
3339:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3340:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3341:./Drivers/FreeRTOS/tasks.c ****             }
3342:./Drivers/FreeRTOS/tasks.c ****             else
3343:./Drivers/FreeRTOS/tasks.c ****         #endif
3344:./Drivers/FreeRTOS/tasks.c **** 
3345:./Drivers/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3346:./Drivers/FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 5477              		.loc 1 3346 17
 5478 0056 3B68     		ldr	r3, [r7]
 5479 0058 1B68     		ldr	r3, [r3]
 5480              		.loc 1 3346 15
 5481 005a B3F1FF3F 		cmp	r3, #-1
 5482 005e 02D1     		bne	.L297
3347:./Drivers/FreeRTOS/tasks.c ****             {
3348:./Drivers/FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3349:./Drivers/FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3350:./Drivers/FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3351:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
 5483              		.loc 1 3351 25
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 160


 5484 0060 0023     		movs	r3, #0
 5485 0062 FB61     		str	r3, [r7, #28]
 5486 0064 26E0     		b	.L298
 5487              	.L297:
3352:./Drivers/FreeRTOS/tasks.c ****             }
3353:./Drivers/FreeRTOS/tasks.c ****             else
3354:./Drivers/FreeRTOS/tasks.c ****         #endif
3355:./Drivers/FreeRTOS/tasks.c **** 
3356:./Drivers/FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 5488              		.loc 1 3356 43
 5489 0066 7B68     		ldr	r3, [r7, #4]
 5490 0068 1A68     		ldr	r2, [r3]
 5491              		.loc 1 3356 31
 5492 006a 174B     		ldr	r3, .L302+4
 5493 006c 1B68     		ldr	r3, [r3]
 5494              		.loc 1 3356 11
 5495 006e 9A42     		cmp	r2, r3
 5496 0070 0AD0     		beq	.L299
 5497              		.loc 1 3356 95 discriminator 1
 5498 0072 7B68     		ldr	r3, [r7, #4]
 5499 0074 5B68     		ldr	r3, [r3, #4]
 5500              		.loc 1 3356 62 discriminator 1
 5501 0076 BA69     		ldr	r2, [r7, #24]
 5502 0078 9A42     		cmp	r2, r3
 5503 007a 05D3     		bcc	.L299
3357:./Drivers/FreeRTOS/tasks.c ****         {
3358:./Drivers/FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3359:./Drivers/FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3360:./Drivers/FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3361:./Drivers/FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3362:./Drivers/FreeRTOS/tasks.c ****              * was called. */
3363:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 5504              		.loc 1 3363 21
 5505 007c 0123     		movs	r3, #1
 5506 007e FB61     		str	r3, [r7, #28]
3364:./Drivers/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5507              		.loc 1 3364 28
 5508 0080 3B68     		ldr	r3, [r7]
 5509 0082 0022     		movs	r2, #0
 5510 0084 1A60     		str	r2, [r3]
 5511 0086 15E0     		b	.L298
 5512              	.L299:
3365:./Drivers/FreeRTOS/tasks.c ****         }
3366:./Drivers/FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 5513              		.loc 1 3366 33
 5514 0088 3B68     		ldr	r3, [r7]
 5515 008a 1B68     		ldr	r3, [r3]
 5516              		.loc 1 3366 16
 5517 008c 7A69     		ldr	r2, [r7, #20]
 5518 008e 9A42     		cmp	r2, r3
 5519 0090 0BD2     		bcs	.L300
3367:./Drivers/FreeRTOS/tasks.c ****         {
3368:./Drivers/FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3369:./Drivers/FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 5520              		.loc 1 3369 28
 5521 0092 3B68     		ldr	r3, [r7]
 5522 0094 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 161


 5523 0096 7B69     		ldr	r3, [r7, #20]
 5524 0098 D21A     		subs	r2, r2, r3
 5525 009a 3B68     		ldr	r3, [r7]
 5526 009c 1A60     		str	r2, [r3]
3370:./Drivers/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5527              		.loc 1 3370 13
 5528 009e 7868     		ldr	r0, [r7, #4]
 5529 00a0 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3371:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 5530              		.loc 1 3371 21
 5531 00a4 0023     		movs	r3, #0
 5532 00a6 FB61     		str	r3, [r7, #28]
 5533 00a8 04E0     		b	.L298
 5534              	.L300:
3372:./Drivers/FreeRTOS/tasks.c ****         }
3373:./Drivers/FreeRTOS/tasks.c ****         else
3374:./Drivers/FreeRTOS/tasks.c ****         {
3375:./Drivers/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 5535              		.loc 1 3375 28
 5536 00aa 3B68     		ldr	r3, [r7]
 5537 00ac 0022     		movs	r2, #0
 5538 00ae 1A60     		str	r2, [r3]
3376:./Drivers/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 5539              		.loc 1 3376 21
 5540 00b0 0123     		movs	r3, #1
 5541 00b2 FB61     		str	r3, [r7, #28]
 5542              	.L298:
 5543              	.LBE255:
3377:./Drivers/FreeRTOS/tasks.c ****         }
3378:./Drivers/FreeRTOS/tasks.c ****     }
3379:./Drivers/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
 5544              		.loc 1 3379 5
 5545 00b4 FFF7FEFF 		bl	vPortExitCritical
3380:./Drivers/FreeRTOS/tasks.c **** 
3381:./Drivers/FreeRTOS/tasks.c ****     return xReturn;
 5546              		.loc 1 3381 12
 5547 00b8 FB69     		ldr	r3, [r7, #28]
3382:./Drivers/FreeRTOS/tasks.c **** }
 5548              		.loc 1 3382 1
 5549 00ba 1846     		mov	r0, r3
 5550 00bc 2037     		adds	r7, r7, #32
 5551              	.LCFI173:
 5552              		.cfi_def_cfa_offset 8
 5553 00be BD46     		mov	sp, r7
 5554              	.LCFI174:
 5555              		.cfi_def_cfa_register 13
 5556              		@ sp needed
 5557 00c0 80BD     		pop	{r7, pc}
 5558              	.L303:
 5559 00c2 00BF     		.align	2
 5560              	.L302:
 5561 00c4 00000000 		.word	xTickCount
 5562 00c8 00000000 		.word	xNumOfOverflows
 5563              		.cfi_endproc
 5564              	.LFE38:
 5566              		.section	.text.vTaskMissedYield,"ax",%progbits
 5567              		.align	1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 162


 5568              		.global	vTaskMissedYield
 5569              		.syntax unified
 5570              		.thumb
 5571              		.thumb_func
 5572              		.fpu fpv4-sp-d16
 5574              	vTaskMissedYield:
 5575              	.LFB39:
3383:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3384:./Drivers/FreeRTOS/tasks.c **** 
3385:./Drivers/FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3386:./Drivers/FreeRTOS/tasks.c **** {
 5576              		.loc 1 3386 1
 5577              		.cfi_startproc
 5578              		@ args = 0, pretend = 0, frame = 0
 5579              		@ frame_needed = 1, uses_anonymous_args = 0
 5580              		@ link register save eliminated.
 5581 0000 80B4     		push	{r7}
 5582              	.LCFI175:
 5583              		.cfi_def_cfa_offset 4
 5584              		.cfi_offset 7, -4
 5585 0002 00AF     		add	r7, sp, #0
 5586              	.LCFI176:
 5587              		.cfi_def_cfa_register 7
3387:./Drivers/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 5588              		.loc 1 3387 19
 5589 0004 034B     		ldr	r3, .L305
 5590 0006 0122     		movs	r2, #1
 5591 0008 1A60     		str	r2, [r3]
3388:./Drivers/FreeRTOS/tasks.c **** }
 5592              		.loc 1 3388 1
 5593 000a 00BF     		nop
 5594 000c BD46     		mov	sp, r7
 5595              	.LCFI177:
 5596              		.cfi_def_cfa_register 13
 5597              		@ sp needed
 5598 000e 5DF8047B 		ldr	r7, [sp], #4
 5599              	.LCFI178:
 5600              		.cfi_restore 7
 5601              		.cfi_def_cfa_offset 0
 5602 0012 7047     		bx	lr
 5603              	.L306:
 5604              		.align	2
 5605              	.L305:
 5606 0014 00000000 		.word	xYieldPending
 5607              		.cfi_endproc
 5608              	.LFE39:
 5610              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5611              		.align	1
 5612              		.global	uxTaskGetTaskNumber
 5613              		.syntax unified
 5614              		.thumb
 5615              		.thumb_func
 5616              		.fpu fpv4-sp-d16
 5618              	uxTaskGetTaskNumber:
 5619              	.LFB40:
3389:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3390:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 163


3391:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3392:./Drivers/FreeRTOS/tasks.c **** 
3393:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3394:./Drivers/FreeRTOS/tasks.c ****     {
 5620              		.loc 1 3394 5
 5621              		.cfi_startproc
 5622              		@ args = 0, pretend = 0, frame = 16
 5623              		@ frame_needed = 1, uses_anonymous_args = 0
 5624              		@ link register save eliminated.
 5625 0000 80B4     		push	{r7}
 5626              	.LCFI179:
 5627              		.cfi_def_cfa_offset 4
 5628              		.cfi_offset 7, -4
 5629 0002 85B0     		sub	sp, sp, #20
 5630              	.LCFI180:
 5631              		.cfi_def_cfa_offset 24
 5632 0004 00AF     		add	r7, sp, #0
 5633              	.LCFI181:
 5634              		.cfi_def_cfa_register 7
 5635 0006 7860     		str	r0, [r7, #4]
3395:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3396:./Drivers/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3397:./Drivers/FreeRTOS/tasks.c **** 
3398:./Drivers/FreeRTOS/tasks.c ****         if( xTask != NULL )
 5636              		.loc 1 3398 11
 5637 0008 7B68     		ldr	r3, [r7, #4]
 5638 000a 002B     		cmp	r3, #0
 5639 000c 05D0     		beq	.L308
3399:./Drivers/FreeRTOS/tasks.c ****         {
3400:./Drivers/FreeRTOS/tasks.c ****             pxTCB = xTask;
 5640              		.loc 1 3400 19
 5641 000e 7B68     		ldr	r3, [r7, #4]
 5642 0010 BB60     		str	r3, [r7, #8]
3401:./Drivers/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 5643              		.loc 1 3401 22
 5644 0012 BB68     		ldr	r3, [r7, #8]
 5645 0014 5B6C     		ldr	r3, [r3, #68]
 5646 0016 FB60     		str	r3, [r7, #12]
 5647 0018 01E0     		b	.L309
 5648              	.L308:
3402:./Drivers/FreeRTOS/tasks.c ****         }
3403:./Drivers/FreeRTOS/tasks.c ****         else
3404:./Drivers/FreeRTOS/tasks.c ****         {
3405:./Drivers/FreeRTOS/tasks.c ****             uxReturn = 0U;
 5649              		.loc 1 3405 22
 5650 001a 0023     		movs	r3, #0
 5651 001c FB60     		str	r3, [r7, #12]
 5652              	.L309:
3406:./Drivers/FreeRTOS/tasks.c ****         }
3407:./Drivers/FreeRTOS/tasks.c **** 
3408:./Drivers/FreeRTOS/tasks.c ****         return uxReturn;
 5653              		.loc 1 3408 16
 5654 001e FB68     		ldr	r3, [r7, #12]
3409:./Drivers/FreeRTOS/tasks.c ****     }
 5655              		.loc 1 3409 5
 5656 0020 1846     		mov	r0, r3
 5657 0022 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 164


 5658              	.LCFI182:
 5659              		.cfi_def_cfa_offset 4
 5660 0024 BD46     		mov	sp, r7
 5661              	.LCFI183:
 5662              		.cfi_def_cfa_register 13
 5663              		@ sp needed
 5664 0026 5DF8047B 		ldr	r7, [sp], #4
 5665              	.LCFI184:
 5666              		.cfi_restore 7
 5667              		.cfi_def_cfa_offset 0
 5668 002a 7047     		bx	lr
 5669              		.cfi_endproc
 5670              	.LFE40:
 5672              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5673              		.align	1
 5674              		.global	vTaskSetTaskNumber
 5675              		.syntax unified
 5676              		.thumb
 5677              		.thumb_func
 5678              		.fpu fpv4-sp-d16
 5680              	vTaskSetTaskNumber:
 5681              	.LFB41:
3410:./Drivers/FreeRTOS/tasks.c **** 
3411:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3412:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3413:./Drivers/FreeRTOS/tasks.c **** 
3414:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3415:./Drivers/FreeRTOS/tasks.c **** 
3416:./Drivers/FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3417:./Drivers/FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3418:./Drivers/FreeRTOS/tasks.c ****     {
 5682              		.loc 1 3418 5
 5683              		.cfi_startproc
 5684              		@ args = 0, pretend = 0, frame = 16
 5685              		@ frame_needed = 1, uses_anonymous_args = 0
 5686              		@ link register save eliminated.
 5687 0000 80B4     		push	{r7}
 5688              	.LCFI185:
 5689              		.cfi_def_cfa_offset 4
 5690              		.cfi_offset 7, -4
 5691 0002 85B0     		sub	sp, sp, #20
 5692              	.LCFI186:
 5693              		.cfi_def_cfa_offset 24
 5694 0004 00AF     		add	r7, sp, #0
 5695              	.LCFI187:
 5696              		.cfi_def_cfa_register 7
 5697 0006 7860     		str	r0, [r7, #4]
 5698 0008 3960     		str	r1, [r7]
3419:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3420:./Drivers/FreeRTOS/tasks.c **** 
3421:./Drivers/FreeRTOS/tasks.c ****         if( xTask != NULL )
 5699              		.loc 1 3421 11
 5700 000a 7B68     		ldr	r3, [r7, #4]
 5701 000c 002B     		cmp	r3, #0
 5702 000e 04D0     		beq	.L313
3422:./Drivers/FreeRTOS/tasks.c ****         {
3423:./Drivers/FreeRTOS/tasks.c ****             pxTCB = xTask;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 165


 5703              		.loc 1 3423 19
 5704 0010 7B68     		ldr	r3, [r7, #4]
 5705 0012 FB60     		str	r3, [r7, #12]
3424:./Drivers/FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 5706              		.loc 1 3424 33
 5707 0014 FB68     		ldr	r3, [r7, #12]
 5708 0016 3A68     		ldr	r2, [r7]
 5709 0018 5A64     		str	r2, [r3, #68]
 5710              	.L313:
3425:./Drivers/FreeRTOS/tasks.c ****         }
3426:./Drivers/FreeRTOS/tasks.c ****     }
 5711              		.loc 1 3426 5
 5712 001a 00BF     		nop
 5713 001c 1437     		adds	r7, r7, #20
 5714              	.LCFI188:
 5715              		.cfi_def_cfa_offset 4
 5716 001e BD46     		mov	sp, r7
 5717              	.LCFI189:
 5718              		.cfi_def_cfa_register 13
 5719              		@ sp needed
 5720 0020 5DF8047B 		ldr	r7, [sp], #4
 5721              	.LCFI190:
 5722              		.cfi_restore 7
 5723              		.cfi_def_cfa_offset 0
 5724 0024 7047     		bx	lr
 5725              		.cfi_endproc
 5726              	.LFE41:
 5728              		.section	.text.prvIdleTask,"ax",%progbits
 5729              		.align	1
 5730              		.syntax unified
 5731              		.thumb
 5732              		.thumb_func
 5733              		.fpu fpv4-sp-d16
 5735              	prvIdleTask:
 5736              	.LFB42:
3427:./Drivers/FreeRTOS/tasks.c **** 
3428:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3429:./Drivers/FreeRTOS/tasks.c **** 
3430:./Drivers/FreeRTOS/tasks.c **** /*
3431:./Drivers/FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3432:./Drivers/FreeRTOS/tasks.c ****  * The Idle task.
3433:./Drivers/FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3434:./Drivers/FreeRTOS/tasks.c ****  *
3435:./Drivers/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3436:./Drivers/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3437:./Drivers/FreeRTOS/tasks.c ****  *
3438:./Drivers/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3439:./Drivers/FreeRTOS/tasks.c ****  *
3440:./Drivers/FreeRTOS/tasks.c ****  */
3441:./Drivers/FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3442:./Drivers/FreeRTOS/tasks.c **** {
 5737              		.loc 1 3442 1
 5738              		.cfi_startproc
 5739              		@ args = 0, pretend = 0, frame = 8
 5740              		@ frame_needed = 1, uses_anonymous_args = 0
 5741 0000 80B5     		push	{r7, lr}
 5742              	.LCFI191:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 166


 5743              		.cfi_def_cfa_offset 8
 5744              		.cfi_offset 7, -8
 5745              		.cfi_offset 14, -4
 5746 0002 82B0     		sub	sp, sp, #8
 5747              	.LCFI192:
 5748              		.cfi_def_cfa_offset 16
 5749 0004 00AF     		add	r7, sp, #0
 5750              	.LCFI193:
 5751              		.cfi_def_cfa_register 7
 5752 0006 7860     		str	r0, [r7, #4]
 5753              	.L316:
3443:./Drivers/FreeRTOS/tasks.c ****     /* Stop warnings. */
3444:./Drivers/FreeRTOS/tasks.c ****     ( void ) pvParameters;
3445:./Drivers/FreeRTOS/tasks.c **** 
3446:./Drivers/FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3447:./Drivers/FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3448:./Drivers/FreeRTOS/tasks.c **** 
3449:./Drivers/FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3450:./Drivers/FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3451:./Drivers/FreeRTOS/tasks.c ****      * any. */
3452:./Drivers/FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3453:./Drivers/FreeRTOS/tasks.c **** 
3454:./Drivers/FreeRTOS/tasks.c ****     for( ; ; )
3455:./Drivers/FreeRTOS/tasks.c ****     {
3456:./Drivers/FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3457:./Drivers/FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3458:./Drivers/FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 5754              		.loc 1 3458 9
 5755 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3459:./Drivers/FreeRTOS/tasks.c **** 
3460:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3461:./Drivers/FreeRTOS/tasks.c ****             {
3462:./Drivers/FreeRTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3463:./Drivers/FreeRTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3464:./Drivers/FreeRTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3465:./Drivers/FreeRTOS/tasks.c ****                  * will automatically get the processor anyway. */
3466:./Drivers/FreeRTOS/tasks.c ****                 taskYIELD();
3467:./Drivers/FreeRTOS/tasks.c ****             }
3468:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3469:./Drivers/FreeRTOS/tasks.c **** 
3470:./Drivers/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3471:./Drivers/FreeRTOS/tasks.c ****             {
3472:./Drivers/FreeRTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3473:./Drivers/FreeRTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3474:./Drivers/FreeRTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3475:./Drivers/FreeRTOS/tasks.c ****                  * timeslice.
3476:./Drivers/FreeRTOS/tasks.c ****                  *
3477:./Drivers/FreeRTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3478:./Drivers/FreeRTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3479:./Drivers/FreeRTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3480:./Drivers/FreeRTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3481:./Drivers/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 5756              		.loc 1 3481 21
 5757 000c 074B     		ldr	r3, .L317
 5758 000e 1B68     		ldr	r3, [r3]
 5759              		.loc 1 3481 19
 5760 0010 012B     		cmp	r3, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 167


 5761 0012 07D9     		bls	.L315
3482:./Drivers/FreeRTOS/tasks.c ****                 {
3483:./Drivers/FreeRTOS/tasks.c ****                     taskYIELD();
 5762              		.loc 1 3483 21
 5763 0014 064B     		ldr	r3, .L317+4
 5764 0016 4FF08052 		mov	r2, #268435456
 5765 001a 1A60     		str	r2, [r3]
 5766              		.syntax unified
 5767              	@ 3483 "./Drivers/FreeRTOS/tasks.c" 1
 5768 001c BFF34F8F 		dsb
 5769              	@ 0 "" 2
 5770              	@ 3483 "./Drivers/FreeRTOS/tasks.c" 1
 5771 0020 BFF36F8F 		isb
 5772              	@ 0 "" 2
 5773              		.thumb
 5774              		.syntax unified
 5775              	.L315:
 5776              	.LBB256:
3484:./Drivers/FreeRTOS/tasks.c ****                 }
3485:./Drivers/FreeRTOS/tasks.c ****                 else
3486:./Drivers/FreeRTOS/tasks.c ****                 {
3487:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3488:./Drivers/FreeRTOS/tasks.c ****                 }
3489:./Drivers/FreeRTOS/tasks.c ****             }
3490:./Drivers/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3491:./Drivers/FreeRTOS/tasks.c **** 
3492:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3493:./Drivers/FreeRTOS/tasks.c ****             {
3494:./Drivers/FreeRTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3495:./Drivers/FreeRTOS/tasks.c **** 
3496:./Drivers/FreeRTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3497:./Drivers/FreeRTOS/tasks.c ****                  * allows the application designer to add background functionality
3498:./Drivers/FreeRTOS/tasks.c ****                  * without the overhead of a separate task.
3499:./Drivers/FreeRTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3500:./Drivers/FreeRTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3501:./Drivers/FreeRTOS/tasks.c ****                 vApplicationIdleHook();
 5777              		.loc 1 3501 17
 5778 0024 FFF7FEFF 		bl	vApplicationIdleHook
 5779              	.LBE256:
3458:./Drivers/FreeRTOS/tasks.c **** 
 5780              		.loc 1 3458 9
 5781 0028 EEE7     		b	.L316
 5782              	.L318:
 5783 002a 00BF     		.align	2
 5784              	.L317:
 5785 002c 00000000 		.word	pxReadyTasksLists
 5786 0030 04ED00E0 		.word	-536810236
 5787              		.cfi_endproc
 5788              	.LFE42:
 5790              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5791              		.align	1
 5792              		.syntax unified
 5793              		.thumb
 5794              		.thumb_func
 5795              		.fpu fpv4-sp-d16
 5797              	prvInitialiseTaskLists:
 5798              	.LFB43:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 168


3502:./Drivers/FreeRTOS/tasks.c ****             }
3503:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3504:./Drivers/FreeRTOS/tasks.c **** 
3505:./Drivers/FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3506:./Drivers/FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3507:./Drivers/FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3508:./Drivers/FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3509:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3510:./Drivers/FreeRTOS/tasks.c ****             {
3511:./Drivers/FreeRTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3512:./Drivers/FreeRTOS/tasks.c **** 
3513:./Drivers/FreeRTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3514:./Drivers/FreeRTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3515:./Drivers/FreeRTOS/tasks.c ****                  * test of the expected idle time is performed without the
3516:./Drivers/FreeRTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3517:./Drivers/FreeRTOS/tasks.c ****                  * valid. */
3518:./Drivers/FreeRTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3519:./Drivers/FreeRTOS/tasks.c **** 
3520:./Drivers/FreeRTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3521:./Drivers/FreeRTOS/tasks.c ****                 {
3522:./Drivers/FreeRTOS/tasks.c ****                     vTaskSuspendAll();
3523:./Drivers/FreeRTOS/tasks.c ****                     {
3524:./Drivers/FreeRTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3525:./Drivers/FreeRTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3526:./Drivers/FreeRTOS/tasks.c ****                          * be used. */
3527:./Drivers/FreeRTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3528:./Drivers/FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3529:./Drivers/FreeRTOS/tasks.c **** 
3530:./Drivers/FreeRTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3531:./Drivers/FreeRTOS/tasks.c ****                          * if the application does not want
3532:./Drivers/FreeRTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3533:./Drivers/FreeRTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3534:./Drivers/FreeRTOS/tasks.c **** 
3535:./Drivers/FreeRTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3536:./Drivers/FreeRTOS/tasks.c ****                         {
3537:./Drivers/FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3538:./Drivers/FreeRTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3539:./Drivers/FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3540:./Drivers/FreeRTOS/tasks.c ****                         }
3541:./Drivers/FreeRTOS/tasks.c ****                         else
3542:./Drivers/FreeRTOS/tasks.c ****                         {
3543:./Drivers/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3544:./Drivers/FreeRTOS/tasks.c ****                         }
3545:./Drivers/FreeRTOS/tasks.c ****                     }
3546:./Drivers/FreeRTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3547:./Drivers/FreeRTOS/tasks.c ****                 }
3548:./Drivers/FreeRTOS/tasks.c ****                 else
3549:./Drivers/FreeRTOS/tasks.c ****                 {
3550:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3551:./Drivers/FreeRTOS/tasks.c ****                 }
3552:./Drivers/FreeRTOS/tasks.c ****             }
3553:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3554:./Drivers/FreeRTOS/tasks.c ****     }
3555:./Drivers/FreeRTOS/tasks.c **** }
3556:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3557:./Drivers/FreeRTOS/tasks.c **** 
3558:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 169


3559:./Drivers/FreeRTOS/tasks.c **** 
3560:./Drivers/FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3561:./Drivers/FreeRTOS/tasks.c ****     {
3562:./Drivers/FreeRTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3563:./Drivers/FreeRTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3564:./Drivers/FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3565:./Drivers/FreeRTOS/tasks.c **** 
3566:./Drivers/FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3567:./Drivers/FreeRTOS/tasks.c **** 
3568:./Drivers/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3569:./Drivers/FreeRTOS/tasks.c ****         {
3570:./Drivers/FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3571:./Drivers/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:./Drivers/FreeRTOS/tasks.c ****         }
3573:./Drivers/FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3574:./Drivers/FreeRTOS/tasks.c ****         {
3575:./Drivers/FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3576:./Drivers/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3577:./Drivers/FreeRTOS/tasks.c ****         }
3578:./Drivers/FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3579:./Drivers/FreeRTOS/tasks.c ****         {
3580:./Drivers/FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3581:./Drivers/FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3582:./Drivers/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3583:./Drivers/FreeRTOS/tasks.c ****         }
3584:./Drivers/FreeRTOS/tasks.c ****         else
3585:./Drivers/FreeRTOS/tasks.c ****         {
3586:./Drivers/FreeRTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3587:./Drivers/FreeRTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3588:./Drivers/FreeRTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3589:./Drivers/FreeRTOS/tasks.c ****              * interrupts. */
3590:./Drivers/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3591:./Drivers/FreeRTOS/tasks.c ****             {
3592:./Drivers/FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3593:./Drivers/FreeRTOS/tasks.c ****             }
3594:./Drivers/FreeRTOS/tasks.c ****             else
3595:./Drivers/FreeRTOS/tasks.c ****             {
3596:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3597:./Drivers/FreeRTOS/tasks.c ****             }
3598:./Drivers/FreeRTOS/tasks.c ****         }
3599:./Drivers/FreeRTOS/tasks.c **** 
3600:./Drivers/FreeRTOS/tasks.c ****         return eReturn;
3601:./Drivers/FreeRTOS/tasks.c ****     }
3602:./Drivers/FreeRTOS/tasks.c **** 
3603:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3604:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3605:./Drivers/FreeRTOS/tasks.c **** 
3606:./Drivers/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3607:./Drivers/FreeRTOS/tasks.c **** 
3608:./Drivers/FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3609:./Drivers/FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3610:./Drivers/FreeRTOS/tasks.c ****                                             void * pvValue )
3611:./Drivers/FreeRTOS/tasks.c ****     {
3612:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3613:./Drivers/FreeRTOS/tasks.c **** 
3614:./Drivers/FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3615:./Drivers/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 170


3616:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3617:./Drivers/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3618:./Drivers/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3619:./Drivers/FreeRTOS/tasks.c ****         }
3620:./Drivers/FreeRTOS/tasks.c ****     }
3621:./Drivers/FreeRTOS/tasks.c **** 
3622:./Drivers/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3623:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3624:./Drivers/FreeRTOS/tasks.c **** 
3625:./Drivers/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3626:./Drivers/FreeRTOS/tasks.c **** 
3627:./Drivers/FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3628:./Drivers/FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3629:./Drivers/FreeRTOS/tasks.c ****     {
3630:./Drivers/FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3631:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3632:./Drivers/FreeRTOS/tasks.c **** 
3633:./Drivers/FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3634:./Drivers/FreeRTOS/tasks.c ****         {
3635:./Drivers/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3636:./Drivers/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3637:./Drivers/FreeRTOS/tasks.c ****         }
3638:./Drivers/FreeRTOS/tasks.c ****         else
3639:./Drivers/FreeRTOS/tasks.c ****         {
3640:./Drivers/FreeRTOS/tasks.c ****             pvReturn = NULL;
3641:./Drivers/FreeRTOS/tasks.c ****         }
3642:./Drivers/FreeRTOS/tasks.c **** 
3643:./Drivers/FreeRTOS/tasks.c ****         return pvReturn;
3644:./Drivers/FreeRTOS/tasks.c ****     }
3645:./Drivers/FreeRTOS/tasks.c **** 
3646:./Drivers/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3647:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3648:./Drivers/FreeRTOS/tasks.c **** 
3649:./Drivers/FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3650:./Drivers/FreeRTOS/tasks.c **** 
3651:./Drivers/FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3652:./Drivers/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3653:./Drivers/FreeRTOS/tasks.c ****     {
3654:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3655:./Drivers/FreeRTOS/tasks.c **** 
3656:./Drivers/FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3657:./Drivers/FreeRTOS/tasks.c ****          * the calling task. */
3658:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3659:./Drivers/FreeRTOS/tasks.c **** 
3660:./Drivers/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3661:./Drivers/FreeRTOS/tasks.c ****     }
3662:./Drivers/FreeRTOS/tasks.c **** 
3663:./Drivers/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3664:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3665:./Drivers/FreeRTOS/tasks.c **** 
3666:./Drivers/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3667:./Drivers/FreeRTOS/tasks.c **** {
 5799              		.loc 1 3667 1
 5800              		.cfi_startproc
 5801              		@ args = 0, pretend = 0, frame = 8
 5802              		@ frame_needed = 1, uses_anonymous_args = 0
 5803 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 171


 5804              	.LCFI194:
 5805              		.cfi_def_cfa_offset 8
 5806              		.cfi_offset 7, -8
 5807              		.cfi_offset 14, -4
 5808 0002 82B0     		sub	sp, sp, #8
 5809              	.LCFI195:
 5810              		.cfi_def_cfa_offset 16
 5811 0004 00AF     		add	r7, sp, #0
 5812              	.LCFI196:
 5813              		.cfi_def_cfa_register 7
3668:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3669:./Drivers/FreeRTOS/tasks.c **** 
3670:./Drivers/FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 5814              		.loc 1 3670 21
 5815 0006 0023     		movs	r3, #0
 5816 0008 7B60     		str	r3, [r7, #4]
 5817              		.loc 1 3670 5
 5818 000a 0CE0     		b	.L320
 5819              	.L321:
3671:./Drivers/FreeRTOS/tasks.c ****     {
3672:./Drivers/FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5820              		.loc 1 3672 9 discriminator 3
 5821 000c 7A68     		ldr	r2, [r7, #4]
 5822 000e 1346     		mov	r3, r2
 5823 0010 9B00     		lsls	r3, r3, #2
 5824 0012 1344     		add	r3, r3, r2
 5825 0014 9B00     		lsls	r3, r3, #2
 5826 0016 124A     		ldr	r2, .L322
 5827 0018 1344     		add	r3, r3, r2
 5828 001a 1846     		mov	r0, r3
 5829 001c FFF7FEFF 		bl	vListInitialise
3670:./Drivers/FreeRTOS/tasks.c ****     {
 5830              		.loc 1 3670 104 discriminator 3
 5831 0020 7B68     		ldr	r3, [r7, #4]
 5832 0022 0133     		adds	r3, r3, #1
 5833 0024 7B60     		str	r3, [r7, #4]
 5834              	.L320:
3670:./Drivers/FreeRTOS/tasks.c ****     {
 5835              		.loc 1 3670 5 discriminator 1
 5836 0026 7B68     		ldr	r3, [r7, #4]
 5837 0028 042B     		cmp	r3, #4
 5838 002a EFD9     		bls	.L321
3673:./Drivers/FreeRTOS/tasks.c ****     }
3674:./Drivers/FreeRTOS/tasks.c **** 
3675:./Drivers/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 5839              		.loc 1 3675 5
 5840 002c 0D48     		ldr	r0, .L322+4
 5841 002e FFF7FEFF 		bl	vListInitialise
3676:./Drivers/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 5842              		.loc 1 3676 5
 5843 0032 0D48     		ldr	r0, .L322+8
 5844 0034 FFF7FEFF 		bl	vListInitialise
3677:./Drivers/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 5845              		.loc 1 3677 5
 5846 0038 0C48     		ldr	r0, .L322+12
 5847 003a FFF7FEFF 		bl	vListInitialise
3678:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 172


3679:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3680:./Drivers/FreeRTOS/tasks.c ****         {
3681:./Drivers/FreeRTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
 5848              		.loc 1 3681 13
 5849 003e 0C48     		ldr	r0, .L322+16
 5850 0040 FFF7FEFF 		bl	vListInitialise
3682:./Drivers/FreeRTOS/tasks.c ****         }
3683:./Drivers/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3684:./Drivers/FreeRTOS/tasks.c **** 
3685:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3686:./Drivers/FreeRTOS/tasks.c ****         {
3687:./Drivers/FreeRTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
 5851              		.loc 1 3687 13
 5852 0044 0B48     		ldr	r0, .L322+20
 5853 0046 FFF7FEFF 		bl	vListInitialise
3688:./Drivers/FreeRTOS/tasks.c ****         }
3689:./Drivers/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3690:./Drivers/FreeRTOS/tasks.c **** 
3691:./Drivers/FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3692:./Drivers/FreeRTOS/tasks.c ****      * using list2. */
3693:./Drivers/FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 5854              		.loc 1 3693 23
 5855 004a 0B4B     		ldr	r3, .L322+24
 5856 004c 054A     		ldr	r2, .L322+4
 5857 004e 1A60     		str	r2, [r3]
3694:./Drivers/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5858              		.loc 1 3694 31
 5859 0050 0A4B     		ldr	r3, .L322+28
 5860 0052 054A     		ldr	r2, .L322+8
 5861 0054 1A60     		str	r2, [r3]
3695:./Drivers/FreeRTOS/tasks.c **** }
 5862              		.loc 1 3695 1
 5863 0056 00BF     		nop
 5864 0058 0837     		adds	r7, r7, #8
 5865              	.LCFI197:
 5866              		.cfi_def_cfa_offset 8
 5867 005a BD46     		mov	sp, r7
 5868              	.LCFI198:
 5869              		.cfi_def_cfa_register 13
 5870              		@ sp needed
 5871 005c 80BD     		pop	{r7, pc}
 5872              	.L323:
 5873 005e 00BF     		.align	2
 5874              	.L322:
 5875 0060 00000000 		.word	pxReadyTasksLists
 5876 0064 00000000 		.word	xDelayedTaskList1
 5877 0068 00000000 		.word	xDelayedTaskList2
 5878 006c 00000000 		.word	xPendingReadyList
 5879 0070 00000000 		.word	xTasksWaitingTermination
 5880 0074 00000000 		.word	xSuspendedTaskList
 5881 0078 00000000 		.word	pxDelayedTaskList
 5882 007c 00000000 		.word	pxOverflowDelayedTaskList
 5883              		.cfi_endproc
 5884              	.LFE43:
 5886              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5887              		.align	1
 5888              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 173


 5889              		.thumb
 5890              		.thumb_func
 5891              		.fpu fpv4-sp-d16
 5893              	prvCheckTasksWaitingTermination:
 5894              	.LFB44:
3696:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3697:./Drivers/FreeRTOS/tasks.c **** 
3698:./Drivers/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3699:./Drivers/FreeRTOS/tasks.c **** {
 5895              		.loc 1 3699 1
 5896              		.cfi_startproc
 5897              		@ args = 0, pretend = 0, frame = 8
 5898              		@ frame_needed = 1, uses_anonymous_args = 0
 5899 0000 80B5     		push	{r7, lr}
 5900              	.LCFI199:
 5901              		.cfi_def_cfa_offset 8
 5902              		.cfi_offset 7, -8
 5903              		.cfi_offset 14, -4
 5904 0002 82B0     		sub	sp, sp, #8
 5905              	.LCFI200:
 5906              		.cfi_def_cfa_offset 16
 5907 0004 00AF     		add	r7, sp, #0
 5908              	.LCFI201:
 5909              		.cfi_def_cfa_register 7
 5910              	.LBB257:
3700:./Drivers/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3701:./Drivers/FreeRTOS/tasks.c **** 
3702:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3703:./Drivers/FreeRTOS/tasks.c ****         {
3704:./Drivers/FreeRTOS/tasks.c ****             TCB_t * pxTCB;
3705:./Drivers/FreeRTOS/tasks.c **** 
3706:./Drivers/FreeRTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3707:./Drivers/FreeRTOS/tasks.c ****              * being called too often in the idle task. */
3708:./Drivers/FreeRTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5911              		.loc 1 3708 18
 5912 0006 19E0     		b	.L325
 5913              	.L326:
3709:./Drivers/FreeRTOS/tasks.c ****             {
3710:./Drivers/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
 5914              		.loc 1 3710 17
 5915 0008 FFF7FEFF 		bl	vPortEnterCritical
3711:./Drivers/FreeRTOS/tasks.c ****                 {
3712:./Drivers/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
 5916              		.loc 1 3712 29
 5917 000c 104B     		ldr	r3, .L327
 5918 000e DB68     		ldr	r3, [r3, #12]
 5919              		.loc 1 3712 27
 5920 0010 DB68     		ldr	r3, [r3, #12]
 5921 0012 7B60     		str	r3, [r7, #4]
3713:./Drivers/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5922              		.loc 1 3713 30
 5923 0014 7B68     		ldr	r3, [r7, #4]
 5924 0016 0433     		adds	r3, r3, #4
 5925 0018 1846     		mov	r0, r3
 5926 001a FFF7FEFF 		bl	uxListRemove
3714:./Drivers/FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 5927              		.loc 1 3714 21
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 174


 5928 001e 0D4B     		ldr	r3, .L327+4
 5929 0020 1B68     		ldr	r3, [r3]
 5930 0022 013B     		subs	r3, r3, #1
 5931 0024 0B4A     		ldr	r2, .L327+4
 5932 0026 1360     		str	r3, [r2]
3715:./Drivers/FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 5933              		.loc 1 3715 21
 5934 0028 0B4B     		ldr	r3, .L327+8
 5935 002a 1B68     		ldr	r3, [r3]
 5936 002c 013B     		subs	r3, r3, #1
 5937 002e 0A4A     		ldr	r2, .L327+8
 5938 0030 1360     		str	r3, [r2]
3716:./Drivers/FreeRTOS/tasks.c ****                 }
3717:./Drivers/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
 5939              		.loc 1 3717 17
 5940 0032 FFF7FEFF 		bl	vPortExitCritical
3718:./Drivers/FreeRTOS/tasks.c **** 
3719:./Drivers/FreeRTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 5941              		.loc 1 3719 17
 5942 0036 7868     		ldr	r0, [r7, #4]
 5943 0038 FFF7FEFF 		bl	prvDeleteTCB
 5944              	.L325:
3708:./Drivers/FreeRTOS/tasks.c ****             {
 5945              		.loc 1 3708 49
 5946 003c 064B     		ldr	r3, .L327+8
 5947 003e 1B68     		ldr	r3, [r3]
3708:./Drivers/FreeRTOS/tasks.c ****             {
 5948              		.loc 1 3708 18
 5949 0040 002B     		cmp	r3, #0
 5950 0042 E1D1     		bne	.L326
 5951              	.LBE257:
3720:./Drivers/FreeRTOS/tasks.c ****             }
3721:./Drivers/FreeRTOS/tasks.c ****         }
3722:./Drivers/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3723:./Drivers/FreeRTOS/tasks.c **** }
 5952              		.loc 1 3723 1
 5953 0044 00BF     		nop
 5954 0046 00BF     		nop
 5955 0048 0837     		adds	r7, r7, #8
 5956              	.LCFI202:
 5957              		.cfi_def_cfa_offset 8
 5958 004a BD46     		mov	sp, r7
 5959              	.LCFI203:
 5960              		.cfi_def_cfa_register 13
 5961              		@ sp needed
 5962 004c 80BD     		pop	{r7, pc}
 5963              	.L328:
 5964 004e 00BF     		.align	2
 5965              	.L327:
 5966 0050 00000000 		.word	xTasksWaitingTermination
 5967 0054 00000000 		.word	uxCurrentNumberOfTasks
 5968 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5969              		.cfi_endproc
 5970              	.LFE44:
 5972              		.section	.text.vTaskGetInfo,"ax",%progbits
 5973              		.align	1
 5974              		.global	vTaskGetInfo
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 175


 5975              		.syntax unified
 5976              		.thumb
 5977              		.thumb_func
 5978              		.fpu fpv4-sp-d16
 5980              	vTaskGetInfo:
 5981              	.LFB45:
3724:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3725:./Drivers/FreeRTOS/tasks.c **** 
3726:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3727:./Drivers/FreeRTOS/tasks.c **** 
3728:./Drivers/FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3729:./Drivers/FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3730:./Drivers/FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3731:./Drivers/FreeRTOS/tasks.c ****                        eTaskState eState )
3732:./Drivers/FreeRTOS/tasks.c ****     {
 5982              		.loc 1 3732 5
 5983              		.cfi_startproc
 5984              		@ args = 0, pretend = 0, frame = 24
 5985              		@ frame_needed = 1, uses_anonymous_args = 0
 5986 0000 80B5     		push	{r7, lr}
 5987              	.LCFI204:
 5988              		.cfi_def_cfa_offset 8
 5989              		.cfi_offset 7, -8
 5990              		.cfi_offset 14, -4
 5991 0002 86B0     		sub	sp, sp, #24
 5992              	.LCFI205:
 5993              		.cfi_def_cfa_offset 32
 5994 0004 00AF     		add	r7, sp, #0
 5995              	.LCFI206:
 5996              		.cfi_def_cfa_register 7
 5997 0006 F860     		str	r0, [r7, #12]
 5998 0008 B960     		str	r1, [r7, #8]
 5999 000a 7A60     		str	r2, [r7, #4]
 6000 000c FB70     		strb	r3, [r7, #3]
3733:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3734:./Drivers/FreeRTOS/tasks.c **** 
3735:./Drivers/FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3736:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 6001              		.loc 1 3736 17
 6002 000e FB68     		ldr	r3, [r7, #12]
 6003 0010 002B     		cmp	r3, #0
 6004 0012 02D1     		bne	.L330
 6005              		.loc 1 3736 17 is_stmt 0 discriminator 1
 6006 0014 2C4B     		ldr	r3, .L339
 6007 0016 1B68     		ldr	r3, [r3]
 6008 0018 00E0     		b	.L331
 6009              	.L330:
 6010              		.loc 1 3736 17 discriminator 2
 6011 001a FB68     		ldr	r3, [r7, #12]
 6012              	.L331:
 6013              		.loc 1 3736 15 is_stmt 1 discriminator 4
 6014 001c 7B61     		str	r3, [r7, #20]
3737:./Drivers/FreeRTOS/tasks.c **** 
3738:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 6015              		.loc 1 3738 31 discriminator 4
 6016 001e BB68     		ldr	r3, [r7, #8]
 6017 0020 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 176


 6018 0022 1A60     		str	r2, [r3]
3739:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 6019              		.loc 1 3739 53 discriminator 4
 6020 0024 7B69     		ldr	r3, [r7, #20]
 6021 0026 03F13402 		add	r2, r3, #52
 6022              		.loc 1 3739 34 discriminator 4
 6023 002a BB68     		ldr	r3, [r7, #8]
 6024 002c 5A60     		str	r2, [r3, #4]
3740:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 6025              		.loc 1 3740 48 discriminator 4
 6026 002e 7B69     		ldr	r3, [r7, #20]
 6027 0030 DA6A     		ldr	r2, [r3, #44]
 6028              		.loc 1 3740 41 discriminator 4
 6029 0032 BB68     		ldr	r3, [r7, #8]
 6030 0034 1A61     		str	r2, [r3, #16]
3741:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 6031              		.loc 1 3741 42 discriminator 4
 6032 0036 7B69     		ldr	r3, [r7, #20]
 6033 0038 1A6B     		ldr	r2, [r3, #48]
 6034              		.loc 1 3741 35 discriminator 4
 6035 003a BB68     		ldr	r3, [r7, #8]
 6036 003c DA61     		str	r2, [r3, #28]
3742:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 6037              		.loc 1 3742 42 discriminator 4
 6038 003e 7B69     		ldr	r3, [r7, #20]
 6039 0040 1A6C     		ldr	r2, [r3, #64]
 6040              		.loc 1 3742 35 discriminator 4
 6041 0042 BB68     		ldr	r3, [r7, #8]
 6042 0044 9A60     		str	r2, [r3, #8]
3743:./Drivers/FreeRTOS/tasks.c **** 
3744:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3745:./Drivers/FreeRTOS/tasks.c ****             {
3746:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 6043              		.loc 1 3746 53 discriminator 4
 6044 0046 7B69     		ldr	r3, [r7, #20]
 6045 0048 9A6C     		ldr	r2, [r3, #72]
 6046              		.loc 1 3746 46 discriminator 4
 6047 004a BB68     		ldr	r3, [r7, #8]
 6048 004c 5A61     		str	r2, [r3, #20]
3747:./Drivers/FreeRTOS/tasks.c ****             }
3748:./Drivers/FreeRTOS/tasks.c ****         #else
3749:./Drivers/FreeRTOS/tasks.c ****             {
3750:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3751:./Drivers/FreeRTOS/tasks.c ****             }
3752:./Drivers/FreeRTOS/tasks.c ****         #endif
3753:./Drivers/FreeRTOS/tasks.c **** 
3754:./Drivers/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3755:./Drivers/FreeRTOS/tasks.c ****             {
3756:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3757:./Drivers/FreeRTOS/tasks.c ****             }
3758:./Drivers/FreeRTOS/tasks.c ****         #else
3759:./Drivers/FreeRTOS/tasks.c ****             {
3760:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 6049              		.loc 1 3760 48 discriminator 4
 6050 004e BB68     		ldr	r3, [r7, #8]
 6051 0050 0022     		movs	r2, #0
 6052 0052 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 177


3761:./Drivers/FreeRTOS/tasks.c ****             }
3762:./Drivers/FreeRTOS/tasks.c ****         #endif
3763:./Drivers/FreeRTOS/tasks.c **** 
3764:./Drivers/FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3765:./Drivers/FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3766:./Drivers/FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3767:./Drivers/FreeRTOS/tasks.c ****         if( eState != eInvalid )
 6053              		.loc 1 3767 11 discriminator 4
 6054 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 6055 0056 052B     		cmp	r3, #5
 6056 0058 1AD0     		beq	.L332
3768:./Drivers/FreeRTOS/tasks.c ****         {
3769:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 6057              		.loc 1 3769 23
 6058 005a 1B4B     		ldr	r3, .L339
 6059 005c 1B68     		ldr	r3, [r3]
 6060              		.loc 1 3769 15
 6061 005e 7A69     		ldr	r2, [r7, #20]
 6062 0060 9A42     		cmp	r2, r3
 6063 0062 03D1     		bne	.L333
3770:./Drivers/FreeRTOS/tasks.c ****             {
3771:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
 6064              		.loc 1 3771 45
 6065 0064 BB68     		ldr	r3, [r7, #8]
 6066 0066 0022     		movs	r2, #0
 6067 0068 1A73     		strb	r2, [r3, #12]
 6068 006a 18E0     		b	.L334
 6069              	.L333:
3772:./Drivers/FreeRTOS/tasks.c ****             }
3773:./Drivers/FreeRTOS/tasks.c ****             else
3774:./Drivers/FreeRTOS/tasks.c ****             {
3775:./Drivers/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
 6070              		.loc 1 3775 45
 6071 006c BB68     		ldr	r3, [r7, #8]
 6072 006e FA78     		ldrb	r2, [r7, #3]
 6073 0070 1A73     		strb	r2, [r3, #12]
3776:./Drivers/FreeRTOS/tasks.c **** 
3777:./Drivers/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3778:./Drivers/FreeRTOS/tasks.c ****                     {
3779:./Drivers/FreeRTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3780:./Drivers/FreeRTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3781:./Drivers/FreeRTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3782:./Drivers/FreeRTOS/tasks.c ****                         if( eState == eSuspended )
 6074              		.loc 1 3782 27
 6075 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 6076 0074 032B     		cmp	r3, #3
 6077 0076 12D1     		bne	.L334
3783:./Drivers/FreeRTOS/tasks.c ****                         {
3784:./Drivers/FreeRTOS/tasks.c ****                             vTaskSuspendAll();
 6078              		.loc 1 3784 29
 6079 0078 FFF7FEFF 		bl	vTaskSuspendAll
3785:./Drivers/FreeRTOS/tasks.c ****                             {
3786:./Drivers/FreeRTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 6080              		.loc 1 3786 37
 6081 007c 7B69     		ldr	r3, [r7, #20]
 6082 007e 9B6A     		ldr	r3, [r3, #40]
 6083              		.loc 1 3786 35
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 178


 6084 0080 002B     		cmp	r3, #0
 6085 0082 02D0     		beq	.L335
3787:./Drivers/FreeRTOS/tasks.c ****                                 {
3788:./Drivers/FreeRTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
 6086              		.loc 1 3788 65
 6087 0084 BB68     		ldr	r3, [r7, #8]
 6088 0086 0222     		movs	r2, #2
 6089 0088 1A73     		strb	r2, [r3, #12]
 6090              	.L335:
3789:./Drivers/FreeRTOS/tasks.c ****                                 }
3790:./Drivers/FreeRTOS/tasks.c ****                             }
3791:./Drivers/FreeRTOS/tasks.c ****                             ( void ) xTaskResumeAll();
 6091              		.loc 1 3791 38
 6092 008a FFF7FEFF 		bl	xTaskResumeAll
 6093 008e 06E0     		b	.L334
 6094              	.L332:
3792:./Drivers/FreeRTOS/tasks.c ****                         }
3793:./Drivers/FreeRTOS/tasks.c ****                     }
3794:./Drivers/FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3795:./Drivers/FreeRTOS/tasks.c ****             }
3796:./Drivers/FreeRTOS/tasks.c ****         }
3797:./Drivers/FreeRTOS/tasks.c ****         else
3798:./Drivers/FreeRTOS/tasks.c ****         {
3799:./Drivers/FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 6095              		.loc 1 3799 43
 6096 0090 7869     		ldr	r0, [r7, #20]
 6097 0092 FFF7FEFF 		bl	eTaskGetState
 6098 0096 0346     		mov	r3, r0
 6099 0098 1A46     		mov	r2, r3
 6100              		.loc 1 3799 41
 6101 009a BB68     		ldr	r3, [r7, #8]
 6102 009c 1A73     		strb	r2, [r3, #12]
 6103              	.L334:
3800:./Drivers/FreeRTOS/tasks.c ****         }
3801:./Drivers/FreeRTOS/tasks.c **** 
3802:./Drivers/FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3803:./Drivers/FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3804:./Drivers/FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
 6104              		.loc 1 3804 11
 6105 009e 7B68     		ldr	r3, [r7, #4]
 6106 00a0 002B     		cmp	r3, #0
 6107 00a2 09D0     		beq	.L336
3805:./Drivers/FreeRTOS/tasks.c ****         {
3806:./Drivers/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3807:./Drivers/FreeRTOS/tasks.c ****                 {
3808:./Drivers/FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3809:./Drivers/FreeRTOS/tasks.c ****                 }
3810:./Drivers/FreeRTOS/tasks.c ****             #else
3811:./Drivers/FreeRTOS/tasks.c ****                 {
3812:./Drivers/FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
 6108              		.loc 1 3812 105
 6109 00a4 7B69     		ldr	r3, [r7, #20]
 6110 00a6 1B6B     		ldr	r3, [r3, #48]
 6111              		.loc 1 3812 58
 6112 00a8 1846     		mov	r0, r3
 6113 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6114 00ae 0346     		mov	r3, r0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 179


 6115 00b0 1A46     		mov	r2, r3
 6116              		.loc 1 3812 56
 6117 00b2 BB68     		ldr	r3, [r7, #8]
 6118 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3813:./Drivers/FreeRTOS/tasks.c ****                 }
3814:./Drivers/FreeRTOS/tasks.c ****             #endif
3815:./Drivers/FreeRTOS/tasks.c ****         }
3816:./Drivers/FreeRTOS/tasks.c ****         else
3817:./Drivers/FreeRTOS/tasks.c ****         {
3818:./Drivers/FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3819:./Drivers/FreeRTOS/tasks.c ****         }
3820:./Drivers/FreeRTOS/tasks.c ****     }
 6119              		.loc 1 3820 5
 6120 00b6 02E0     		b	.L338
 6121              	.L336:
3818:./Drivers/FreeRTOS/tasks.c ****         }
 6122              		.loc 1 3818 48
 6123 00b8 BB68     		ldr	r3, [r7, #8]
 6124 00ba 0022     		movs	r2, #0
 6125 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 6126              	.L338:
 6127              		.loc 1 3820 5
 6128 00be 00BF     		nop
 6129 00c0 1837     		adds	r7, r7, #24
 6130              	.LCFI207:
 6131              		.cfi_def_cfa_offset 8
 6132 00c2 BD46     		mov	sp, r7
 6133              	.LCFI208:
 6134              		.cfi_def_cfa_register 13
 6135              		@ sp needed
 6136 00c4 80BD     		pop	{r7, pc}
 6137              	.L340:
 6138 00c6 00BF     		.align	2
 6139              	.L339:
 6140 00c8 00000000 		.word	pxCurrentTCB
 6141              		.cfi_endproc
 6142              	.LFE45:
 6144              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 6145              		.align	1
 6146              		.syntax unified
 6147              		.thumb
 6148              		.thumb_func
 6149              		.fpu fpv4-sp-d16
 6151              	prvListTasksWithinSingleList:
 6152              	.LFB46:
3821:./Drivers/FreeRTOS/tasks.c **** 
3822:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3823:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3824:./Drivers/FreeRTOS/tasks.c **** 
3825:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3826:./Drivers/FreeRTOS/tasks.c **** 
3827:./Drivers/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3828:./Drivers/FreeRTOS/tasks.c ****                                                      List_t * pxList,
3829:./Drivers/FreeRTOS/tasks.c ****                                                      eTaskState eState )
3830:./Drivers/FreeRTOS/tasks.c ****     {
 6153              		.loc 1 3830 5
 6154              		.cfi_startproc
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 180


 6155              		@ args = 0, pretend = 0, frame = 40
 6156              		@ frame_needed = 1, uses_anonymous_args = 0
 6157 0000 80B5     		push	{r7, lr}
 6158              	.LCFI209:
 6159              		.cfi_def_cfa_offset 8
 6160              		.cfi_offset 7, -8
 6161              		.cfi_offset 14, -4
 6162 0002 8AB0     		sub	sp, sp, #40
 6163              	.LCFI210:
 6164              		.cfi_def_cfa_offset 48
 6165 0004 00AF     		add	r7, sp, #0
 6166              	.LCFI211:
 6167              		.cfi_def_cfa_register 7
 6168 0006 F860     		str	r0, [r7, #12]
 6169 0008 B960     		str	r1, [r7, #8]
 6170 000a 1346     		mov	r3, r2
 6171 000c FB71     		strb	r3, [r7, #7]
3831:./Drivers/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3832:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
 6172              		.loc 1 3832 21
 6173 000e 0023     		movs	r3, #0
 6174 0010 7B62     		str	r3, [r7, #36]
3833:./Drivers/FreeRTOS/tasks.c **** 
3834:./Drivers/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 6175              		.loc 1 3834 13
 6176 0012 BB68     		ldr	r3, [r7, #8]
 6177 0014 1B68     		ldr	r3, [r3]
 6178              		.loc 1 3834 11
 6179 0016 002B     		cmp	r3, #0
 6180 0018 3FD0     		beq	.L342
 6181              	.LBB258:
3835:./Drivers/FreeRTOS/tasks.c ****         {
3836:./Drivers/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 6182              		.loc 1 3836 13
 6183 001a BB68     		ldr	r3, [r7, #8]
 6184 001c 3B62     		str	r3, [r7, #32]
 6185 001e 3B6A     		ldr	r3, [r7, #32]
 6186 0020 5B68     		ldr	r3, [r3, #4]
 6187 0022 5A68     		ldr	r2, [r3, #4]
 6188 0024 3B6A     		ldr	r3, [r7, #32]
 6189 0026 5A60     		str	r2, [r3, #4]
 6190 0028 3B6A     		ldr	r3, [r7, #32]
 6191 002a 5A68     		ldr	r2, [r3, #4]
 6192 002c 3B6A     		ldr	r3, [r7, #32]
 6193 002e 0833     		adds	r3, r3, #8
 6194 0030 9A42     		cmp	r2, r3
 6195 0032 04D1     		bne	.L343
 6196              		.loc 1 3836 13 is_stmt 0 discriminator 1
 6197 0034 3B6A     		ldr	r3, [r7, #32]
 6198 0036 5B68     		ldr	r3, [r3, #4]
 6199 0038 5A68     		ldr	r2, [r3, #4]
 6200 003a 3B6A     		ldr	r3, [r7, #32]
 6201 003c 5A60     		str	r2, [r3, #4]
 6202              	.L343:
 6203              		.loc 1 3836 13 discriminator 3
 6204 003e 3B6A     		ldr	r3, [r7, #32]
 6205 0040 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 181


 6206 0042 DB68     		ldr	r3, [r3, #12]
 6207 0044 FB61     		str	r3, [r7, #28]
 6208              	.L345:
 6209              	.LBE258:
 6210              	.LBB259:
3837:./Drivers/FreeRTOS/tasks.c **** 
3838:./Drivers/FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3839:./Drivers/FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3840:./Drivers/FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3841:./Drivers/FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3842:./Drivers/FreeRTOS/tasks.c ****             do
3843:./Drivers/FreeRTOS/tasks.c ****             {
3844:./Drivers/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 6211              		.loc 1 3844 17 is_stmt 1
 6212 0046 BB68     		ldr	r3, [r7, #8]
 6213 0048 BB61     		str	r3, [r7, #24]
 6214 004a BB69     		ldr	r3, [r7, #24]
 6215 004c 5B68     		ldr	r3, [r3, #4]
 6216 004e 5A68     		ldr	r2, [r3, #4]
 6217 0050 BB69     		ldr	r3, [r7, #24]
 6218 0052 5A60     		str	r2, [r3, #4]
 6219 0054 BB69     		ldr	r3, [r7, #24]
 6220 0056 5A68     		ldr	r2, [r3, #4]
 6221 0058 BB69     		ldr	r3, [r7, #24]
 6222 005a 0833     		adds	r3, r3, #8
 6223 005c 9A42     		cmp	r2, r3
 6224 005e 04D1     		bne	.L344
 6225              		.loc 1 3844 17 is_stmt 0 discriminator 1
 6226 0060 BB69     		ldr	r3, [r7, #24]
 6227 0062 5B68     		ldr	r3, [r3, #4]
 6228 0064 5A68     		ldr	r2, [r3, #4]
 6229 0066 BB69     		ldr	r3, [r7, #24]
 6230 0068 5A60     		str	r2, [r3, #4]
 6231              	.L344:
 6232              		.loc 1 3844 17 discriminator 3
 6233 006a BB69     		ldr	r3, [r7, #24]
 6234 006c 5B68     		ldr	r3, [r3, #4]
 6235 006e DB68     		ldr	r3, [r3, #12]
 6236 0070 7B61     		str	r3, [r7, #20]
 6237              	.LBE259:
3845:./Drivers/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 6238              		.loc 1 3845 79 is_stmt 1 discriminator 3
 6239 0072 7A6A     		ldr	r2, [r7, #36]
 6240 0074 1346     		mov	r3, r2
 6241 0076 DB00     		lsls	r3, r3, #3
 6242 0078 1344     		add	r3, r3, r2
 6243 007a 9B00     		lsls	r3, r3, #2
 6244 007c 1A46     		mov	r2, r3
 6245              		.loc 1 3845 17 discriminator 3
 6246 007e FB68     		ldr	r3, [r7, #12]
 6247 0080 9918     		adds	r1, r3, r2
 6248 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6249 0084 0122     		movs	r2, #1
 6250 0086 7869     		ldr	r0, [r7, #20]
 6251 0088 FFF7FEFF 		bl	vTaskGetInfo
3846:./Drivers/FreeRTOS/tasks.c ****                 uxTask++;
 6252              		.loc 1 3846 23 discriminator 3
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 182


 6253 008c 7B6A     		ldr	r3, [r7, #36]
 6254 008e 0133     		adds	r3, r3, #1
 6255 0090 7B62     		str	r3, [r7, #36]
3847:./Drivers/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 6256              		.loc 1 3847 13 discriminator 3
 6257 0092 7A69     		ldr	r2, [r7, #20]
 6258 0094 FB69     		ldr	r3, [r7, #28]
 6259 0096 9A42     		cmp	r2, r3
 6260 0098 D5D1     		bne	.L345
 6261              	.L342:
3848:./Drivers/FreeRTOS/tasks.c ****         }
3849:./Drivers/FreeRTOS/tasks.c ****         else
3850:./Drivers/FreeRTOS/tasks.c ****         {
3851:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3852:./Drivers/FreeRTOS/tasks.c ****         }
3853:./Drivers/FreeRTOS/tasks.c **** 
3854:./Drivers/FreeRTOS/tasks.c ****         return uxTask;
 6262              		.loc 1 3854 16
 6263 009a 7B6A     		ldr	r3, [r7, #36]
3855:./Drivers/FreeRTOS/tasks.c ****     }
 6264              		.loc 1 3855 5
 6265 009c 1846     		mov	r0, r3
 6266 009e 2837     		adds	r7, r7, #40
 6267              	.LCFI212:
 6268              		.cfi_def_cfa_offset 8
 6269 00a0 BD46     		mov	sp, r7
 6270              	.LCFI213:
 6271              		.cfi_def_cfa_register 13
 6272              		@ sp needed
 6273 00a2 80BD     		pop	{r7, pc}
 6274              		.cfi_endproc
 6275              	.LFE46:
 6277              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6278              		.align	1
 6279              		.syntax unified
 6280              		.thumb
 6281              		.thumb_func
 6282              		.fpu fpv4-sp-d16
 6284              	prvTaskCheckFreeStackSpace:
 6285              	.LFB47:
3856:./Drivers/FreeRTOS/tasks.c **** 
3857:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3858:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3859:./Drivers/FreeRTOS/tasks.c **** 
3860:./Drivers/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3861:./Drivers/FreeRTOS/tasks.c **** 
3862:./Drivers/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3863:./Drivers/FreeRTOS/tasks.c ****     {
 6286              		.loc 1 3863 5
 6287              		.cfi_startproc
 6288              		@ args = 0, pretend = 0, frame = 16
 6289              		@ frame_needed = 1, uses_anonymous_args = 0
 6290              		@ link register save eliminated.
 6291 0000 80B4     		push	{r7}
 6292              	.LCFI214:
 6293              		.cfi_def_cfa_offset 4
 6294              		.cfi_offset 7, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 183


 6295 0002 85B0     		sub	sp, sp, #20
 6296              	.LCFI215:
 6297              		.cfi_def_cfa_offset 24
 6298 0004 00AF     		add	r7, sp, #0
 6299              	.LCFI216:
 6300              		.cfi_def_cfa_register 7
 6301 0006 7860     		str	r0, [r7, #4]
3864:./Drivers/FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
 6302              		.loc 1 3864 18
 6303 0008 0023     		movs	r3, #0
 6304 000a FB60     		str	r3, [r7, #12]
3865:./Drivers/FreeRTOS/tasks.c **** 
3866:./Drivers/FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6305              		.loc 1 3866 14
 6306 000c 05E0     		b	.L348
 6307              	.L349:
3867:./Drivers/FreeRTOS/tasks.c ****         {
3868:./Drivers/FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 6308              		.loc 1 3868 26
 6309 000e 7B68     		ldr	r3, [r7, #4]
 6310 0010 0133     		adds	r3, r3, #1
 6311 0012 7B60     		str	r3, [r7, #4]
3869:./Drivers/FreeRTOS/tasks.c ****             ulCount++;
 6312              		.loc 1 3869 20
 6313 0014 FB68     		ldr	r3, [r7, #12]
 6314 0016 0133     		adds	r3, r3, #1
 6315 0018 FB60     		str	r3, [r7, #12]
 6316              	.L348:
3866:./Drivers/FreeRTOS/tasks.c ****         {
 6317              		.loc 1 3866 16
 6318 001a 7B68     		ldr	r3, [r7, #4]
 6319 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3866:./Drivers/FreeRTOS/tasks.c ****         {
 6320              		.loc 1 3866 14
 6321 001e A52B     		cmp	r3, #165
 6322 0020 F5D0     		beq	.L349
3870:./Drivers/FreeRTOS/tasks.c ****         }
3871:./Drivers/FreeRTOS/tasks.c **** 
3872:./Drivers/FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 6323              		.loc 1 3872 17
 6324 0022 FB68     		ldr	r3, [r7, #12]
 6325 0024 9B08     		lsrs	r3, r3, #2
 6326 0026 FB60     		str	r3, [r7, #12]
3873:./Drivers/FreeRTOS/tasks.c **** 
3874:./Drivers/FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 6327              		.loc 1 3874 16
 6328 0028 FB68     		ldr	r3, [r7, #12]
 6329 002a 9BB2     		uxth	r3, r3
3875:./Drivers/FreeRTOS/tasks.c ****     }
 6330              		.loc 1 3875 5
 6331 002c 1846     		mov	r0, r3
 6332 002e 1437     		adds	r7, r7, #20
 6333              	.LCFI217:
 6334              		.cfi_def_cfa_offset 4
 6335 0030 BD46     		mov	sp, r7
 6336              	.LCFI218:
 6337              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 184


 6338              		@ sp needed
 6339 0032 5DF8047B 		ldr	r7, [sp], #4
 6340              	.LCFI219:
 6341              		.cfi_restore 7
 6342              		.cfi_def_cfa_offset 0
 6343 0036 7047     		bx	lr
 6344              		.cfi_endproc
 6345              	.LFE47:
 6347              		.section	.text.prvDeleteTCB,"ax",%progbits
 6348              		.align	1
 6349              		.syntax unified
 6350              		.thumb
 6351              		.thumb_func
 6352              		.fpu fpv4-sp-d16
 6354              	prvDeleteTCB:
 6355              	.LFB48:
3876:./Drivers/FreeRTOS/tasks.c **** 
3877:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3878:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3879:./Drivers/FreeRTOS/tasks.c **** 
3880:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3881:./Drivers/FreeRTOS/tasks.c **** 
3882:./Drivers/FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3883:./Drivers/FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3884:./Drivers/FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3885:./Drivers/FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3886:./Drivers/FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3887:./Drivers/FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3888:./Drivers/FreeRTOS/tasks.c ****     {
3889:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3890:./Drivers/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3891:./Drivers/FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3892:./Drivers/FreeRTOS/tasks.c **** 
3893:./Drivers/FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3894:./Drivers/FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3895:./Drivers/FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3896:./Drivers/FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3897:./Drivers/FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3898:./Drivers/FreeRTOS/tasks.c ****          * type. */
3899:./Drivers/FreeRTOS/tasks.c **** 
3900:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3901:./Drivers/FreeRTOS/tasks.c **** 
3902:./Drivers/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3903:./Drivers/FreeRTOS/tasks.c ****             {
3904:./Drivers/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3905:./Drivers/FreeRTOS/tasks.c ****             }
3906:./Drivers/FreeRTOS/tasks.c ****         #else
3907:./Drivers/FreeRTOS/tasks.c ****             {
3908:./Drivers/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3909:./Drivers/FreeRTOS/tasks.c ****             }
3910:./Drivers/FreeRTOS/tasks.c ****         #endif
3911:./Drivers/FreeRTOS/tasks.c **** 
3912:./Drivers/FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3913:./Drivers/FreeRTOS/tasks.c **** 
3914:./Drivers/FreeRTOS/tasks.c ****         return uxReturn;
3915:./Drivers/FreeRTOS/tasks.c ****     }
3916:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 185


3917:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3918:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3919:./Drivers/FreeRTOS/tasks.c **** 
3920:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3921:./Drivers/FreeRTOS/tasks.c **** 
3922:./Drivers/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3923:./Drivers/FreeRTOS/tasks.c ****     {
3924:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3925:./Drivers/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3926:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3927:./Drivers/FreeRTOS/tasks.c **** 
3928:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3929:./Drivers/FreeRTOS/tasks.c **** 
3930:./Drivers/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3931:./Drivers/FreeRTOS/tasks.c ****             {
3932:./Drivers/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3933:./Drivers/FreeRTOS/tasks.c ****             }
3934:./Drivers/FreeRTOS/tasks.c ****         #else
3935:./Drivers/FreeRTOS/tasks.c ****             {
3936:./Drivers/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3937:./Drivers/FreeRTOS/tasks.c ****             }
3938:./Drivers/FreeRTOS/tasks.c ****         #endif
3939:./Drivers/FreeRTOS/tasks.c **** 
3940:./Drivers/FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3941:./Drivers/FreeRTOS/tasks.c **** 
3942:./Drivers/FreeRTOS/tasks.c ****         return uxReturn;
3943:./Drivers/FreeRTOS/tasks.c ****     }
3944:./Drivers/FreeRTOS/tasks.c **** 
3945:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3946:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3947:./Drivers/FreeRTOS/tasks.c **** 
3948:./Drivers/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3949:./Drivers/FreeRTOS/tasks.c **** 
3950:./Drivers/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3951:./Drivers/FreeRTOS/tasks.c ****     {
 6356              		.loc 1 3951 5
 6357              		.cfi_startproc
 6358              		@ args = 0, pretend = 0, frame = 8
 6359              		@ frame_needed = 1, uses_anonymous_args = 0
 6360 0000 80B5     		push	{r7, lr}
 6361              	.LCFI220:
 6362              		.cfi_def_cfa_offset 8
 6363              		.cfi_offset 7, -8
 6364              		.cfi_offset 14, -4
 6365 0002 82B0     		sub	sp, sp, #8
 6366              	.LCFI221:
 6367              		.cfi_def_cfa_offset 16
 6368 0004 00AF     		add	r7, sp, #0
 6369              	.LCFI222:
 6370              		.cfi_def_cfa_register 7
 6371 0006 7860     		str	r0, [r7, #4]
3952:./Drivers/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3953:./Drivers/FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3954:./Drivers/FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3955:./Drivers/FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3956:./Drivers/FreeRTOS/tasks.c **** 
3957:./Drivers/FreeRTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 186


3958:./Drivers/FreeRTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3959:./Drivers/FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3960:./Drivers/FreeRTOS/tasks.c ****          * for additional information. */
3961:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3962:./Drivers/FreeRTOS/tasks.c ****             {
3963:./Drivers/FreeRTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3964:./Drivers/FreeRTOS/tasks.c ****             }
3965:./Drivers/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3966:./Drivers/FreeRTOS/tasks.c **** 
3967:./Drivers/FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3968:./Drivers/FreeRTOS/tasks.c ****             {
3969:./Drivers/FreeRTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3970:./Drivers/FreeRTOS/tasks.c ****                  * the stack and TCB. */
3971:./Drivers/FreeRTOS/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
 6372              		.loc 1 3971 38
 6373 0008 7B68     		ldr	r3, [r7, #4]
 6374 000a 1B6B     		ldr	r3, [r3, #48]
 6375              		.loc 1 3971 17
 6376 000c 1846     		mov	r0, r3
 6377 000e FFF7FEFF 		bl	vPortFree
3972:./Drivers/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
 6378              		.loc 1 3972 17
 6379 0012 7868     		ldr	r0, [r7, #4]
 6380 0014 FFF7FEFF 		bl	vPortFree
3973:./Drivers/FreeRTOS/tasks.c ****             }
3974:./Drivers/FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3975:./Drivers/FreeRTOS/tasks.c ****             {
3976:./Drivers/FreeRTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3977:./Drivers/FreeRTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3978:./Drivers/FreeRTOS/tasks.c ****                  * memory. */
3979:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3980:./Drivers/FreeRTOS/tasks.c ****                 {
3981:./Drivers/FreeRTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3982:./Drivers/FreeRTOS/tasks.c ****                      * must be freed. */
3983:./Drivers/FreeRTOS/tasks.c ****                     vPortFreeStack( pxTCB->pxStack );
3984:./Drivers/FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3985:./Drivers/FreeRTOS/tasks.c ****                 }
3986:./Drivers/FreeRTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3987:./Drivers/FreeRTOS/tasks.c ****                 {
3988:./Drivers/FreeRTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3989:./Drivers/FreeRTOS/tasks.c ****                      * only memory that must be freed. */
3990:./Drivers/FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3991:./Drivers/FreeRTOS/tasks.c ****                 }
3992:./Drivers/FreeRTOS/tasks.c ****                 else
3993:./Drivers/FreeRTOS/tasks.c ****                 {
3994:./Drivers/FreeRTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3995:./Drivers/FreeRTOS/tasks.c ****                      * nothing needs to be freed. */
3996:./Drivers/FreeRTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3997:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3998:./Drivers/FreeRTOS/tasks.c ****                 }
3999:./Drivers/FreeRTOS/tasks.c ****             }
4000:./Drivers/FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
4001:./Drivers/FreeRTOS/tasks.c ****     }
 6381              		.loc 1 4001 5
 6382 0018 00BF     		nop
 6383 001a 0837     		adds	r7, r7, #8
 6384              	.LCFI223:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 187


 6385              		.cfi_def_cfa_offset 8
 6386 001c BD46     		mov	sp, r7
 6387              	.LCFI224:
 6388              		.cfi_def_cfa_register 13
 6389              		@ sp needed
 6390 001e 80BD     		pop	{r7, pc}
 6391              		.cfi_endproc
 6392              	.LFE48:
 6394              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6395              		.align	1
 6396              		.syntax unified
 6397              		.thumb
 6398              		.thumb_func
 6399              		.fpu fpv4-sp-d16
 6401              	prvResetNextTaskUnblockTime:
 6402              	.LFB49:
4002:./Drivers/FreeRTOS/tasks.c **** 
4003:./Drivers/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
4004:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4005:./Drivers/FreeRTOS/tasks.c **** 
4006:./Drivers/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4007:./Drivers/FreeRTOS/tasks.c **** {
 6403              		.loc 1 4007 1
 6404              		.cfi_startproc
 6405              		@ args = 0, pretend = 0, frame = 0
 6406              		@ frame_needed = 1, uses_anonymous_args = 0
 6407              		@ link register save eliminated.
 6408 0000 80B4     		push	{r7}
 6409              	.LCFI225:
 6410              		.cfi_def_cfa_offset 4
 6411              		.cfi_offset 7, -4
 6412 0002 00AF     		add	r7, sp, #0
 6413              	.LCFI226:
 6414              		.cfi_def_cfa_register 7
4008:./Drivers/FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6415              		.loc 1 4008 9
 6416 0004 0A4B     		ldr	r3, .L356
 6417 0006 1B68     		ldr	r3, [r3]
 6418 0008 1B68     		ldr	r3, [r3]
 6419              		.loc 1 4008 7
 6420 000a 002B     		cmp	r3, #0
 6421 000c 04D1     		bne	.L353
4009:./Drivers/FreeRTOS/tasks.c ****     {
4010:./Drivers/FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4011:./Drivers/FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4012:./Drivers/FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4013:./Drivers/FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4014:./Drivers/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 6422              		.loc 1 4014 30
 6423 000e 094B     		ldr	r3, .L356+4
 6424 0010 4FF0FF32 		mov	r2, #-1
 6425 0014 1A60     		str	r2, [r3]
4015:./Drivers/FreeRTOS/tasks.c ****     }
4016:./Drivers/FreeRTOS/tasks.c ****     else
4017:./Drivers/FreeRTOS/tasks.c ****     {
4018:./Drivers/FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4019:./Drivers/FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 188


4020:./Drivers/FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4021:./Drivers/FreeRTOS/tasks.c ****          * from the Blocked state. */
4022:./Drivers/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
4023:./Drivers/FreeRTOS/tasks.c ****     }
4024:./Drivers/FreeRTOS/tasks.c **** }
 6426              		.loc 1 4024 1
 6427 0016 05E0     		b	.L355
 6428              	.L353:
4022:./Drivers/FreeRTOS/tasks.c ****     }
 6429              		.loc 1 4022 32
 6430 0018 054B     		ldr	r3, .L356
 6431 001a 1B68     		ldr	r3, [r3]
 6432 001c DB68     		ldr	r3, [r3, #12]
 6433 001e 1B68     		ldr	r3, [r3]
4022:./Drivers/FreeRTOS/tasks.c ****     }
 6434              		.loc 1 4022 30
 6435 0020 044A     		ldr	r2, .L356+4
 6436 0022 1360     		str	r3, [r2]
 6437              	.L355:
 6438              		.loc 1 4024 1
 6439 0024 00BF     		nop
 6440 0026 BD46     		mov	sp, r7
 6441              	.LCFI227:
 6442              		.cfi_def_cfa_register 13
 6443              		@ sp needed
 6444 0028 5DF8047B 		ldr	r7, [sp], #4
 6445              	.LCFI228:
 6446              		.cfi_restore 7
 6447              		.cfi_def_cfa_offset 0
 6448 002c 7047     		bx	lr
 6449              	.L357:
 6450 002e 00BF     		.align	2
 6451              	.L356:
 6452 0030 00000000 		.word	pxDelayedTaskList
 6453 0034 00000000 		.word	xNextTaskUnblockTime
 6454              		.cfi_endproc
 6455              	.LFE49:
 6457              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6458              		.align	1
 6459              		.global	xTaskGetCurrentTaskHandle
 6460              		.syntax unified
 6461              		.thumb
 6462              		.thumb_func
 6463              		.fpu fpv4-sp-d16
 6465              	xTaskGetCurrentTaskHandle:
 6466              	.LFB50:
4025:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4026:./Drivers/FreeRTOS/tasks.c **** 
4027:./Drivers/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4028:./Drivers/FreeRTOS/tasks.c **** 
4029:./Drivers/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4030:./Drivers/FreeRTOS/tasks.c ****     {
 6467              		.loc 1 4030 5
 6468              		.cfi_startproc
 6469              		@ args = 0, pretend = 0, frame = 8
 6470              		@ frame_needed = 1, uses_anonymous_args = 0
 6471              		@ link register save eliminated.
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 189


 6472 0000 80B4     		push	{r7}
 6473              	.LCFI229:
 6474              		.cfi_def_cfa_offset 4
 6475              		.cfi_offset 7, -4
 6476 0002 83B0     		sub	sp, sp, #12
 6477              	.LCFI230:
 6478              		.cfi_def_cfa_offset 16
 6479 0004 00AF     		add	r7, sp, #0
 6480              	.LCFI231:
 6481              		.cfi_def_cfa_register 7
4031:./Drivers/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4032:./Drivers/FreeRTOS/tasks.c **** 
4033:./Drivers/FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4034:./Drivers/FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4035:./Drivers/FreeRTOS/tasks.c ****          * individual execution thread. */
4036:./Drivers/FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
 6482              		.loc 1 4036 17
 6483 0006 054B     		ldr	r3, .L360
 6484 0008 1B68     		ldr	r3, [r3]
 6485 000a 7B60     		str	r3, [r7, #4]
4037:./Drivers/FreeRTOS/tasks.c **** 
4038:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 6486              		.loc 1 4038 16
 6487 000c 7B68     		ldr	r3, [r7, #4]
4039:./Drivers/FreeRTOS/tasks.c ****     }
 6488              		.loc 1 4039 5
 6489 000e 1846     		mov	r0, r3
 6490 0010 0C37     		adds	r7, r7, #12
 6491              	.LCFI232:
 6492              		.cfi_def_cfa_offset 4
 6493 0012 BD46     		mov	sp, r7
 6494              	.LCFI233:
 6495              		.cfi_def_cfa_register 13
 6496              		@ sp needed
 6497 0014 5DF8047B 		ldr	r7, [sp], #4
 6498              	.LCFI234:
 6499              		.cfi_restore 7
 6500              		.cfi_def_cfa_offset 0
 6501 0018 7047     		bx	lr
 6502              	.L361:
 6503 001a 00BF     		.align	2
 6504              	.L360:
 6505 001c 00000000 		.word	pxCurrentTCB
 6506              		.cfi_endproc
 6507              	.LFE50:
 6509              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6510              		.align	1
 6511              		.global	xTaskGetSchedulerState
 6512              		.syntax unified
 6513              		.thumb
 6514              		.thumb_func
 6515              		.fpu fpv4-sp-d16
 6517              	xTaskGetSchedulerState:
 6518              	.LFB51:
4040:./Drivers/FreeRTOS/tasks.c **** 
4041:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4042:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 190


4043:./Drivers/FreeRTOS/tasks.c **** 
4044:./Drivers/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4045:./Drivers/FreeRTOS/tasks.c **** 
4046:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4047:./Drivers/FreeRTOS/tasks.c ****     {
 6519              		.loc 1 4047 5
 6520              		.cfi_startproc
 6521              		@ args = 0, pretend = 0, frame = 8
 6522              		@ frame_needed = 1, uses_anonymous_args = 0
 6523              		@ link register save eliminated.
 6524 0000 80B4     		push	{r7}
 6525              	.LCFI235:
 6526              		.cfi_def_cfa_offset 4
 6527              		.cfi_offset 7, -4
 6528 0002 83B0     		sub	sp, sp, #12
 6529              	.LCFI236:
 6530              		.cfi_def_cfa_offset 16
 6531 0004 00AF     		add	r7, sp, #0
 6532              	.LCFI237:
 6533              		.cfi_def_cfa_register 7
4048:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4049:./Drivers/FreeRTOS/tasks.c **** 
4050:./Drivers/FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 6534              		.loc 1 4050 31
 6535 0006 0B4B     		ldr	r3, .L367
 6536 0008 1B68     		ldr	r3, [r3]
 6537              		.loc 1 4050 11
 6538 000a 002B     		cmp	r3, #0
 6539 000c 02D1     		bne	.L363
4051:./Drivers/FreeRTOS/tasks.c ****         {
4052:./Drivers/FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
 6540              		.loc 1 4052 21
 6541 000e 0123     		movs	r3, #1
 6542 0010 7B60     		str	r3, [r7, #4]
 6543 0012 08E0     		b	.L364
 6544              	.L363:
4053:./Drivers/FreeRTOS/tasks.c ****         }
4054:./Drivers/FreeRTOS/tasks.c ****         else
4055:./Drivers/FreeRTOS/tasks.c ****         {
4056:./Drivers/FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6545              		.loc 1 4056 38
 6546 0014 084B     		ldr	r3, .L367+4
 6547 0016 1B68     		ldr	r3, [r3]
 6548              		.loc 1 4056 15
 6549 0018 002B     		cmp	r3, #0
 6550 001a 02D1     		bne	.L365
4057:./Drivers/FreeRTOS/tasks.c ****             {
4058:./Drivers/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 6551              		.loc 1 4058 25
 6552 001c 0223     		movs	r3, #2
 6553 001e 7B60     		str	r3, [r7, #4]
 6554 0020 01E0     		b	.L364
 6555              	.L365:
4059:./Drivers/FreeRTOS/tasks.c ****             }
4060:./Drivers/FreeRTOS/tasks.c ****             else
4061:./Drivers/FreeRTOS/tasks.c ****             {
4062:./Drivers/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 191


 6556              		.loc 1 4062 25
 6557 0022 0023     		movs	r3, #0
 6558 0024 7B60     		str	r3, [r7, #4]
 6559              	.L364:
4063:./Drivers/FreeRTOS/tasks.c ****             }
4064:./Drivers/FreeRTOS/tasks.c ****         }
4065:./Drivers/FreeRTOS/tasks.c **** 
4066:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 6560              		.loc 1 4066 16
 6561 0026 7B68     		ldr	r3, [r7, #4]
4067:./Drivers/FreeRTOS/tasks.c ****     }
 6562              		.loc 1 4067 5
 6563 0028 1846     		mov	r0, r3
 6564 002a 0C37     		adds	r7, r7, #12
 6565              	.LCFI238:
 6566              		.cfi_def_cfa_offset 4
 6567 002c BD46     		mov	sp, r7
 6568              	.LCFI239:
 6569              		.cfi_def_cfa_register 13
 6570              		@ sp needed
 6571 002e 5DF8047B 		ldr	r7, [sp], #4
 6572              	.LCFI240:
 6573              		.cfi_restore 7
 6574              		.cfi_def_cfa_offset 0
 6575 0032 7047     		bx	lr
 6576              	.L368:
 6577              		.align	2
 6578              	.L367:
 6579 0034 00000000 		.word	xSchedulerRunning
 6580 0038 00000000 		.word	uxSchedulerSuspended
 6581              		.cfi_endproc
 6582              	.LFE51:
 6584              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6585              		.align	1
 6586              		.global	xTaskPriorityInherit
 6587              		.syntax unified
 6588              		.thumb
 6589              		.thumb_func
 6590              		.fpu fpv4-sp-d16
 6592              	xTaskPriorityInherit:
 6593              	.LFB52:
4068:./Drivers/FreeRTOS/tasks.c **** 
4069:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4070:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4071:./Drivers/FreeRTOS/tasks.c **** 
4072:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4073:./Drivers/FreeRTOS/tasks.c **** 
4074:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4075:./Drivers/FreeRTOS/tasks.c ****     {
 6594              		.loc 1 4075 5
 6595              		.cfi_startproc
 6596              		@ args = 0, pretend = 0, frame = 24
 6597              		@ frame_needed = 1, uses_anonymous_args = 0
 6598 0000 80B5     		push	{r7, lr}
 6599              	.LCFI241:
 6600              		.cfi_def_cfa_offset 8
 6601              		.cfi_offset 7, -8
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 192


 6602              		.cfi_offset 14, -4
 6603 0002 86B0     		sub	sp, sp, #24
 6604              	.LCFI242:
 6605              		.cfi_def_cfa_offset 32
 6606 0004 00AF     		add	r7, sp, #0
 6607              	.LCFI243:
 6608              		.cfi_def_cfa_register 7
 6609 0006 7860     		str	r0, [r7, #4]
4076:./Drivers/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6610              		.loc 1 4076 23
 6611 0008 7B68     		ldr	r3, [r7, #4]
 6612 000a 3B61     		str	r3, [r7, #16]
4077:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6613              		.loc 1 4077 20
 6614 000c 0023     		movs	r3, #0
 6615 000e 7B61     		str	r3, [r7, #20]
4078:./Drivers/FreeRTOS/tasks.c **** 
4079:./Drivers/FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4080:./Drivers/FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4081:./Drivers/FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4082:./Drivers/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6616              		.loc 1 4082 11
 6617 0010 7B68     		ldr	r3, [r7, #4]
 6618 0012 002B     		cmp	r3, #0
 6619 0014 00F08780 		beq	.L370
4083:./Drivers/FreeRTOS/tasks.c ****         {
4084:./Drivers/FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4085:./Drivers/FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4086:./Drivers/FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4087:./Drivers/FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6620              		.loc 1 4087 33
 6621 0018 3B69     		ldr	r3, [r7, #16]
 6622 001a DA6A     		ldr	r2, [r3, #44]
 6623              		.loc 1 4087 60
 6624 001c 444B     		ldr	r3, .L377
 6625 001e 1B68     		ldr	r3, [r3]
 6626 0020 DB6A     		ldr	r3, [r3, #44]
 6627              		.loc 1 4087 15
 6628 0022 9A42     		cmp	r2, r3
 6629 0024 76D2     		bcs	.L371
4088:./Drivers/FreeRTOS/tasks.c ****             {
4089:./Drivers/FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4090:./Drivers/FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4091:./Drivers/FreeRTOS/tasks.c ****                  * not being used for anything else. */
4092:./Drivers/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
 6630              		.loc 1 4092 23
 6631 0026 3B69     		ldr	r3, [r7, #16]
 6632 0028 9B69     		ldr	r3, [r3, #24]
 6633              		.loc 1 4092 19
 6634 002a 002B     		cmp	r3, #0
 6635 002c 06DB     		blt	.L372
4093:./Drivers/FreeRTOS/tasks.c ****                 {
4094:./Drivers/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
 6636              		.loc 1 4094 21
 6637 002e 404B     		ldr	r3, .L377
 6638 0030 1B68     		ldr	r3, [r3]
 6639 0032 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 193


 6640 0034 C3F10502 		rsb	r2, r3, #5
 6641 0038 3B69     		ldr	r3, [r7, #16]
 6642 003a 9A61     		str	r2, [r3, #24]
 6643              	.L372:
4095:./Drivers/FreeRTOS/tasks.c ****                 }
4096:./Drivers/FreeRTOS/tasks.c ****                 else
4097:./Drivers/FreeRTOS/tasks.c ****                 {
4098:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4099:./Drivers/FreeRTOS/tasks.c ****                 }
4100:./Drivers/FreeRTOS/tasks.c **** 
4101:./Drivers/FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4102:./Drivers/FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4103:./Drivers/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
 6644              		.loc 1 4103 21
 6645 003c 3B69     		ldr	r3, [r7, #16]
 6646 003e 5969     		ldr	r1, [r3, #20]
 6647 0040 3B69     		ldr	r3, [r7, #16]
 6648 0042 DA6A     		ldr	r2, [r3, #44]
 6649 0044 1346     		mov	r3, r2
 6650 0046 9B00     		lsls	r3, r3, #2
 6651 0048 1344     		add	r3, r3, r2
 6652 004a 9B00     		lsls	r3, r3, #2
 6653 004c 394A     		ldr	r2, .L377+4
 6654 004e 1344     		add	r3, r3, r2
 6655              		.loc 1 4103 19
 6656 0050 9942     		cmp	r1, r3
 6657 0052 57D1     		bne	.L373
4104:./Drivers/FreeRTOS/tasks.c ****                 {
4105:./Drivers/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
 6658              		.loc 1 4105 25
 6659 0054 3B69     		ldr	r3, [r7, #16]
 6660 0056 0433     		adds	r3, r3, #4
 6661 0058 1846     		mov	r0, r3
 6662 005a FFF7FEFF 		bl	uxListRemove
 6663 005e 0346     		mov	r3, r0
 6664              		.loc 1 4105 23
 6665 0060 002B     		cmp	r3, #0
 6666 0062 0AD1     		bne	.L374
4106:./Drivers/FreeRTOS/tasks.c ****                     {
4107:./Drivers/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4108:./Drivers/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4109:./Drivers/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4110:./Drivers/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
 6667              		.loc 1 4110 25
 6668 0064 3B69     		ldr	r3, [r7, #16]
 6669 0066 DB6A     		ldr	r3, [r3, #44]
 6670 0068 0122     		movs	r2, #1
 6671 006a 02FA03F3 		lsl	r3, r2, r3
 6672 006e DA43     		mvns	r2, r3
 6673 0070 314B     		ldr	r3, .L377+8
 6674 0072 1B68     		ldr	r3, [r3]
 6675 0074 1340     		ands	r3, r3, r2
 6676 0076 304A     		ldr	r2, .L377+8
 6677 0078 1360     		str	r3, [r2]
 6678              	.L374:
4111:./Drivers/FreeRTOS/tasks.c ****                     }
4112:./Drivers/FreeRTOS/tasks.c ****                     else
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 194


4113:./Drivers/FreeRTOS/tasks.c ****                     {
4114:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4115:./Drivers/FreeRTOS/tasks.c ****                     }
4116:./Drivers/FreeRTOS/tasks.c **** 
4117:./Drivers/FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4118:./Drivers/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6679              		.loc 1 4118 64
 6680 007a 2D4B     		ldr	r3, .L377
 6681 007c 1B68     		ldr	r3, [r3]
 6682 007e DA6A     		ldr	r2, [r3, #44]
 6683              		.loc 1 4118 50
 6684 0080 3B69     		ldr	r3, [r7, #16]
 6685 0082 DA62     		str	r2, [r3, #44]
4119:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6686              		.loc 1 4119 21
 6687 0084 3B69     		ldr	r3, [r7, #16]
 6688 0086 DB6A     		ldr	r3, [r3, #44]
 6689 0088 0122     		movs	r2, #1
 6690 008a 9A40     		lsls	r2, r2, r3
 6691 008c 2A4B     		ldr	r3, .L377+8
 6692 008e 1B68     		ldr	r3, [r3]
 6693 0090 1343     		orrs	r3, r3, r2
 6694 0092 294A     		ldr	r2, .L377+8
 6695 0094 1360     		str	r3, [r2]
 6696              	.LBB260:
 6697 0096 3B69     		ldr	r3, [r7, #16]
 6698 0098 DA6A     		ldr	r2, [r3, #44]
 6699 009a 2649     		ldr	r1, .L377+4
 6700 009c 1346     		mov	r3, r2
 6701 009e 9B00     		lsls	r3, r3, #2
 6702 00a0 1344     		add	r3, r3, r2
 6703 00a2 9B00     		lsls	r3, r3, #2
 6704 00a4 0B44     		add	r3, r3, r1
 6705 00a6 0433     		adds	r3, r3, #4
 6706 00a8 1B68     		ldr	r3, [r3]
 6707 00aa FB60     		str	r3, [r7, #12]
 6708 00ac 3B69     		ldr	r3, [r7, #16]
 6709 00ae FA68     		ldr	r2, [r7, #12]
 6710 00b0 9A60     		str	r2, [r3, #8]
 6711 00b2 FB68     		ldr	r3, [r7, #12]
 6712 00b4 9A68     		ldr	r2, [r3, #8]
 6713 00b6 3B69     		ldr	r3, [r7, #16]
 6714 00b8 DA60     		str	r2, [r3, #12]
 6715 00ba FB68     		ldr	r3, [r7, #12]
 6716 00bc 9B68     		ldr	r3, [r3, #8]
 6717 00be 3A69     		ldr	r2, [r7, #16]
 6718 00c0 0432     		adds	r2, r2, #4
 6719 00c2 5A60     		str	r2, [r3, #4]
 6720 00c4 3B69     		ldr	r3, [r7, #16]
 6721 00c6 1A1D     		adds	r2, r3, #4
 6722 00c8 FB68     		ldr	r3, [r7, #12]
 6723 00ca 9A60     		str	r2, [r3, #8]
 6724 00cc 3B69     		ldr	r3, [r7, #16]
 6725 00ce DA6A     		ldr	r2, [r3, #44]
 6726 00d0 1346     		mov	r3, r2
 6727 00d2 9B00     		lsls	r3, r3, #2
 6728 00d4 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 195


 6729 00d6 9B00     		lsls	r3, r3, #2
 6730 00d8 164A     		ldr	r2, .L377+4
 6731 00da 1A44     		add	r2, r2, r3
 6732 00dc 3B69     		ldr	r3, [r7, #16]
 6733 00de 5A61     		str	r2, [r3, #20]
 6734 00e0 3B69     		ldr	r3, [r7, #16]
 6735 00e2 DA6A     		ldr	r2, [r3, #44]
 6736 00e4 1349     		ldr	r1, .L377+4
 6737 00e6 1346     		mov	r3, r2
 6738 00e8 9B00     		lsls	r3, r3, #2
 6739 00ea 1344     		add	r3, r3, r2
 6740 00ec 9B00     		lsls	r3, r3, #2
 6741 00ee 0B44     		add	r3, r3, r1
 6742 00f0 1B68     		ldr	r3, [r3]
 6743 00f2 591C     		adds	r1, r3, #1
 6744 00f4 0F48     		ldr	r0, .L377+4
 6745 00f6 1346     		mov	r3, r2
 6746 00f8 9B00     		lsls	r3, r3, #2
 6747 00fa 1344     		add	r3, r3, r2
 6748 00fc 9B00     		lsls	r3, r3, #2
 6749 00fe 0344     		add	r3, r3, r0
 6750 0100 1960     		str	r1, [r3]
 6751              	.LBE260:
 6752 0102 04E0     		b	.L375
 6753              	.L373:
4120:./Drivers/FreeRTOS/tasks.c ****                 }
4121:./Drivers/FreeRTOS/tasks.c ****                 else
4122:./Drivers/FreeRTOS/tasks.c ****                 {
4123:./Drivers/FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4124:./Drivers/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6754              		.loc 1 4124 64
 6755 0104 0A4B     		ldr	r3, .L377
 6756 0106 1B68     		ldr	r3, [r3]
 6757 0108 DA6A     		ldr	r2, [r3, #44]
 6758              		.loc 1 4124 50
 6759 010a 3B69     		ldr	r3, [r7, #16]
 6760 010c DA62     		str	r2, [r3, #44]
 6761              	.L375:
4125:./Drivers/FreeRTOS/tasks.c ****                 }
4126:./Drivers/FreeRTOS/tasks.c **** 
4127:./Drivers/FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4128:./Drivers/FreeRTOS/tasks.c **** 
4129:./Drivers/FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4130:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6762              		.loc 1 4130 25
 6763 010e 0123     		movs	r3, #1
 6764 0110 7B61     		str	r3, [r7, #20]
 6765 0112 08E0     		b	.L370
 6766              	.L371:
4131:./Drivers/FreeRTOS/tasks.c ****             }
4132:./Drivers/FreeRTOS/tasks.c ****             else
4133:./Drivers/FreeRTOS/tasks.c ****             {
4134:./Drivers/FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6767              		.loc 1 4134 37
 6768 0114 3B69     		ldr	r3, [r7, #16]
 6769 0116 9A6C     		ldr	r2, [r3, #72]
 6770              		.loc 1 4134 68
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 196


 6771 0118 054B     		ldr	r3, .L377
 6772 011a 1B68     		ldr	r3, [r3]
 6773 011c DB6A     		ldr	r3, [r3, #44]
 6774              		.loc 1 4134 19
 6775 011e 9A42     		cmp	r2, r3
 6776 0120 01D2     		bcs	.L370
4135:./Drivers/FreeRTOS/tasks.c ****                 {
4136:./Drivers/FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4137:./Drivers/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4138:./Drivers/FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4139:./Drivers/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4140:./Drivers/FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4141:./Drivers/FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4142:./Drivers/FreeRTOS/tasks.c ****                      * not been the case. */
4143:./Drivers/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 6777              		.loc 1 4143 29
 6778 0122 0123     		movs	r3, #1
 6779 0124 7B61     		str	r3, [r7, #20]
 6780              	.L370:
4144:./Drivers/FreeRTOS/tasks.c ****                 }
4145:./Drivers/FreeRTOS/tasks.c ****                 else
4146:./Drivers/FreeRTOS/tasks.c ****                 {
4147:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4148:./Drivers/FreeRTOS/tasks.c ****                 }
4149:./Drivers/FreeRTOS/tasks.c ****             }
4150:./Drivers/FreeRTOS/tasks.c ****         }
4151:./Drivers/FreeRTOS/tasks.c ****         else
4152:./Drivers/FreeRTOS/tasks.c ****         {
4153:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4154:./Drivers/FreeRTOS/tasks.c ****         }
4155:./Drivers/FreeRTOS/tasks.c **** 
4156:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 6781              		.loc 1 4156 16
 6782 0126 7B69     		ldr	r3, [r7, #20]
4157:./Drivers/FreeRTOS/tasks.c ****     }
 6783              		.loc 1 4157 5
 6784 0128 1846     		mov	r0, r3
 6785 012a 1837     		adds	r7, r7, #24
 6786              	.LCFI244:
 6787              		.cfi_def_cfa_offset 8
 6788 012c BD46     		mov	sp, r7
 6789              	.LCFI245:
 6790              		.cfi_def_cfa_register 13
 6791              		@ sp needed
 6792 012e 80BD     		pop	{r7, pc}
 6793              	.L378:
 6794              		.align	2
 6795              	.L377:
 6796 0130 00000000 		.word	pxCurrentTCB
 6797 0134 00000000 		.word	pxReadyTasksLists
 6798 0138 00000000 		.word	uxTopReadyPriority
 6799              		.cfi_endproc
 6800              	.LFE52:
 6802              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6803              		.align	1
 6804              		.global	xTaskPriorityDisinherit
 6805              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 197


 6806              		.thumb
 6807              		.thumb_func
 6808              		.fpu fpv4-sp-d16
 6810              	xTaskPriorityDisinherit:
 6811              	.LFB53:
4158:./Drivers/FreeRTOS/tasks.c **** 
4159:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4160:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4161:./Drivers/FreeRTOS/tasks.c **** 
4162:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4163:./Drivers/FreeRTOS/tasks.c **** 
4164:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4165:./Drivers/FreeRTOS/tasks.c ****     {
 6812              		.loc 1 4165 5
 6813              		.cfi_startproc
 6814              		@ args = 0, pretend = 0, frame = 32
 6815              		@ frame_needed = 1, uses_anonymous_args = 0
 6816 0000 80B5     		push	{r7, lr}
 6817              	.LCFI246:
 6818              		.cfi_def_cfa_offset 8
 6819              		.cfi_offset 7, -8
 6820              		.cfi_offset 14, -4
 6821 0002 88B0     		sub	sp, sp, #32
 6822              	.LCFI247:
 6823              		.cfi_def_cfa_offset 40
 6824 0004 00AF     		add	r7, sp, #0
 6825              	.LCFI248:
 6826              		.cfi_def_cfa_register 7
 6827 0006 7860     		str	r0, [r7, #4]
4166:./Drivers/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 6828              		.loc 1 4166 23
 6829 0008 7B68     		ldr	r3, [r7, #4]
 6830 000a BB61     		str	r3, [r7, #24]
4167:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 6831              		.loc 1 4167 20
 6832 000c 0023     		movs	r3, #0
 6833 000e FB61     		str	r3, [r7, #28]
4168:./Drivers/FreeRTOS/tasks.c **** 
4169:./Drivers/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 6834              		.loc 1 4169 11
 6835 0010 7B68     		ldr	r3, [r7, #4]
 6836 0012 002B     		cmp	r3, #0
 6837 0014 00F08C80 		beq	.L380
4170:./Drivers/FreeRTOS/tasks.c ****         {
4171:./Drivers/FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4172:./Drivers/FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4173:./Drivers/FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4174:./Drivers/FreeRTOS/tasks.c ****              * be the running state task. */
4175:./Drivers/FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
 6838              		.loc 1 4175 13
 6839 0018 484B     		ldr	r3, .L387
 6840 001a 1B68     		ldr	r3, [r3]
 6841 001c BA69     		ldr	r2, [r7, #24]
 6842 001e 9A42     		cmp	r2, r3
 6843 0020 0AD0     		beq	.L381
 6844              	.LBB261:
 6845              	.LBB262:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 198


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6846              		.loc 2 198 9
 6847              		.syntax unified
 6848              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6849 0022 4FF05003 			mov r3, #80												
 6850 0026 83F31188 		msr basepri, r3											
 6851 002a BFF36F8F 		isb														
 6852 002e BFF34F8F 		dsb														
 6853              	
 6854              	@ 0 "" 2
 6855              		.thumb
 6856              		.syntax unified
 6857 0032 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6858              		.loc 2 206 5
 6859 0034 00BF     		nop
 6860              	.L382:
 6861              	.LBE262:
 6862              	.LBE261:
 6863              		.loc 1 4175 13 discriminator 1
 6864 0036 FEE7     		b	.L382
 6865              	.L381:
4176:./Drivers/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 6866              		.loc 1 4176 13
 6867 0038 BB69     		ldr	r3, [r7, #24]
 6868 003a DB6C     		ldr	r3, [r3, #76]
 6869 003c 002B     		cmp	r3, #0
 6870 003e 0AD1     		bne	.L383
 6871              	.LBB263:
 6872              	.LBB264:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 6873              		.loc 2 198 9
 6874              		.syntax unified
 6875              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 6876 0040 4FF05003 			mov r3, #80												
 6877 0044 83F31188 		msr basepri, r3											
 6878 0048 BFF36F8F 		isb														
 6879 004c BFF34F8F 		dsb														
 6880              	
 6881              	@ 0 "" 2
 6882              		.thumb
 6883              		.syntax unified
 6884 0050 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 6885              		.loc 2 206 5
 6886 0052 00BF     		nop
 6887              	.L384:
 6888              	.LBE264:
 6889              	.LBE263:
 6890              		.loc 1 4176 13 discriminator 2
 6891 0054 FEE7     		b	.L384
 6892              	.L383:
4177:./Drivers/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 6893              		.loc 1 4177 20
 6894 0056 BB69     		ldr	r3, [r7, #24]
 6895 0058 DB6C     		ldr	r3, [r3, #76]
 6896              		.loc 1 4177 37
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 199


 6897 005a 5A1E     		subs	r2, r3, #1
 6898 005c BB69     		ldr	r3, [r7, #24]
 6899 005e DA64     		str	r2, [r3, #76]
4178:./Drivers/FreeRTOS/tasks.c **** 
4179:./Drivers/FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4180:./Drivers/FreeRTOS/tasks.c ****              * task? */
4181:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6900              		.loc 1 4181 22
 6901 0060 BB69     		ldr	r3, [r7, #24]
 6902 0062 DA6A     		ldr	r2, [r3, #44]
 6903              		.loc 1 4181 43
 6904 0064 BB69     		ldr	r3, [r7, #24]
 6905 0066 9B6C     		ldr	r3, [r3, #72]
 6906              		.loc 1 4181 15
 6907 0068 9A42     		cmp	r2, r3
 6908 006a 61D0     		beq	.L380
4182:./Drivers/FreeRTOS/tasks.c ****             {
4183:./Drivers/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4184:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6909              		.loc 1 4184 26
 6910 006c BB69     		ldr	r3, [r7, #24]
 6911 006e DB6C     		ldr	r3, [r3, #76]
 6912              		.loc 1 4184 19
 6913 0070 002B     		cmp	r3, #0
 6914 0072 5DD1     		bne	.L380
4185:./Drivers/FreeRTOS/tasks.c ****                 {
4186:./Drivers/FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4187:./Drivers/FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4188:./Drivers/FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4189:./Drivers/FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4190:./Drivers/FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4191:./Drivers/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6915              		.loc 1 4191 25
 6916 0074 BB69     		ldr	r3, [r7, #24]
 6917 0076 0433     		adds	r3, r3, #4
 6918 0078 1846     		mov	r0, r3
 6919 007a FFF7FEFF 		bl	uxListRemove
 6920 007e 0346     		mov	r3, r0
 6921              		.loc 1 4191 23
 6922 0080 002B     		cmp	r3, #0
 6923 0082 0AD1     		bne	.L385
4192:./Drivers/FreeRTOS/tasks.c ****                     {
4193:./Drivers/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 6924              		.loc 1 4193 25
 6925 0084 BB69     		ldr	r3, [r7, #24]
 6926 0086 DB6A     		ldr	r3, [r3, #44]
 6927 0088 0122     		movs	r2, #1
 6928 008a 02FA03F3 		lsl	r3, r2, r3
 6929 008e DA43     		mvns	r2, r3
 6930 0090 2B4B     		ldr	r3, .L387+4
 6931 0092 1B68     		ldr	r3, [r3]
 6932 0094 1340     		ands	r3, r3, r2
 6933 0096 2A4A     		ldr	r2, .L387+4
 6934 0098 1360     		str	r3, [r2]
 6935              	.L385:
4194:./Drivers/FreeRTOS/tasks.c ****                     }
4195:./Drivers/FreeRTOS/tasks.c ****                     else
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 200


4196:./Drivers/FreeRTOS/tasks.c ****                     {
4197:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4198:./Drivers/FreeRTOS/tasks.c ****                     }
4199:./Drivers/FreeRTOS/tasks.c **** 
4200:./Drivers/FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4201:./Drivers/FreeRTOS/tasks.c ****                      * new  ready list. */
4202:./Drivers/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4203:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6936              		.loc 1 4203 46
 6937 009a BB69     		ldr	r3, [r7, #24]
 6938 009c 9A6C     		ldr	r2, [r3, #72]
 6939              		.loc 1 4203 39
 6940 009e BB69     		ldr	r3, [r7, #24]
 6941 00a0 DA62     		str	r2, [r3, #44]
4204:./Drivers/FreeRTOS/tasks.c **** 
4205:./Drivers/FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4206:./Drivers/FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4207:./Drivers/FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4208:./Drivers/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
 6942              		.loc 1 4208 21
 6943 00a2 BB69     		ldr	r3, [r7, #24]
 6944 00a4 DB6A     		ldr	r3, [r3, #44]
 6945 00a6 C3F10502 		rsb	r2, r3, #5
 6946 00aa BB69     		ldr	r3, [r7, #24]
 6947 00ac 9A61     		str	r2, [r3, #24]
4209:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6948              		.loc 1 4209 21
 6949 00ae BB69     		ldr	r3, [r7, #24]
 6950 00b0 DB6A     		ldr	r3, [r3, #44]
 6951 00b2 0122     		movs	r2, #1
 6952 00b4 9A40     		lsls	r2, r2, r3
 6953 00b6 224B     		ldr	r3, .L387+4
 6954 00b8 1B68     		ldr	r3, [r3]
 6955 00ba 1343     		orrs	r3, r3, r2
 6956 00bc 204A     		ldr	r2, .L387+4
 6957 00be 1360     		str	r3, [r2]
 6958              	.LBB265:
 6959 00c0 BB69     		ldr	r3, [r7, #24]
 6960 00c2 DA6A     		ldr	r2, [r3, #44]
 6961 00c4 1F49     		ldr	r1, .L387+8
 6962 00c6 1346     		mov	r3, r2
 6963 00c8 9B00     		lsls	r3, r3, #2
 6964 00ca 1344     		add	r3, r3, r2
 6965 00cc 9B00     		lsls	r3, r3, #2
 6966 00ce 0B44     		add	r3, r3, r1
 6967 00d0 0433     		adds	r3, r3, #4
 6968 00d2 1B68     		ldr	r3, [r3]
 6969 00d4 7B61     		str	r3, [r7, #20]
 6970 00d6 BB69     		ldr	r3, [r7, #24]
 6971 00d8 7A69     		ldr	r2, [r7, #20]
 6972 00da 9A60     		str	r2, [r3, #8]
 6973 00dc 7B69     		ldr	r3, [r7, #20]
 6974 00de 9A68     		ldr	r2, [r3, #8]
 6975 00e0 BB69     		ldr	r3, [r7, #24]
 6976 00e2 DA60     		str	r2, [r3, #12]
 6977 00e4 7B69     		ldr	r3, [r7, #20]
 6978 00e6 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 201


 6979 00e8 BA69     		ldr	r2, [r7, #24]
 6980 00ea 0432     		adds	r2, r2, #4
 6981 00ec 5A60     		str	r2, [r3, #4]
 6982 00ee BB69     		ldr	r3, [r7, #24]
 6983 00f0 1A1D     		adds	r2, r3, #4
 6984 00f2 7B69     		ldr	r3, [r7, #20]
 6985 00f4 9A60     		str	r2, [r3, #8]
 6986 00f6 BB69     		ldr	r3, [r7, #24]
 6987 00f8 DA6A     		ldr	r2, [r3, #44]
 6988 00fa 1346     		mov	r3, r2
 6989 00fc 9B00     		lsls	r3, r3, #2
 6990 00fe 1344     		add	r3, r3, r2
 6991 0100 9B00     		lsls	r3, r3, #2
 6992 0102 104A     		ldr	r2, .L387+8
 6993 0104 1A44     		add	r2, r2, r3
 6994 0106 BB69     		ldr	r3, [r7, #24]
 6995 0108 5A61     		str	r2, [r3, #20]
 6996 010a BB69     		ldr	r3, [r7, #24]
 6997 010c DA6A     		ldr	r2, [r3, #44]
 6998 010e 0D49     		ldr	r1, .L387+8
 6999 0110 1346     		mov	r3, r2
 7000 0112 9B00     		lsls	r3, r3, #2
 7001 0114 1344     		add	r3, r3, r2
 7002 0116 9B00     		lsls	r3, r3, #2
 7003 0118 0B44     		add	r3, r3, r1
 7004 011a 1B68     		ldr	r3, [r3]
 7005 011c 591C     		adds	r1, r3, #1
 7006 011e 0948     		ldr	r0, .L387+8
 7007 0120 1346     		mov	r3, r2
 7008 0122 9B00     		lsls	r3, r3, #2
 7009 0124 1344     		add	r3, r3, r2
 7010 0126 9B00     		lsls	r3, r3, #2
 7011 0128 0344     		add	r3, r3, r0
 7012 012a 1960     		str	r1, [r3]
 7013              	.LBE265:
4210:./Drivers/FreeRTOS/tasks.c **** 
4211:./Drivers/FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4212:./Drivers/FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4213:./Drivers/FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4214:./Drivers/FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4215:./Drivers/FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4216:./Drivers/FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4217:./Drivers/FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4218:./Drivers/FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4219:./Drivers/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 7014              		.loc 1 4219 29
 7015 012c 0123     		movs	r3, #1
 7016 012e FB61     		str	r3, [r7, #28]
 7017              	.L380:
4220:./Drivers/FreeRTOS/tasks.c ****                 }
4221:./Drivers/FreeRTOS/tasks.c ****                 else
4222:./Drivers/FreeRTOS/tasks.c ****                 {
4223:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4224:./Drivers/FreeRTOS/tasks.c ****                 }
4225:./Drivers/FreeRTOS/tasks.c ****             }
4226:./Drivers/FreeRTOS/tasks.c ****             else
4227:./Drivers/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 202


4228:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4229:./Drivers/FreeRTOS/tasks.c ****             }
4230:./Drivers/FreeRTOS/tasks.c ****         }
4231:./Drivers/FreeRTOS/tasks.c ****         else
4232:./Drivers/FreeRTOS/tasks.c ****         {
4233:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4234:./Drivers/FreeRTOS/tasks.c ****         }
4235:./Drivers/FreeRTOS/tasks.c **** 
4236:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 7018              		.loc 1 4236 16
 7019 0130 FB69     		ldr	r3, [r7, #28]
4237:./Drivers/FreeRTOS/tasks.c ****     }
 7020              		.loc 1 4237 5
 7021 0132 1846     		mov	r0, r3
 7022 0134 2037     		adds	r7, r7, #32
 7023              	.LCFI249:
 7024              		.cfi_def_cfa_offset 8
 7025 0136 BD46     		mov	sp, r7
 7026              	.LCFI250:
 7027              		.cfi_def_cfa_register 13
 7028              		@ sp needed
 7029 0138 80BD     		pop	{r7, pc}
 7030              	.L388:
 7031 013a 00BF     		.align	2
 7032              	.L387:
 7033 013c 00000000 		.word	pxCurrentTCB
 7034 0140 00000000 		.word	uxTopReadyPriority
 7035 0144 00000000 		.word	pxReadyTasksLists
 7036              		.cfi_endproc
 7037              	.LFE53:
 7039              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 7040              		.align	1
 7041              		.global	vTaskPriorityDisinheritAfterTimeout
 7042              		.syntax unified
 7043              		.thumb
 7044              		.thumb_func
 7045              		.fpu fpv4-sp-d16
 7047              	vTaskPriorityDisinheritAfterTimeout:
 7048              	.LFB54:
4238:./Drivers/FreeRTOS/tasks.c **** 
4239:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4240:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4241:./Drivers/FreeRTOS/tasks.c **** 
4242:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4243:./Drivers/FreeRTOS/tasks.c **** 
4244:./Drivers/FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4245:./Drivers/FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4246:./Drivers/FreeRTOS/tasks.c ****     {
 7049              		.loc 1 4246 5
 7050              		.cfi_startproc
 7051              		@ args = 0, pretend = 0, frame = 40
 7052              		@ frame_needed = 1, uses_anonymous_args = 0
 7053 0000 80B5     		push	{r7, lr}
 7054              	.LCFI251:
 7055              		.cfi_def_cfa_offset 8
 7056              		.cfi_offset 7, -8
 7057              		.cfi_offset 14, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 203


 7058 0002 8AB0     		sub	sp, sp, #40
 7059              	.LCFI252:
 7060              		.cfi_def_cfa_offset 48
 7061 0004 00AF     		add	r7, sp, #0
 7062              	.LCFI253:
 7063              		.cfi_def_cfa_register 7
 7064 0006 7860     		str	r0, [r7, #4]
 7065 0008 3960     		str	r1, [r7]
4247:./Drivers/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 7066              		.loc 1 4247 23
 7067 000a 7B68     		ldr	r3, [r7, #4]
 7068 000c 3B62     		str	r3, [r7, #32]
4248:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4249:./Drivers/FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 7069              		.loc 1 4249 27
 7070 000e 0123     		movs	r3, #1
 7071 0010 FB61     		str	r3, [r7, #28]
4250:./Drivers/FreeRTOS/tasks.c **** 
4251:./Drivers/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
 7072              		.loc 1 4251 11
 7073 0012 7B68     		ldr	r3, [r7, #4]
 7074 0014 002B     		cmp	r3, #0
 7075 0016 00F0A180 		beq	.L399
4252:./Drivers/FreeRTOS/tasks.c ****         {
4253:./Drivers/FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4254:./Drivers/FreeRTOS/tasks.c ****              * one mutex. */
4255:./Drivers/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 7076              		.loc 1 4255 13
 7077 001a 3B6A     		ldr	r3, [r7, #32]
 7078 001c DB6C     		ldr	r3, [r3, #76]
 7079 001e 002B     		cmp	r3, #0
 7080 0020 0AD1     		bne	.L391
 7081              	.LBB266:
 7082              	.LBB267:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7083              		.loc 2 198 9
 7084              		.syntax unified
 7085              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7086 0022 4FF05003 			mov r3, #80												
 7087 0026 83F31188 		msr basepri, r3											
 7088 002a BFF36F8F 		isb														
 7089 002e BFF34F8F 		dsb														
 7090              	
 7091              	@ 0 "" 2
 7092              		.thumb
 7093              		.syntax unified
 7094 0032 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7095              		.loc 2 206 5
 7096 0034 00BF     		nop
 7097              	.L392:
 7098              	.LBE267:
 7099              	.LBE266:
 7100              		.loc 1 4255 13 discriminator 1
 7101 0036 FEE7     		b	.L392
 7102              	.L391:
4256:./Drivers/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 204


4257:./Drivers/FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4258:./Drivers/FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4259:./Drivers/FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4260:./Drivers/FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4261:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 7103              		.loc 1 4261 22
 7104 0038 3B6A     		ldr	r3, [r7, #32]
 7105 003a 9B6C     		ldr	r3, [r3, #72]
 7106              		.loc 1 4261 15
 7107 003c 3A68     		ldr	r2, [r7]
 7108 003e 9A42     		cmp	r2, r3
 7109 0040 02D9     		bls	.L393
4262:./Drivers/FreeRTOS/tasks.c ****             {
4263:./Drivers/FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 7110              		.loc 1 4263 33
 7111 0042 3B68     		ldr	r3, [r7]
 7112 0044 7B62     		str	r3, [r7, #36]
 7113 0046 02E0     		b	.L394
 7114              	.L393:
4264:./Drivers/FreeRTOS/tasks.c ****             }
4265:./Drivers/FreeRTOS/tasks.c ****             else
4266:./Drivers/FreeRTOS/tasks.c ****             {
4267:./Drivers/FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
 7115              		.loc 1 4267 33
 7116 0048 3B6A     		ldr	r3, [r7, #32]
 7117 004a 9B6C     		ldr	r3, [r3, #72]
 7118 004c 7B62     		str	r3, [r7, #36]
 7119              	.L394:
4268:./Drivers/FreeRTOS/tasks.c ****             }
4269:./Drivers/FreeRTOS/tasks.c **** 
4270:./Drivers/FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4271:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
 7120              		.loc 1 4271 22
 7121 004e 3B6A     		ldr	r3, [r7, #32]
 7122 0050 DB6A     		ldr	r3, [r3, #44]
 7123              		.loc 1 4271 15
 7124 0052 7A6A     		ldr	r2, [r7, #36]
 7125 0054 9A42     		cmp	r2, r3
 7126 0056 00F08180 		beq	.L399
4272:./Drivers/FreeRTOS/tasks.c ****             {
4273:./Drivers/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4274:./Drivers/FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4275:./Drivers/FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4276:./Drivers/FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4277:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 7127              		.loc 1 4277 26
 7128 005a 3B6A     		ldr	r3, [r7, #32]
 7129 005c DB6C     		ldr	r3, [r3, #76]
 7130              		.loc 1 4277 19
 7131 005e FA69     		ldr	r2, [r7, #28]
 7132 0060 9A42     		cmp	r2, r3
 7133 0062 7BD1     		bne	.L399
4278:./Drivers/FreeRTOS/tasks.c ****                 {
4279:./Drivers/FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4280:./Drivers/FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4281:./Drivers/FreeRTOS/tasks.c ****                      * its own priority. */
4282:./Drivers/FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 205


 7134              		.loc 1 4282 21
 7135 0064 3F4B     		ldr	r3, .L400
 7136 0066 1B68     		ldr	r3, [r3]
 7137 0068 3A6A     		ldr	r2, [r7, #32]
 7138 006a 9A42     		cmp	r2, r3
 7139 006c 0AD1     		bne	.L395
 7140              	.LBB268:
 7141              	.LBB269:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7142              		.loc 2 198 9
 7143              		.syntax unified
 7144              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7145 006e 4FF05003 			mov r3, #80												
 7146 0072 83F31188 		msr basepri, r3											
 7147 0076 BFF36F8F 		isb														
 7148 007a BFF34F8F 		dsb														
 7149              	
 7150              	@ 0 "" 2
 7151              		.thumb
 7152              		.syntax unified
 7153 007e FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7154              		.loc 2 206 5
 7155 0080 00BF     		nop
 7156              	.L396:
 7157              	.LBE269:
 7158              	.LBE268:
 7159              		.loc 1 4282 21 discriminator 2
 7160 0082 FEE7     		b	.L396
 7161              	.L395:
4283:./Drivers/FreeRTOS/tasks.c **** 
4284:./Drivers/FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4285:./Drivers/FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4286:./Drivers/FreeRTOS/tasks.c ****                      * state. */
4287:./Drivers/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4288:./Drivers/FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 7162              		.loc 1 4288 43
 7163 0084 3B6A     		ldr	r3, [r7, #32]
 7164 0086 DB6A     		ldr	r3, [r3, #44]
 7165 0088 BB61     		str	r3, [r7, #24]
4289:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 7166              		.loc 1 4289 39
 7167 008a 3B6A     		ldr	r3, [r7, #32]
 7168 008c 7A6A     		ldr	r2, [r7, #36]
 7169 008e DA62     		str	r2, [r3, #44]
4290:./Drivers/FreeRTOS/tasks.c **** 
4291:./Drivers/FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4292:./Drivers/FreeRTOS/tasks.c ****                      * being used for anything else. */
4293:./Drivers/FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
 7170              		.loc 1 4293 27
 7171 0090 3B6A     		ldr	r3, [r7, #32]
 7172 0092 9B69     		ldr	r3, [r3, #24]
 7173              		.loc 1 4293 23
 7174 0094 002B     		cmp	r3, #0
 7175 0096 04DB     		blt	.L397
4294:./Drivers/FreeRTOS/tasks.c ****                     {
4295:./Drivers/FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 206


 7176              		.loc 1 4295 25
 7177 0098 7B6A     		ldr	r3, [r7, #36]
 7178 009a C3F10502 		rsb	r2, r3, #5
 7179 009e 3B6A     		ldr	r3, [r7, #32]
 7180 00a0 9A61     		str	r2, [r3, #24]
 7181              	.L397:
4296:./Drivers/FreeRTOS/tasks.c ****                     }
4297:./Drivers/FreeRTOS/tasks.c ****                     else
4298:./Drivers/FreeRTOS/tasks.c ****                     {
4299:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4300:./Drivers/FreeRTOS/tasks.c ****                     }
4301:./Drivers/FreeRTOS/tasks.c **** 
4302:./Drivers/FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4303:./Drivers/FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4304:./Drivers/FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4305:./Drivers/FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4306:./Drivers/FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4307:./Drivers/FreeRTOS/tasks.c ****                      * Ready list per priority. */
4308:./Drivers/FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
 7182              		.loc 1 4308 25
 7183 00a2 3B6A     		ldr	r3, [r7, #32]
 7184 00a4 5969     		ldr	r1, [r3, #20]
 7185 00a6 BA69     		ldr	r2, [r7, #24]
 7186 00a8 1346     		mov	r3, r2
 7187 00aa 9B00     		lsls	r3, r3, #2
 7188 00ac 1344     		add	r3, r3, r2
 7189 00ae 9B00     		lsls	r3, r3, #2
 7190 00b0 2D4A     		ldr	r2, .L400+4
 7191 00b2 1344     		add	r3, r3, r2
 7192              		.loc 1 4308 23
 7193 00b4 9942     		cmp	r1, r3
 7194 00b6 51D1     		bne	.L399
4309:./Drivers/FreeRTOS/tasks.c ****                     {
4310:./Drivers/FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7195              		.loc 1 4310 29
 7196 00b8 3B6A     		ldr	r3, [r7, #32]
 7197 00ba 0433     		adds	r3, r3, #4
 7198 00bc 1846     		mov	r0, r3
 7199 00be FFF7FEFF 		bl	uxListRemove
 7200 00c2 0346     		mov	r3, r0
 7201              		.loc 1 4310 27
 7202 00c4 002B     		cmp	r3, #0
 7203 00c6 0AD1     		bne	.L398
4311:./Drivers/FreeRTOS/tasks.c ****                         {
4312:./Drivers/FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4313:./Drivers/FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4314:./Drivers/FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4315:./Drivers/FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 7204              		.loc 1 4315 29
 7205 00c8 3B6A     		ldr	r3, [r7, #32]
 7206 00ca DB6A     		ldr	r3, [r3, #44]
 7207 00cc 0122     		movs	r2, #1
 7208 00ce 02FA03F3 		lsl	r3, r2, r3
 7209 00d2 DA43     		mvns	r2, r3
 7210 00d4 254B     		ldr	r3, .L400+8
 7211 00d6 1B68     		ldr	r3, [r3]
 7212 00d8 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 207


 7213 00da 244A     		ldr	r2, .L400+8
 7214 00dc 1360     		str	r3, [r2]
 7215              	.L398:
4316:./Drivers/FreeRTOS/tasks.c ****                         }
4317:./Drivers/FreeRTOS/tasks.c ****                         else
4318:./Drivers/FreeRTOS/tasks.c ****                         {
4319:./Drivers/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4320:./Drivers/FreeRTOS/tasks.c ****                         }
4321:./Drivers/FreeRTOS/tasks.c **** 
4322:./Drivers/FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 7216              		.loc 1 4322 25
 7217 00de 3B6A     		ldr	r3, [r7, #32]
 7218 00e0 DB6A     		ldr	r3, [r3, #44]
 7219 00e2 0122     		movs	r2, #1
 7220 00e4 9A40     		lsls	r2, r2, r3
 7221 00e6 214B     		ldr	r3, .L400+8
 7222 00e8 1B68     		ldr	r3, [r3]
 7223 00ea 1343     		orrs	r3, r3, r2
 7224 00ec 1F4A     		ldr	r2, .L400+8
 7225 00ee 1360     		str	r3, [r2]
 7226              	.LBB270:
 7227 00f0 3B6A     		ldr	r3, [r7, #32]
 7228 00f2 DA6A     		ldr	r2, [r3, #44]
 7229 00f4 1C49     		ldr	r1, .L400+4
 7230 00f6 1346     		mov	r3, r2
 7231 00f8 9B00     		lsls	r3, r3, #2
 7232 00fa 1344     		add	r3, r3, r2
 7233 00fc 9B00     		lsls	r3, r3, #2
 7234 00fe 0B44     		add	r3, r3, r1
 7235 0100 0433     		adds	r3, r3, #4
 7236 0102 1B68     		ldr	r3, [r3]
 7237 0104 7B61     		str	r3, [r7, #20]
 7238 0106 3B6A     		ldr	r3, [r7, #32]
 7239 0108 7A69     		ldr	r2, [r7, #20]
 7240 010a 9A60     		str	r2, [r3, #8]
 7241 010c 7B69     		ldr	r3, [r7, #20]
 7242 010e 9A68     		ldr	r2, [r3, #8]
 7243 0110 3B6A     		ldr	r3, [r7, #32]
 7244 0112 DA60     		str	r2, [r3, #12]
 7245 0114 7B69     		ldr	r3, [r7, #20]
 7246 0116 9B68     		ldr	r3, [r3, #8]
 7247 0118 3A6A     		ldr	r2, [r7, #32]
 7248 011a 0432     		adds	r2, r2, #4
 7249 011c 5A60     		str	r2, [r3, #4]
 7250 011e 3B6A     		ldr	r3, [r7, #32]
 7251 0120 1A1D     		adds	r2, r3, #4
 7252 0122 7B69     		ldr	r3, [r7, #20]
 7253 0124 9A60     		str	r2, [r3, #8]
 7254 0126 3B6A     		ldr	r3, [r7, #32]
 7255 0128 DA6A     		ldr	r2, [r3, #44]
 7256 012a 1346     		mov	r3, r2
 7257 012c 9B00     		lsls	r3, r3, #2
 7258 012e 1344     		add	r3, r3, r2
 7259 0130 9B00     		lsls	r3, r3, #2
 7260 0132 0D4A     		ldr	r2, .L400+4
 7261 0134 1A44     		add	r2, r2, r3
 7262 0136 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 208


 7263 0138 5A61     		str	r2, [r3, #20]
 7264 013a 3B6A     		ldr	r3, [r7, #32]
 7265 013c DA6A     		ldr	r2, [r3, #44]
 7266 013e 0A49     		ldr	r1, .L400+4
 7267 0140 1346     		mov	r3, r2
 7268 0142 9B00     		lsls	r3, r3, #2
 7269 0144 1344     		add	r3, r3, r2
 7270 0146 9B00     		lsls	r3, r3, #2
 7271 0148 0B44     		add	r3, r3, r1
 7272 014a 1B68     		ldr	r3, [r3]
 7273 014c 591C     		adds	r1, r3, #1
 7274 014e 0648     		ldr	r0, .L400+4
 7275 0150 1346     		mov	r3, r2
 7276 0152 9B00     		lsls	r3, r3, #2
 7277 0154 1344     		add	r3, r3, r2
 7278 0156 9B00     		lsls	r3, r3, #2
 7279 0158 0344     		add	r3, r3, r0
 7280 015a 1960     		str	r1, [r3]
 7281              	.L399:
 7282              	.LBE270:
4323:./Drivers/FreeRTOS/tasks.c ****                     }
4324:./Drivers/FreeRTOS/tasks.c ****                     else
4325:./Drivers/FreeRTOS/tasks.c ****                     {
4326:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4327:./Drivers/FreeRTOS/tasks.c ****                     }
4328:./Drivers/FreeRTOS/tasks.c ****                 }
4329:./Drivers/FreeRTOS/tasks.c ****                 else
4330:./Drivers/FreeRTOS/tasks.c ****                 {
4331:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4332:./Drivers/FreeRTOS/tasks.c ****                 }
4333:./Drivers/FreeRTOS/tasks.c ****             }
4334:./Drivers/FreeRTOS/tasks.c ****             else
4335:./Drivers/FreeRTOS/tasks.c ****             {
4336:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4337:./Drivers/FreeRTOS/tasks.c ****             }
4338:./Drivers/FreeRTOS/tasks.c ****         }
4339:./Drivers/FreeRTOS/tasks.c ****         else
4340:./Drivers/FreeRTOS/tasks.c ****         {
4341:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4342:./Drivers/FreeRTOS/tasks.c ****         }
4343:./Drivers/FreeRTOS/tasks.c ****     }
 7283              		.loc 1 4343 5
 7284 015c 00BF     		nop
 7285 015e 2837     		adds	r7, r7, #40
 7286              	.LCFI254:
 7287              		.cfi_def_cfa_offset 8
 7288 0160 BD46     		mov	sp, r7
 7289              	.LCFI255:
 7290              		.cfi_def_cfa_register 13
 7291              		@ sp needed
 7292 0162 80BD     		pop	{r7, pc}
 7293              	.L401:
 7294              		.align	2
 7295              	.L400:
 7296 0164 00000000 		.word	pxCurrentTCB
 7297 0168 00000000 		.word	pxReadyTasksLists
 7298 016c 00000000 		.word	uxTopReadyPriority
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 209


 7299              		.cfi_endproc
 7300              	.LFE54:
 7302              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7303              		.align	1
 7304              		.global	uxTaskResetEventItemValue
 7305              		.syntax unified
 7306              		.thumb
 7307              		.thumb_func
 7308              		.fpu fpv4-sp-d16
 7310              	uxTaskResetEventItemValue:
 7311              	.LFB55:
4344:./Drivers/FreeRTOS/tasks.c **** 
4345:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4346:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4347:./Drivers/FreeRTOS/tasks.c **** 
4348:./Drivers/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4349:./Drivers/FreeRTOS/tasks.c **** 
4350:./Drivers/FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4351:./Drivers/FreeRTOS/tasks.c ****     {
4352:./Drivers/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4353:./Drivers/FreeRTOS/tasks.c **** 
4354:./Drivers/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4355:./Drivers/FreeRTOS/tasks.c ****         {
4356:./Drivers/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4357:./Drivers/FreeRTOS/tasks.c **** 
4358:./Drivers/FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4359:./Drivers/FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4360:./Drivers/FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4361:./Drivers/FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4362:./Drivers/FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4363:./Drivers/FreeRTOS/tasks.c ****              * critical section. */
4364:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4365:./Drivers/FreeRTOS/tasks.c ****             {
4366:./Drivers/FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4367:./Drivers/FreeRTOS/tasks.c ****             }
4368:./Drivers/FreeRTOS/tasks.c ****         }
4369:./Drivers/FreeRTOS/tasks.c ****         else
4370:./Drivers/FreeRTOS/tasks.c ****         {
4371:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4372:./Drivers/FreeRTOS/tasks.c ****         }
4373:./Drivers/FreeRTOS/tasks.c ****     }
4374:./Drivers/FreeRTOS/tasks.c **** 
4375:./Drivers/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4376:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4377:./Drivers/FreeRTOS/tasks.c **** 
4378:./Drivers/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4379:./Drivers/FreeRTOS/tasks.c **** 
4380:./Drivers/FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4381:./Drivers/FreeRTOS/tasks.c ****     {
4382:./Drivers/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4383:./Drivers/FreeRTOS/tasks.c ****         {
4384:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4385:./Drivers/FreeRTOS/tasks.c ****             {
4386:./Drivers/FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4387:./Drivers/FreeRTOS/tasks.c **** 
4388:./Drivers/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4389:./Drivers/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 210


4390:./Drivers/FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4391:./Drivers/FreeRTOS/tasks.c ****                 }
4392:./Drivers/FreeRTOS/tasks.c ****                 else
4393:./Drivers/FreeRTOS/tasks.c ****                 {
4394:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4395:./Drivers/FreeRTOS/tasks.c ****                 }
4396:./Drivers/FreeRTOS/tasks.c ****             }
4397:./Drivers/FreeRTOS/tasks.c ****             else
4398:./Drivers/FreeRTOS/tasks.c ****             {
4399:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4400:./Drivers/FreeRTOS/tasks.c ****             }
4401:./Drivers/FreeRTOS/tasks.c ****         }
4402:./Drivers/FreeRTOS/tasks.c ****         else
4403:./Drivers/FreeRTOS/tasks.c ****         {
4404:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4405:./Drivers/FreeRTOS/tasks.c ****         }
4406:./Drivers/FreeRTOS/tasks.c ****     }
4407:./Drivers/FreeRTOS/tasks.c **** 
4408:./Drivers/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4409:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4410:./Drivers/FreeRTOS/tasks.c **** 
4411:./Drivers/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4412:./Drivers/FreeRTOS/tasks.c **** 
4413:./Drivers/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4414:./Drivers/FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4415:./Drivers/FreeRTOS/tasks.c ****     {
4416:./Drivers/FreeRTOS/tasks.c ****         size_t x;
4417:./Drivers/FreeRTOS/tasks.c **** 
4418:./Drivers/FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4419:./Drivers/FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4420:./Drivers/FreeRTOS/tasks.c **** 
4421:./Drivers/FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4422:./Drivers/FreeRTOS/tasks.c ****          * printed out. */
4423:./Drivers/FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4424:./Drivers/FreeRTOS/tasks.c ****         {
4425:./Drivers/FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4426:./Drivers/FreeRTOS/tasks.c ****         }
4427:./Drivers/FreeRTOS/tasks.c **** 
4428:./Drivers/FreeRTOS/tasks.c ****         /* Terminate. */
4429:./Drivers/FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4430:./Drivers/FreeRTOS/tasks.c **** 
4431:./Drivers/FreeRTOS/tasks.c ****         /* Return the new end of string. */
4432:./Drivers/FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4433:./Drivers/FreeRTOS/tasks.c ****     }
4434:./Drivers/FreeRTOS/tasks.c **** 
4435:./Drivers/FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4436:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4437:./Drivers/FreeRTOS/tasks.c **** 
4438:./Drivers/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4439:./Drivers/FreeRTOS/tasks.c **** 
4440:./Drivers/FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4441:./Drivers/FreeRTOS/tasks.c ****     {
4442:./Drivers/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4443:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4444:./Drivers/FreeRTOS/tasks.c ****         char cStatus;
4445:./Drivers/FreeRTOS/tasks.c **** 
4446:./Drivers/FreeRTOS/tasks.c ****         /*
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 211


4447:./Drivers/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4448:./Drivers/FreeRTOS/tasks.c ****          *
4449:./Drivers/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4450:./Drivers/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4451:./Drivers/FreeRTOS/tasks.c ****          * scheduler.
4452:./Drivers/FreeRTOS/tasks.c ****          *
4453:./Drivers/FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4454:./Drivers/FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4455:./Drivers/FreeRTOS/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4456:./Drivers/FreeRTOS/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4457:./Drivers/FreeRTOS/tasks.c ****          * on top of stack - not the number of bytes.
4458:./Drivers/FreeRTOS/tasks.c ****          *
4459:./Drivers/FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4460:./Drivers/FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4461:./Drivers/FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4462:./Drivers/FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4463:./Drivers/FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4464:./Drivers/FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4465:./Drivers/FreeRTOS/tasks.c ****          * snprintf() implementation!).
4466:./Drivers/FreeRTOS/tasks.c ****          *
4467:./Drivers/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4468:./Drivers/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4469:./Drivers/FreeRTOS/tasks.c ****          * through a call to vTaskList().
4470:./Drivers/FreeRTOS/tasks.c ****          */
4471:./Drivers/FreeRTOS/tasks.c **** 
4472:./Drivers/FreeRTOS/tasks.c **** 
4473:./Drivers/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4474:./Drivers/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4475:./Drivers/FreeRTOS/tasks.c **** 
4476:./Drivers/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4477:./Drivers/FreeRTOS/tasks.c ****          * function is executing. */
4478:./Drivers/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4479:./Drivers/FreeRTOS/tasks.c **** 
4480:./Drivers/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4481:./Drivers/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4482:./Drivers/FreeRTOS/tasks.c ****          * equate to NULL. */
4483:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4484:./Drivers/FreeRTOS/tasks.c **** 
4485:./Drivers/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4486:./Drivers/FreeRTOS/tasks.c ****         {
4487:./Drivers/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4488:./Drivers/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4489:./Drivers/FreeRTOS/tasks.c **** 
4490:./Drivers/FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4491:./Drivers/FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4492:./Drivers/FreeRTOS/tasks.c ****             {
4493:./Drivers/FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4494:./Drivers/FreeRTOS/tasks.c ****                 {
4495:./Drivers/FreeRTOS/tasks.c ****                     case eRunning:
4496:./Drivers/FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4497:./Drivers/FreeRTOS/tasks.c ****                         break;
4498:./Drivers/FreeRTOS/tasks.c **** 
4499:./Drivers/FreeRTOS/tasks.c ****                     case eReady:
4500:./Drivers/FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4501:./Drivers/FreeRTOS/tasks.c ****                         break;
4502:./Drivers/FreeRTOS/tasks.c **** 
4503:./Drivers/FreeRTOS/tasks.c ****                     case eBlocked:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 212


4504:./Drivers/FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4505:./Drivers/FreeRTOS/tasks.c ****                         break;
4506:./Drivers/FreeRTOS/tasks.c **** 
4507:./Drivers/FreeRTOS/tasks.c ****                     case eSuspended:
4508:./Drivers/FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4509:./Drivers/FreeRTOS/tasks.c ****                         break;
4510:./Drivers/FreeRTOS/tasks.c **** 
4511:./Drivers/FreeRTOS/tasks.c ****                     case eDeleted:
4512:./Drivers/FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4513:./Drivers/FreeRTOS/tasks.c ****                         break;
4514:./Drivers/FreeRTOS/tasks.c **** 
4515:./Drivers/FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4516:./Drivers/FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4517:./Drivers/FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4518:./Drivers/FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4519:./Drivers/FreeRTOS/tasks.c ****                         break;
4520:./Drivers/FreeRTOS/tasks.c ****                 }
4521:./Drivers/FreeRTOS/tasks.c **** 
4522:./Drivers/FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4523:./Drivers/FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4524:./Drivers/FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4525:./Drivers/FreeRTOS/tasks.c **** 
4526:./Drivers/FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4527:./Drivers/FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4528:./Drivers/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4529:./Drivers/FreeRTOS/tasks.c ****             }
4530:./Drivers/FreeRTOS/tasks.c **** 
4531:./Drivers/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4532:./Drivers/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4533:./Drivers/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4534:./Drivers/FreeRTOS/tasks.c ****         }
4535:./Drivers/FreeRTOS/tasks.c ****         else
4536:./Drivers/FreeRTOS/tasks.c ****         {
4537:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4538:./Drivers/FreeRTOS/tasks.c ****         }
4539:./Drivers/FreeRTOS/tasks.c ****     }
4540:./Drivers/FreeRTOS/tasks.c **** 
4541:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4542:./Drivers/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4543:./Drivers/FreeRTOS/tasks.c **** 
4544:./Drivers/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4545:./Drivers/FreeRTOS/tasks.c **** 
4546:./Drivers/FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4547:./Drivers/FreeRTOS/tasks.c ****     {
4548:./Drivers/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4549:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4550:./Drivers/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4551:./Drivers/FreeRTOS/tasks.c **** 
4552:./Drivers/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4553:./Drivers/FreeRTOS/tasks.c ****             {
4554:./Drivers/FreeRTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4555:./Drivers/FreeRTOS/tasks.c ****             }
4556:./Drivers/FreeRTOS/tasks.c ****         #endif
4557:./Drivers/FreeRTOS/tasks.c **** 
4558:./Drivers/FreeRTOS/tasks.c ****         /*
4559:./Drivers/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4560:./Drivers/FreeRTOS/tasks.c ****          *
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 213


4561:./Drivers/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4562:./Drivers/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4563:./Drivers/FreeRTOS/tasks.c ****          * scheduler.
4564:./Drivers/FreeRTOS/tasks.c ****          *
4565:./Drivers/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4566:./Drivers/FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4567:./Drivers/FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4568:./Drivers/FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4569:./Drivers/FreeRTOS/tasks.c ****          *
4570:./Drivers/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4571:./Drivers/FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4572:./Drivers/FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4573:./Drivers/FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4574:./Drivers/FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4575:./Drivers/FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4576:./Drivers/FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4577:./Drivers/FreeRTOS/tasks.c ****          *
4578:./Drivers/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4579:./Drivers/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4580:./Drivers/FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4581:./Drivers/FreeRTOS/tasks.c ****          */
4582:./Drivers/FreeRTOS/tasks.c **** 
4583:./Drivers/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4584:./Drivers/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4585:./Drivers/FreeRTOS/tasks.c **** 
4586:./Drivers/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4587:./Drivers/FreeRTOS/tasks.c ****          * function is executing. */
4588:./Drivers/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4589:./Drivers/FreeRTOS/tasks.c **** 
4590:./Drivers/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4591:./Drivers/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4592:./Drivers/FreeRTOS/tasks.c ****          * equate to NULL. */
4593:./Drivers/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4594:./Drivers/FreeRTOS/tasks.c **** 
4595:./Drivers/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4596:./Drivers/FreeRTOS/tasks.c ****         {
4597:./Drivers/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4598:./Drivers/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4599:./Drivers/FreeRTOS/tasks.c **** 
4600:./Drivers/FreeRTOS/tasks.c ****             /* For percentage calculations. */
4601:./Drivers/FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4602:./Drivers/FreeRTOS/tasks.c **** 
4603:./Drivers/FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4604:./Drivers/FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4605:./Drivers/FreeRTOS/tasks.c ****             {
4606:./Drivers/FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4607:./Drivers/FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4608:./Drivers/FreeRTOS/tasks.c ****                 {
4609:./Drivers/FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4610:./Drivers/FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4611:./Drivers/FreeRTOS/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4612:./Drivers/FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4613:./Drivers/FreeRTOS/tasks.c **** 
4614:./Drivers/FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4615:./Drivers/FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4616:./Drivers/FreeRTOS/tasks.c ****                      * easily. */
4617:./Drivers/FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 214


4618:./Drivers/FreeRTOS/tasks.c **** 
4619:./Drivers/FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4620:./Drivers/FreeRTOS/tasks.c ****                     {
4621:./Drivers/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4622:./Drivers/FreeRTOS/tasks.c ****                             {
4623:./Drivers/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4624:./Drivers/FreeRTOS/tasks.c ****                             }
4625:./Drivers/FreeRTOS/tasks.c ****                         #else
4626:./Drivers/FreeRTOS/tasks.c ****                             {
4627:./Drivers/FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4628:./Drivers/FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4629:./Drivers/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4630:./Drivers/FreeRTOS/tasks.c ****                             }
4631:./Drivers/FreeRTOS/tasks.c ****                         #endif
4632:./Drivers/FreeRTOS/tasks.c ****                     }
4633:./Drivers/FreeRTOS/tasks.c ****                     else
4634:./Drivers/FreeRTOS/tasks.c ****                     {
4635:./Drivers/FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4636:./Drivers/FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4637:./Drivers/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4638:./Drivers/FreeRTOS/tasks.c ****                             {
4639:./Drivers/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4640:./Drivers/FreeRTOS/tasks.c ****                             }
4641:./Drivers/FreeRTOS/tasks.c ****                         #else
4642:./Drivers/FreeRTOS/tasks.c ****                             {
4643:./Drivers/FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4644:./Drivers/FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4645:./Drivers/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4646:./Drivers/FreeRTOS/tasks.c ****                             }
4647:./Drivers/FreeRTOS/tasks.c ****                         #endif
4648:./Drivers/FreeRTOS/tasks.c ****                     }
4649:./Drivers/FreeRTOS/tasks.c **** 
4650:./Drivers/FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4651:./Drivers/FreeRTOS/tasks.c ****                 }
4652:./Drivers/FreeRTOS/tasks.c ****             }
4653:./Drivers/FreeRTOS/tasks.c ****             else
4654:./Drivers/FreeRTOS/tasks.c ****             {
4655:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4656:./Drivers/FreeRTOS/tasks.c ****             }
4657:./Drivers/FreeRTOS/tasks.c **** 
4658:./Drivers/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4659:./Drivers/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4660:./Drivers/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4661:./Drivers/FreeRTOS/tasks.c ****         }
4662:./Drivers/FreeRTOS/tasks.c ****         else
4663:./Drivers/FreeRTOS/tasks.c ****         {
4664:./Drivers/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4665:./Drivers/FreeRTOS/tasks.c ****         }
4666:./Drivers/FreeRTOS/tasks.c ****     }
4667:./Drivers/FreeRTOS/tasks.c **** 
4668:./Drivers/FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4669:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4670:./Drivers/FreeRTOS/tasks.c **** 
4671:./Drivers/FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4672:./Drivers/FreeRTOS/tasks.c **** {
 7312              		.loc 1 4672 1
 7313              		.cfi_startproc
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 215


 7314              		@ args = 0, pretend = 0, frame = 8
 7315              		@ frame_needed = 1, uses_anonymous_args = 0
 7316              		@ link register save eliminated.
 7317 0000 80B4     		push	{r7}
 7318              	.LCFI256:
 7319              		.cfi_def_cfa_offset 4
 7320              		.cfi_offset 7, -4
 7321 0002 83B0     		sub	sp, sp, #12
 7322              	.LCFI257:
 7323              		.cfi_def_cfa_offset 16
 7324 0004 00AF     		add	r7, sp, #0
 7325              	.LCFI258:
 7326              		.cfi_def_cfa_register 7
4673:./Drivers/FreeRTOS/tasks.c ****     TickType_t uxReturn;
4674:./Drivers/FreeRTOS/tasks.c **** 
4675:./Drivers/FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7327              		.loc 1 4675 16
 7328 0006 094B     		ldr	r3, .L404
 7329 0008 1B68     		ldr	r3, [r3]
 7330              		.loc 1 4675 14
 7331 000a 9B69     		ldr	r3, [r3, #24]
 7332 000c 7B60     		str	r3, [r7, #4]
4676:./Drivers/FreeRTOS/tasks.c **** 
4677:./Drivers/FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4678:./Drivers/FreeRTOS/tasks.c ****      * queues and semaphores. */
4679:./Drivers/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 7333              		.loc 1 4679 5
 7334 000e 074B     		ldr	r3, .L404
 7335 0010 1B68     		ldr	r3, [r3]
 7336 0012 DA6A     		ldr	r2, [r3, #44]
 7337 0014 054B     		ldr	r3, .L404
 7338 0016 1B68     		ldr	r3, [r3]
 7339 0018 C2F10502 		rsb	r2, r2, #5
 7340 001c 9A61     		str	r2, [r3, #24]
4680:./Drivers/FreeRTOS/tasks.c **** 
4681:./Drivers/FreeRTOS/tasks.c ****     return uxReturn;
 7341              		.loc 1 4681 12
 7342 001e 7B68     		ldr	r3, [r7, #4]
4682:./Drivers/FreeRTOS/tasks.c **** }
 7343              		.loc 1 4682 1
 7344 0020 1846     		mov	r0, r3
 7345 0022 0C37     		adds	r7, r7, #12
 7346              	.LCFI259:
 7347              		.cfi_def_cfa_offset 4
 7348 0024 BD46     		mov	sp, r7
 7349              	.LCFI260:
 7350              		.cfi_def_cfa_register 13
 7351              		@ sp needed
 7352 0026 5DF8047B 		ldr	r7, [sp], #4
 7353              	.LCFI261:
 7354              		.cfi_restore 7
 7355              		.cfi_def_cfa_offset 0
 7356 002a 7047     		bx	lr
 7357              	.L405:
 7358              		.align	2
 7359              	.L404:
 7360 002c 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 216


 7361              		.cfi_endproc
 7362              	.LFE55:
 7364              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7365              		.align	1
 7366              		.global	pvTaskIncrementMutexHeldCount
 7367              		.syntax unified
 7368              		.thumb
 7369              		.thumb_func
 7370              		.fpu fpv4-sp-d16
 7372              	pvTaskIncrementMutexHeldCount:
 7373              	.LFB56:
4683:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4684:./Drivers/FreeRTOS/tasks.c **** 
4685:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4686:./Drivers/FreeRTOS/tasks.c **** 
4687:./Drivers/FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4688:./Drivers/FreeRTOS/tasks.c ****     {
 7374              		.loc 1 4688 5
 7375              		.cfi_startproc
 7376              		@ args = 0, pretend = 0, frame = 0
 7377              		@ frame_needed = 1, uses_anonymous_args = 0
 7378              		@ link register save eliminated.
 7379 0000 80B4     		push	{r7}
 7380              	.LCFI262:
 7381              		.cfi_def_cfa_offset 4
 7382              		.cfi_offset 7, -4
 7383 0002 00AF     		add	r7, sp, #0
 7384              	.LCFI263:
 7385              		.cfi_def_cfa_register 7
4689:./Drivers/FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4690:./Drivers/FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4691:./Drivers/FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
 7386              		.loc 1 4691 26
 7387 0004 074B     		ldr	r3, .L409
 7388 0006 1B68     		ldr	r3, [r3]
 7389              		.loc 1 4691 11
 7390 0008 002B     		cmp	r3, #0
 7391 000a 04D0     		beq	.L407
4692:./Drivers/FreeRTOS/tasks.c ****         {
4693:./Drivers/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
 7392              		.loc 1 4693 27
 7393 000c 054B     		ldr	r3, .L409
 7394 000e 1B68     		ldr	r3, [r3]
 7395 0010 DA6C     		ldr	r2, [r3, #76]
 7396              		.loc 1 4693 44
 7397 0012 0132     		adds	r2, r2, #1
 7398 0014 DA64     		str	r2, [r3, #76]
 7399              	.L407:
4694:./Drivers/FreeRTOS/tasks.c ****         }
4695:./Drivers/FreeRTOS/tasks.c **** 
4696:./Drivers/FreeRTOS/tasks.c ****         return pxCurrentTCB;
 7400              		.loc 1 4696 16
 7401 0016 034B     		ldr	r3, .L409
 7402 0018 1B68     		ldr	r3, [r3]
4697:./Drivers/FreeRTOS/tasks.c ****     }
 7403              		.loc 1 4697 5
 7404 001a 1846     		mov	r0, r3
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 217


 7405 001c BD46     		mov	sp, r7
 7406              	.LCFI264:
 7407              		.cfi_def_cfa_register 13
 7408              		@ sp needed
 7409 001e 5DF8047B 		ldr	r7, [sp], #4
 7410              	.LCFI265:
 7411              		.cfi_restore 7
 7412              		.cfi_def_cfa_offset 0
 7413 0022 7047     		bx	lr
 7414              	.L410:
 7415              		.align	2
 7416              	.L409:
 7417 0024 00000000 		.word	pxCurrentTCB
 7418              		.cfi_endproc
 7419              	.LFE56:
 7421              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 7422              		.align	1
 7423              		.global	ulTaskGenericNotifyTake
 7424              		.syntax unified
 7425              		.thumb
 7426              		.thumb_func
 7427              		.fpu fpv4-sp-d16
 7429              	ulTaskGenericNotifyTake:
 7430              	.LFB57:
4698:./Drivers/FreeRTOS/tasks.c **** 
4699:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4700:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4701:./Drivers/FreeRTOS/tasks.c **** 
4702:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4703:./Drivers/FreeRTOS/tasks.c **** 
4704:./Drivers/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4705:./Drivers/FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4706:./Drivers/FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4707:./Drivers/FreeRTOS/tasks.c ****     {
 7431              		.loc 1 4707 5
 7432              		.cfi_startproc
 7433              		@ args = 0, pretend = 0, frame = 24
 7434              		@ frame_needed = 1, uses_anonymous_args = 0
 7435 0000 80B5     		push	{r7, lr}
 7436              	.LCFI266:
 7437              		.cfi_def_cfa_offset 8
 7438              		.cfi_offset 7, -8
 7439              		.cfi_offset 14, -4
 7440 0002 86B0     		sub	sp, sp, #24
 7441              	.LCFI267:
 7442              		.cfi_def_cfa_offset 32
 7443 0004 00AF     		add	r7, sp, #0
 7444              	.LCFI268:
 7445              		.cfi_def_cfa_register 7
 7446 0006 F860     		str	r0, [r7, #12]
 7447 0008 B960     		str	r1, [r7, #8]
 7448 000a 7A60     		str	r2, [r7, #4]
4708:./Drivers/FreeRTOS/tasks.c ****         uint32_t ulReturn;
4709:./Drivers/FreeRTOS/tasks.c **** 
4710:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7449              		.loc 1 4710 9
 7450 000c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 218


 7451 000e 002B     		cmp	r3, #0
 7452 0010 0AD0     		beq	.L412
 7453              	.LBB271:
 7454              	.LBB272:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7455              		.loc 2 198 9
 7456              		.syntax unified
 7457              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7458 0012 4FF05003 			mov r3, #80												
 7459 0016 83F31188 		msr basepri, r3											
 7460 001a BFF36F8F 		isb														
 7461 001e BFF34F8F 		dsb														
 7462              	
 7463              	@ 0 "" 2
 7464              		.thumb
 7465              		.syntax unified
 7466 0022 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7467              		.loc 2 206 5
 7468 0024 00BF     		nop
 7469              	.L413:
 7470              	.LBE272:
 7471              	.LBE271:
 7472              		.loc 1 4710 9 discriminator 1
 7473 0026 FEE7     		b	.L413
 7474              	.L412:
4711:./Drivers/FreeRTOS/tasks.c **** 
4712:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7475              		.loc 1 4712 9
 7476 0028 FFF7FEFF 		bl	vPortEnterCritical
4713:./Drivers/FreeRTOS/tasks.c ****         {
4714:./Drivers/FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4715:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 7477              		.loc 1 4715 29
 7478 002c 264B     		ldr	r3, .L418
 7479 002e 1B68     		ldr	r3, [r3]
 7480              		.loc 1 4715 46
 7481 0030 FA68     		ldr	r2, [r7, #12]
 7482 0032 1432     		adds	r2, r2, #20
 7483 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7484              		.loc 1 4715 15
 7485 0038 002B     		cmp	r3, #0
 7486 003a 15D1     		bne	.L414
4716:./Drivers/FreeRTOS/tasks.c ****             {
4717:./Drivers/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4718:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7487              		.loc 1 4718 29
 7488 003c 224B     		ldr	r3, .L418
 7489 003e 1A68     		ldr	r2, [r3]
 7490              		.loc 1 4718 62
 7491 0040 FB68     		ldr	r3, [r7, #12]
 7492 0042 1344     		add	r3, r3, r2
 7493 0044 5433     		adds	r3, r3, #84
 7494 0046 0122     		movs	r2, #1
 7495 0048 1A70     		strb	r2, [r3]
4719:./Drivers/FreeRTOS/tasks.c **** 
4720:./Drivers/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 219


 7496              		.loc 1 4720 19
 7497 004a 7B68     		ldr	r3, [r7, #4]
 7498 004c 002B     		cmp	r3, #0
 7499 004e 0BD0     		beq	.L414
4721:./Drivers/FreeRTOS/tasks.c ****                 {
4722:./Drivers/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7500              		.loc 1 4722 21
 7501 0050 0121     		movs	r1, #1
 7502 0052 7868     		ldr	r0, [r7, #4]
 7503 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:./Drivers/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4724:./Drivers/FreeRTOS/tasks.c **** 
4725:./Drivers/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4726:./Drivers/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4727:./Drivers/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4728:./Drivers/FreeRTOS/tasks.c ****                      * application code should ever do. */
4729:./Drivers/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7504              		.loc 1 4729 21
 7505 0058 1C4B     		ldr	r3, .L418+4
 7506 005a 4FF08052 		mov	r2, #268435456
 7507 005e 1A60     		str	r2, [r3]
 7508              		.syntax unified
 7509              	@ 4729 "./Drivers/FreeRTOS/tasks.c" 1
 7510 0060 BFF34F8F 		dsb
 7511              	@ 0 "" 2
 7512              	@ 4729 "./Drivers/FreeRTOS/tasks.c" 1
 7513 0064 BFF36F8F 		isb
 7514              	@ 0 "" 2
 7515              		.thumb
 7516              		.syntax unified
 7517              	.L414:
4730:./Drivers/FreeRTOS/tasks.c ****                 }
4731:./Drivers/FreeRTOS/tasks.c ****                 else
4732:./Drivers/FreeRTOS/tasks.c ****                 {
4733:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4734:./Drivers/FreeRTOS/tasks.c ****                 }
4735:./Drivers/FreeRTOS/tasks.c ****             }
4736:./Drivers/FreeRTOS/tasks.c ****             else
4737:./Drivers/FreeRTOS/tasks.c ****             {
4738:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4739:./Drivers/FreeRTOS/tasks.c ****             }
4740:./Drivers/FreeRTOS/tasks.c ****         }
4741:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7518              		.loc 1 4741 9
 7519 0068 FFF7FEFF 		bl	vPortExitCritical
4742:./Drivers/FreeRTOS/tasks.c **** 
4743:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7520              		.loc 1 4743 9
 7521 006c FFF7FEFF 		bl	vPortEnterCritical
4744:./Drivers/FreeRTOS/tasks.c ****         {
4745:./Drivers/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4746:./Drivers/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7522              		.loc 1 4746 36
 7523 0070 154B     		ldr	r3, .L418
 7524 0072 1B68     		ldr	r3, [r3]
 7525              		.loc 1 4746 22
 7526 0074 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 220


 7527 0076 1432     		adds	r2, r2, #20
 7528 0078 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7529 007c 7B61     		str	r3, [r7, #20]
4747:./Drivers/FreeRTOS/tasks.c **** 
4748:./Drivers/FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
 7530              		.loc 1 4748 15
 7531 007e 7B69     		ldr	r3, [r7, #20]
 7532 0080 002B     		cmp	r3, #0
 7533 0082 12D0     		beq	.L415
4749:./Drivers/FreeRTOS/tasks.c ****             {
4750:./Drivers/FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 7534              		.loc 1 4750 19
 7535 0084 BB68     		ldr	r3, [r7, #8]
 7536 0086 002B     		cmp	r3, #0
 7537 0088 07D0     		beq	.L416
4751:./Drivers/FreeRTOS/tasks.c ****                 {
4752:./Drivers/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 7538              		.loc 1 4752 33
 7539 008a 0F4B     		ldr	r3, .L418
 7540 008c 1B68     		ldr	r3, [r3]
 7541              		.loc 1 4752 68
 7542 008e FA68     		ldr	r2, [r7, #12]
 7543 0090 1432     		adds	r2, r2, #20
 7544 0092 0021     		movs	r1, #0
 7545 0094 43F82210 		str	r1, [r3, r2, lsl #2]
 7546 0098 07E0     		b	.L415
 7547              	.L416:
4753:./Drivers/FreeRTOS/tasks.c ****                 }
4754:./Drivers/FreeRTOS/tasks.c ****                 else
4755:./Drivers/FreeRTOS/tasks.c ****                 {
4756:./Drivers/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 7548              		.loc 1 4756 33
 7549 009a 0B4B     		ldr	r3, .L418
 7550 009c 1B68     		ldr	r3, [r3]
 7551              		.loc 1 4756 79
 7552 009e 7A69     		ldr	r2, [r7, #20]
 7553 00a0 511E     		subs	r1, r2, #1
 7554              		.loc 1 4756 68
 7555 00a2 FA68     		ldr	r2, [r7, #12]
 7556 00a4 1432     		adds	r2, r2, #20
 7557 00a6 43F82210 		str	r1, [r3, r2, lsl #2]
 7558              	.L415:
4757:./Drivers/FreeRTOS/tasks.c ****                 }
4758:./Drivers/FreeRTOS/tasks.c ****             }
4759:./Drivers/FreeRTOS/tasks.c ****             else
4760:./Drivers/FreeRTOS/tasks.c ****             {
4761:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4762:./Drivers/FreeRTOS/tasks.c ****             }
4763:./Drivers/FreeRTOS/tasks.c **** 
4764:./Drivers/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7559              		.loc 1 4764 25
 7560 00aa 074B     		ldr	r3, .L418
 7561 00ac 1A68     		ldr	r2, [r3]
 7562              		.loc 1 4764 58
 7563 00ae FB68     		ldr	r3, [r7, #12]
 7564 00b0 1344     		add	r3, r3, r2
 7565 00b2 5433     		adds	r3, r3, #84
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 221


 7566 00b4 0022     		movs	r2, #0
 7567 00b6 1A70     		strb	r2, [r3]
4765:./Drivers/FreeRTOS/tasks.c ****         }
4766:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7568              		.loc 1 4766 9
 7569 00b8 FFF7FEFF 		bl	vPortExitCritical
4767:./Drivers/FreeRTOS/tasks.c **** 
4768:./Drivers/FreeRTOS/tasks.c ****         return ulReturn;
 7570              		.loc 1 4768 16
 7571 00bc 7B69     		ldr	r3, [r7, #20]
4769:./Drivers/FreeRTOS/tasks.c ****     }
 7572              		.loc 1 4769 5
 7573 00be 1846     		mov	r0, r3
 7574 00c0 1837     		adds	r7, r7, #24
 7575              	.LCFI269:
 7576              		.cfi_def_cfa_offset 8
 7577 00c2 BD46     		mov	sp, r7
 7578              	.LCFI270:
 7579              		.cfi_def_cfa_register 13
 7580              		@ sp needed
 7581 00c4 80BD     		pop	{r7, pc}
 7582              	.L419:
 7583 00c6 00BF     		.align	2
 7584              	.L418:
 7585 00c8 00000000 		.word	pxCurrentTCB
 7586 00cc 04ED00E0 		.word	-536810236
 7587              		.cfi_endproc
 7588              	.LFE57:
 7590              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 7591              		.align	1
 7592              		.global	xTaskGenericNotifyWait
 7593              		.syntax unified
 7594              		.thumb
 7595              		.thumb_func
 7596              		.fpu fpv4-sp-d16
 7598              	xTaskGenericNotifyWait:
 7599              	.LFB58:
4770:./Drivers/FreeRTOS/tasks.c **** 
4771:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4772:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4773:./Drivers/FreeRTOS/tasks.c **** 
4774:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4775:./Drivers/FreeRTOS/tasks.c **** 
4776:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4777:./Drivers/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4778:./Drivers/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4779:./Drivers/FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4780:./Drivers/FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4781:./Drivers/FreeRTOS/tasks.c ****     {
 7600              		.loc 1 4781 5
 7601              		.cfi_startproc
 7602              		@ args = 4, pretend = 0, frame = 24
 7603              		@ frame_needed = 1, uses_anonymous_args = 0
 7604 0000 80B5     		push	{r7, lr}
 7605              	.LCFI271:
 7606              		.cfi_def_cfa_offset 8
 7607              		.cfi_offset 7, -8
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 222


 7608              		.cfi_offset 14, -4
 7609 0002 86B0     		sub	sp, sp, #24
 7610              	.LCFI272:
 7611              		.cfi_def_cfa_offset 32
 7612 0004 00AF     		add	r7, sp, #0
 7613              	.LCFI273:
 7614              		.cfi_def_cfa_register 7
 7615 0006 F860     		str	r0, [r7, #12]
 7616 0008 B960     		str	r1, [r7, #8]
 7617 000a 7A60     		str	r2, [r7, #4]
 7618 000c 3B60     		str	r3, [r7]
4782:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4783:./Drivers/FreeRTOS/tasks.c **** 
4784:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7619              		.loc 1 4784 9
 7620 000e FB68     		ldr	r3, [r7, #12]
 7621 0010 002B     		cmp	r3, #0
 7622 0012 0AD0     		beq	.L421
 7623              	.LBB273:
 7624              	.LBB274:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7625              		.loc 2 198 9
 7626              		.syntax unified
 7627              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7628 0014 4FF05003 			mov r3, #80												
 7629 0018 83F31188 		msr basepri, r3											
 7630 001c BFF36F8F 		isb														
 7631 0020 BFF34F8F 		dsb														
 7632              	
 7633              	@ 0 "" 2
 7634              		.thumb
 7635              		.syntax unified
 7636 0024 3B61     		str	r3, [r7, #16]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7637              		.loc 2 206 5
 7638 0026 00BF     		nop
 7639              	.L422:
 7640              	.LBE274:
 7641              	.LBE273:
 7642              		.loc 1 4784 9 discriminator 1
 7643 0028 FEE7     		b	.L422
 7644              	.L421:
4785:./Drivers/FreeRTOS/tasks.c **** 
4786:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7645              		.loc 1 4786 9
 7646 002a FFF7FEFF 		bl	vPortEnterCritical
4787:./Drivers/FreeRTOS/tasks.c ****         {
4788:./Drivers/FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4789:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7647              		.loc 1 4789 29
 7648 002e 324B     		ldr	r3, .L428
 7649 0030 1A68     		ldr	r2, [r3]
 7650              		.loc 1 4789 44
 7651 0032 FB68     		ldr	r3, [r7, #12]
 7652 0034 1344     		add	r3, r3, r2
 7653 0036 5433     		adds	r3, r3, #84
 7654 0038 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 223


 7655 003a DBB2     		uxtb	r3, r3
 7656              		.loc 1 4789 15
 7657 003c 022B     		cmp	r3, #2
 7658 003e 22D0     		beq	.L423
4790:./Drivers/FreeRTOS/tasks.c ****             {
4791:./Drivers/FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4792:./Drivers/FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4793:./Drivers/FreeRTOS/tasks.c ****                  * clear the value to zero. */
4794:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 7659              		.loc 1 4794 64
 7660 0040 2D4B     		ldr	r3, .L428
 7661 0042 1B68     		ldr	r3, [r3]
 7662 0044 FA68     		ldr	r2, [r7, #12]
 7663 0046 1432     		adds	r2, r2, #20
 7664 0048 53F82210 		ldr	r1, [r3, r2, lsl #2]
 7665              		.loc 1 4794 67
 7666 004c BA68     		ldr	r2, [r7, #8]
 7667 004e D243     		mvns	r2, r2
 7668              		.loc 1 4794 64
 7669 0050 1140     		ands	r1, r1, r2
 7670 0052 FA68     		ldr	r2, [r7, #12]
 7671 0054 1432     		adds	r2, r2, #20
 7672 0056 43F82210 		str	r1, [r3, r2, lsl #2]
4795:./Drivers/FreeRTOS/tasks.c **** 
4796:./Drivers/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4797:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 7673              		.loc 1 4797 29
 7674 005a 274B     		ldr	r3, .L428
 7675 005c 1A68     		ldr	r2, [r3]
 7676              		.loc 1 4797 62
 7677 005e FB68     		ldr	r3, [r7, #12]
 7678 0060 1344     		add	r3, r3, r2
 7679 0062 5433     		adds	r3, r3, #84
 7680 0064 0122     		movs	r2, #1
 7681 0066 1A70     		strb	r2, [r3]
4798:./Drivers/FreeRTOS/tasks.c **** 
4799:./Drivers/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 7682              		.loc 1 4799 19
 7683 0068 3B6A     		ldr	r3, [r7, #32]
 7684 006a 002B     		cmp	r3, #0
 7685 006c 0BD0     		beq	.L423
4800:./Drivers/FreeRTOS/tasks.c ****                 {
4801:./Drivers/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7686              		.loc 1 4801 21
 7687 006e 0121     		movs	r1, #1
 7688 0070 386A     		ldr	r0, [r7, #32]
 7689 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4802:./Drivers/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4803:./Drivers/FreeRTOS/tasks.c **** 
4804:./Drivers/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4805:./Drivers/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4806:./Drivers/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4807:./Drivers/FreeRTOS/tasks.c ****                      * application code should ever do. */
4808:./Drivers/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
 7690              		.loc 1 4808 21
 7691 0076 214B     		ldr	r3, .L428+4
 7692 0078 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 224


 7693 007c 1A60     		str	r2, [r3]
 7694              		.syntax unified
 7695              	@ 4808 "./Drivers/FreeRTOS/tasks.c" 1
 7696 007e BFF34F8F 		dsb
 7697              	@ 0 "" 2
 7698              	@ 4808 "./Drivers/FreeRTOS/tasks.c" 1
 7699 0082 BFF36F8F 		isb
 7700              	@ 0 "" 2
 7701              		.thumb
 7702              		.syntax unified
 7703              	.L423:
4809:./Drivers/FreeRTOS/tasks.c ****                 }
4810:./Drivers/FreeRTOS/tasks.c ****                 else
4811:./Drivers/FreeRTOS/tasks.c ****                 {
4812:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4813:./Drivers/FreeRTOS/tasks.c ****                 }
4814:./Drivers/FreeRTOS/tasks.c ****             }
4815:./Drivers/FreeRTOS/tasks.c ****             else
4816:./Drivers/FreeRTOS/tasks.c ****             {
4817:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4818:./Drivers/FreeRTOS/tasks.c ****             }
4819:./Drivers/FreeRTOS/tasks.c ****         }
4820:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7704              		.loc 1 4820 9
 7705 0086 FFF7FEFF 		bl	vPortExitCritical
4821:./Drivers/FreeRTOS/tasks.c **** 
4822:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7706              		.loc 1 4822 9
 7707 008a FFF7FEFF 		bl	vPortEnterCritical
4823:./Drivers/FreeRTOS/tasks.c ****         {
4824:./Drivers/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4825:./Drivers/FreeRTOS/tasks.c **** 
4826:./Drivers/FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
 7708              		.loc 1 4826 15
 7709 008e 3B68     		ldr	r3, [r7]
 7710 0090 002B     		cmp	r3, #0
 7711 0092 07D0     		beq	.L424
4827:./Drivers/FreeRTOS/tasks.c ****             {
4828:./Drivers/FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4829:./Drivers/FreeRTOS/tasks.c ****                  * have changed. */
4830:./Drivers/FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 7712              		.loc 1 4830 53
 7713 0094 184B     		ldr	r3, .L428
 7714 0096 1B68     		ldr	r3, [r3]
 7715              		.loc 1 4830 70
 7716 0098 FA68     		ldr	r2, [r7, #12]
 7717 009a 1432     		adds	r2, r2, #20
 7718 009c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7719              		.loc 1 4830 39
 7720 00a0 3B68     		ldr	r3, [r7]
 7721 00a2 1A60     		str	r2, [r3]
 7722              	.L424:
4831:./Drivers/FreeRTOS/tasks.c ****             }
4832:./Drivers/FreeRTOS/tasks.c **** 
4833:./Drivers/FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4834:./Drivers/FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4835:./Drivers/FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 225


4836:./Drivers/FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4837:./Drivers/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 7723              		.loc 1 4837 29
 7724 00a4 144B     		ldr	r3, .L428
 7725 00a6 1A68     		ldr	r2, [r3]
 7726              		.loc 1 4837 44
 7727 00a8 FB68     		ldr	r3, [r7, #12]
 7728 00aa 1344     		add	r3, r3, r2
 7729 00ac 5433     		adds	r3, r3, #84
 7730 00ae 1B78     		ldrb	r3, [r3]
 7731 00b0 DBB2     		uxtb	r3, r3
 7732              		.loc 1 4837 15
 7733 00b2 022B     		cmp	r3, #2
 7734 00b4 02D0     		beq	.L425
4838:./Drivers/FreeRTOS/tasks.c ****             {
4839:./Drivers/FreeRTOS/tasks.c ****                 /* A notification was not received. */
4840:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
 7735              		.loc 1 4840 25
 7736 00b6 0023     		movs	r3, #0
 7737 00b8 7B61     		str	r3, [r7, #20]
 7738 00ba 0EE0     		b	.L426
 7739              	.L425:
4841:./Drivers/FreeRTOS/tasks.c ****             }
4842:./Drivers/FreeRTOS/tasks.c ****             else
4843:./Drivers/FreeRTOS/tasks.c ****             {
4844:./Drivers/FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4845:./Drivers/FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4846:./Drivers/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 7740              		.loc 1 4846 64
 7741 00bc 0E4B     		ldr	r3, .L428
 7742 00be 1B68     		ldr	r3, [r3]
 7743 00c0 FA68     		ldr	r2, [r7, #12]
 7744 00c2 1432     		adds	r2, r2, #20
 7745 00c4 53F82210 		ldr	r1, [r3, r2, lsl #2]
 7746              		.loc 1 4846 67
 7747 00c8 7A68     		ldr	r2, [r7, #4]
 7748 00ca D243     		mvns	r2, r2
 7749              		.loc 1 4846 64
 7750 00cc 1140     		ands	r1, r1, r2
 7751 00ce FA68     		ldr	r2, [r7, #12]
 7752 00d0 1432     		adds	r2, r2, #20
 7753 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
4847:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 7754              		.loc 1 4847 25
 7755 00d6 0123     		movs	r3, #1
 7756 00d8 7B61     		str	r3, [r7, #20]
 7757              	.L426:
4848:./Drivers/FreeRTOS/tasks.c ****             }
4849:./Drivers/FreeRTOS/tasks.c **** 
4850:./Drivers/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 7758              		.loc 1 4850 25
 7759 00da 074B     		ldr	r3, .L428
 7760 00dc 1A68     		ldr	r2, [r3]
 7761              		.loc 1 4850 58
 7762 00de FB68     		ldr	r3, [r7, #12]
 7763 00e0 1344     		add	r3, r3, r2
 7764 00e2 5433     		adds	r3, r3, #84
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 226


 7765 00e4 0022     		movs	r2, #0
 7766 00e6 1A70     		strb	r2, [r3]
4851:./Drivers/FreeRTOS/tasks.c ****         }
4852:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 7767              		.loc 1 4852 9
 7768 00e8 FFF7FEFF 		bl	vPortExitCritical
4853:./Drivers/FreeRTOS/tasks.c **** 
4854:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 7769              		.loc 1 4854 16
 7770 00ec 7B69     		ldr	r3, [r7, #20]
4855:./Drivers/FreeRTOS/tasks.c ****     }
 7771              		.loc 1 4855 5
 7772 00ee 1846     		mov	r0, r3
 7773 00f0 1837     		adds	r7, r7, #24
 7774              	.LCFI274:
 7775              		.cfi_def_cfa_offset 8
 7776 00f2 BD46     		mov	sp, r7
 7777              	.LCFI275:
 7778              		.cfi_def_cfa_register 13
 7779              		@ sp needed
 7780 00f4 80BD     		pop	{r7, pc}
 7781              	.L429:
 7782 00f6 00BF     		.align	2
 7783              	.L428:
 7784 00f8 00000000 		.word	pxCurrentTCB
 7785 00fc 04ED00E0 		.word	-536810236
 7786              		.cfi_endproc
 7787              	.LFE58:
 7789              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7790              		.align	1
 7791              		.global	xTaskGenericNotify
 7792              		.syntax unified
 7793              		.thumb
 7794              		.thumb_func
 7795              		.fpu fpv4-sp-d16
 7797              	xTaskGenericNotify:
 7798              	.LFB59:
4856:./Drivers/FreeRTOS/tasks.c **** 
4857:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4858:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4859:./Drivers/FreeRTOS/tasks.c **** 
4860:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4861:./Drivers/FreeRTOS/tasks.c **** 
4862:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4863:./Drivers/FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4864:./Drivers/FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4865:./Drivers/FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4866:./Drivers/FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4867:./Drivers/FreeRTOS/tasks.c ****     {
 7799              		.loc 1 4867 5
 7800              		.cfi_startproc
 7801              		@ args = 4, pretend = 0, frame = 56
 7802              		@ frame_needed = 1, uses_anonymous_args = 0
 7803 0000 80B5     		push	{r7, lr}
 7804              	.LCFI276:
 7805              		.cfi_def_cfa_offset 8
 7806              		.cfi_offset 7, -8
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 227


 7807              		.cfi_offset 14, -4
 7808 0002 8EB0     		sub	sp, sp, #56
 7809              	.LCFI277:
 7810              		.cfi_def_cfa_offset 64
 7811 0004 00AF     		add	r7, sp, #0
 7812              	.LCFI278:
 7813              		.cfi_def_cfa_register 7
 7814 0006 F860     		str	r0, [r7, #12]
 7815 0008 B960     		str	r1, [r7, #8]
 7816 000a 7A60     		str	r2, [r7, #4]
 7817 000c FB70     		strb	r3, [r7, #3]
4868:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4869:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 7818              		.loc 1 4869 20
 7819 000e 0123     		movs	r3, #1
 7820 0010 7B63     		str	r3, [r7, #52]
4870:./Drivers/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4871:./Drivers/FreeRTOS/tasks.c **** 
4872:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7821              		.loc 1 4872 9
 7822 0012 BB68     		ldr	r3, [r7, #8]
 7823 0014 002B     		cmp	r3, #0
 7824 0016 0AD0     		beq	.L431
 7825              	.LBB275:
 7826              	.LBB276:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7827              		.loc 2 198 9
 7828              		.syntax unified
 7829              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7830 0018 4FF05003 			mov r3, #80												
 7831 001c 83F31188 		msr basepri, r3											
 7832 0020 BFF36F8F 		isb														
 7833 0024 BFF34F8F 		dsb														
 7834              	
 7835              	@ 0 "" 2
 7836              		.thumb
 7837              		.syntax unified
 7838 0028 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7839              		.loc 2 206 5
 7840 002a 00BF     		nop
 7841              	.L432:
 7842              	.LBE276:
 7843              	.LBE275:
 7844              		.loc 1 4872 9 discriminator 1
 7845 002c FEE7     		b	.L432
 7846              	.L431:
4873:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7847              		.loc 1 4873 9
 7848 002e FB68     		ldr	r3, [r7, #12]
 7849 0030 002B     		cmp	r3, #0
 7850 0032 0AD1     		bne	.L433
 7851              	.LBB277:
 7852              	.LBB278:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7853              		.loc 2 198 9
 7854              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 228


 7855              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7856 0034 4FF05003 			mov r3, #80												
 7857 0038 83F31188 		msr basepri, r3											
 7858 003c BFF36F8F 		isb														
 7859 0040 BFF34F8F 		dsb														
 7860              	
 7861              	@ 0 "" 2
 7862              		.thumb
 7863              		.syntax unified
 7864 0044 FB61     		str	r3, [r7, #28]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7865              		.loc 2 206 5
 7866 0046 00BF     		nop
 7867              	.L434:
 7868              	.LBE278:
 7869              	.LBE277:
 7870              		.loc 1 4873 9 discriminator 2
 7871 0048 FEE7     		b	.L434
 7872              	.L433:
4874:./Drivers/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7873              		.loc 1 4874 15
 7874 004a FB68     		ldr	r3, [r7, #12]
 7875 004c 3B63     		str	r3, [r7, #48]
4875:./Drivers/FreeRTOS/tasks.c **** 
4876:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 7876              		.loc 1 4876 9
 7877 004e FFF7FEFF 		bl	vPortEnterCritical
4877:./Drivers/FreeRTOS/tasks.c ****         {
4878:./Drivers/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 7878              		.loc 1 4878 15
 7879 0052 3B6C     		ldr	r3, [r7, #64]
 7880 0054 002B     		cmp	r3, #0
 7881 0056 06D0     		beq	.L435
4879:./Drivers/FreeRTOS/tasks.c ****             {
4880:./Drivers/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 7882              		.loc 1 4880 71
 7883 0058 3B6B     		ldr	r3, [r7, #48]
 7884 005a BA68     		ldr	r2, [r7, #8]
 7885 005c 1432     		adds	r2, r2, #20
 7886 005e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7887              		.loc 1 4880 47
 7888 0062 3B6C     		ldr	r3, [r7, #64]
 7889 0064 1A60     		str	r2, [r3]
 7890              	.L435:
4881:./Drivers/FreeRTOS/tasks.c ****             }
4882:./Drivers/FreeRTOS/tasks.c **** 
4883:./Drivers/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7891              		.loc 1 4883 35
 7892 0066 3A6B     		ldr	r2, [r7, #48]
 7893 0068 BB68     		ldr	r3, [r7, #8]
 7894 006a 1344     		add	r3, r3, r2
 7895 006c 5433     		adds	r3, r3, #84
 7896 006e 1B78     		ldrb	r3, [r3]
 7897 0070 87F82F30 		strb	r3, [r7, #47]
4884:./Drivers/FreeRTOS/tasks.c **** 
4885:./Drivers/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7898              		.loc 1 4885 53
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 229


 7899 0074 3A6B     		ldr	r2, [r7, #48]
 7900 0076 BB68     		ldr	r3, [r7, #8]
 7901 0078 1344     		add	r3, r3, r2
 7902 007a 5433     		adds	r3, r3, #84
 7903 007c 0222     		movs	r2, #2
 7904 007e 1A70     		strb	r2, [r3]
4886:./Drivers/FreeRTOS/tasks.c **** 
4887:./Drivers/FreeRTOS/tasks.c ****             switch( eAction )
 7905              		.loc 1 4887 13
 7906 0080 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 7907 0082 042B     		cmp	r3, #4
 7908 0084 3BD8     		bhi	.L436
 7909 0086 01A2     		adr	r2, .L438
 7910 0088 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7911              		.p2align 2
 7912              	.L438:
 7913 008c 1D010000 		.word	.L453+1
 7914 0090 A1000000 		.word	.L441+1
 7915 0094 BD000000 		.word	.L440+1
 7916 0098 D5000000 		.word	.L439+1
 7917 009c E3000000 		.word	.L437+1
 7918              		.p2align 1
 7919              	.L441:
4888:./Drivers/FreeRTOS/tasks.c ****             {
4889:./Drivers/FreeRTOS/tasks.c ****                 case eSetBits:
4890:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 7920              		.loc 1 4890 63
 7921 00a0 3B6B     		ldr	r3, [r7, #48]
 7922 00a2 BA68     		ldr	r2, [r7, #8]
 7923 00a4 1432     		adds	r2, r2, #20
 7924 00a6 53F82220 		ldr	r2, [r3, r2, lsl #2]
 7925 00aa 7B68     		ldr	r3, [r7, #4]
 7926 00ac 42EA0301 		orr	r1, r2, r3
 7927 00b0 3B6B     		ldr	r3, [r7, #48]
 7928 00b2 BA68     		ldr	r2, [r7, #8]
 7929 00b4 1432     		adds	r2, r2, #20
 7930 00b6 43F82210 		str	r1, [r3, r2, lsl #2]
4891:./Drivers/FreeRTOS/tasks.c ****                     break;
 7931              		.loc 1 4891 21
 7932 00ba 32E0     		b	.L443
 7933              	.L440:
4892:./Drivers/FreeRTOS/tasks.c **** 
4893:./Drivers/FreeRTOS/tasks.c ****                 case eIncrement:
4894:./Drivers/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7934              		.loc 1 4894 45
 7935 00bc 3B6B     		ldr	r3, [r7, #48]
 7936 00be BA68     		ldr	r2, [r7, #8]
 7937 00c0 1432     		adds	r2, r2, #20
 7938 00c2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 7939              		.loc 1 4894 66
 7940 00c6 591C     		adds	r1, r3, #1
 7941 00c8 3B6B     		ldr	r3, [r7, #48]
 7942 00ca BA68     		ldr	r2, [r7, #8]
 7943 00cc 1432     		adds	r2, r2, #20
 7944 00ce 43F82210 		str	r1, [r3, r2, lsl #2]
4895:./Drivers/FreeRTOS/tasks.c ****                     break;
 7945              		.loc 1 4895 21
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 230


 7946 00d2 26E0     		b	.L443
 7947              	.L439:
4896:./Drivers/FreeRTOS/tasks.c **** 
4897:./Drivers/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4898:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7948              		.loc 1 4898 63
 7949 00d4 3B6B     		ldr	r3, [r7, #48]
 7950 00d6 BA68     		ldr	r2, [r7, #8]
 7951 00d8 1432     		adds	r2, r2, #20
 7952 00da 7968     		ldr	r1, [r7, #4]
 7953 00dc 43F82210 		str	r1, [r3, r2, lsl #2]
4899:./Drivers/FreeRTOS/tasks.c ****                     break;
 7954              		.loc 1 4899 21
 7955 00e0 1FE0     		b	.L443
 7956              	.L437:
4900:./Drivers/FreeRTOS/tasks.c **** 
4901:./Drivers/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4902:./Drivers/FreeRTOS/tasks.c **** 
4903:./Drivers/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7957              		.loc 1 4903 23
 7958 00e2 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 7959 00e6 022B     		cmp	r3, #2
 7960 00e8 06D0     		beq	.L444
4904:./Drivers/FreeRTOS/tasks.c ****                     {
4905:./Drivers/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7961              		.loc 1 4905 67
 7962 00ea 3B6B     		ldr	r3, [r7, #48]
 7963 00ec BA68     		ldr	r2, [r7, #8]
 7964 00ee 1432     		adds	r2, r2, #20
 7965 00f0 7968     		ldr	r1, [r7, #4]
 7966 00f2 43F82210 		str	r1, [r3, r2, lsl #2]
4906:./Drivers/FreeRTOS/tasks.c ****                     }
4907:./Drivers/FreeRTOS/tasks.c ****                     else
4908:./Drivers/FreeRTOS/tasks.c ****                     {
4909:./Drivers/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4910:./Drivers/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4911:./Drivers/FreeRTOS/tasks.c ****                     }
4912:./Drivers/FreeRTOS/tasks.c **** 
4913:./Drivers/FreeRTOS/tasks.c ****                     break;
 7967              		.loc 1 4913 21
 7968 00f6 14E0     		b	.L443
 7969              	.L444:
4910:./Drivers/FreeRTOS/tasks.c ****                     }
 7970              		.loc 1 4910 33
 7971 00f8 0023     		movs	r3, #0
 7972 00fa 7B63     		str	r3, [r7, #52]
 7973              		.loc 1 4913 21
 7974 00fc 11E0     		b	.L443
 7975              	.L436:
4914:./Drivers/FreeRTOS/tasks.c **** 
4915:./Drivers/FreeRTOS/tasks.c ****                 case eNoAction:
4916:./Drivers/FreeRTOS/tasks.c **** 
4917:./Drivers/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4918:./Drivers/FreeRTOS/tasks.c ****                      * updated. */
4919:./Drivers/FreeRTOS/tasks.c ****                     break;
4920:./Drivers/FreeRTOS/tasks.c **** 
4921:./Drivers/FreeRTOS/tasks.c ****                 default:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 231


4922:./Drivers/FreeRTOS/tasks.c **** 
4923:./Drivers/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4924:./Drivers/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4925:./Drivers/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4926:./Drivers/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 7976              		.loc 1 4926 21
 7977 00fe 4C4B     		ldr	r3, .L455
 7978 0100 1B68     		ldr	r3, [r3]
 7979 0102 002B     		cmp	r3, #0
 7980 0104 0CD0     		beq	.L454
 7981              	.LBB279:
 7982              	.LBB280:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 7983              		.loc 2 198 9
 7984              		.syntax unified
 7985              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 7986 0106 4FF05003 			mov r3, #80												
 7987 010a 83F31188 		msr basepri, r3											
 7988 010e BFF36F8F 		isb														
 7989 0112 BFF34F8F 		dsb														
 7990              	
 7991              	@ 0 "" 2
 7992              		.thumb
 7993              		.syntax unified
 7994 0116 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 7995              		.loc 2 206 5
 7996 0118 00BF     		nop
 7997              	.L447:
 7998              	.LBE280:
 7999              	.LBE279:
 8000              		.loc 1 4926 21 discriminator 3
 8001 011a FEE7     		b	.L447
 8002              	.L453:
4919:./Drivers/FreeRTOS/tasks.c **** 
 8003              		.loc 1 4919 21
 8004 011c 00BF     		nop
 8005 011e 00E0     		b	.L443
 8006              	.L454:
4927:./Drivers/FreeRTOS/tasks.c **** 
4928:./Drivers/FreeRTOS/tasks.c ****                     break;
 8007              		.loc 1 4928 21
 8008 0120 00BF     		nop
 8009              	.L443:
4929:./Drivers/FreeRTOS/tasks.c ****             }
4930:./Drivers/FreeRTOS/tasks.c **** 
4931:./Drivers/FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4932:./Drivers/FreeRTOS/tasks.c **** 
4933:./Drivers/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4934:./Drivers/FreeRTOS/tasks.c ****              * notification then unblock it now. */
4935:./Drivers/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010              		.loc 1 4935 15
 8011 0122 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 8012 0126 012B     		cmp	r3, #1
 8013 0128 7BD1     		bne	.L448
 8014              	.LBB281:
4936:./Drivers/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 232


4937:./Drivers/FreeRTOS/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8015              		.loc 1 4937 17
 8016 012a 3B6B     		ldr	r3, [r7, #48]
 8017 012c 5B69     		ldr	r3, [r3, #20]
 8018 012e BB62     		str	r3, [r7, #40]
 8019 0130 3B6B     		ldr	r3, [r7, #48]
 8020 0132 9B68     		ldr	r3, [r3, #8]
 8021 0134 3A6B     		ldr	r2, [r7, #48]
 8022 0136 D268     		ldr	r2, [r2, #12]
 8023 0138 9A60     		str	r2, [r3, #8]
 8024 013a 3B6B     		ldr	r3, [r7, #48]
 8025 013c DB68     		ldr	r3, [r3, #12]
 8026 013e 3A6B     		ldr	r2, [r7, #48]
 8027 0140 9268     		ldr	r2, [r2, #8]
 8028 0142 5A60     		str	r2, [r3, #4]
 8029 0144 BB6A     		ldr	r3, [r7, #40]
 8030 0146 5A68     		ldr	r2, [r3, #4]
 8031 0148 3B6B     		ldr	r3, [r7, #48]
 8032 014a 0433     		adds	r3, r3, #4
 8033 014c 9A42     		cmp	r2, r3
 8034 014e 03D1     		bne	.L449
 8035              		.loc 1 4937 17 is_stmt 0 discriminator 1
 8036 0150 3B6B     		ldr	r3, [r7, #48]
 8037 0152 DA68     		ldr	r2, [r3, #12]
 8038 0154 BB6A     		ldr	r3, [r7, #40]
 8039 0156 5A60     		str	r2, [r3, #4]
 8040              	.L449:
 8041              		.loc 1 4937 17 discriminator 3
 8042 0158 3B6B     		ldr	r3, [r7, #48]
 8043 015a 0022     		movs	r2, #0
 8044 015c 5A61     		str	r2, [r3, #20]
 8045 015e BB6A     		ldr	r3, [r7, #40]
 8046 0160 1B68     		ldr	r3, [r3]
 8047 0162 5A1E     		subs	r2, r3, #1
 8048 0164 BB6A     		ldr	r3, [r7, #40]
 8049 0166 1A60     		str	r2, [r3]
 8050              	.LBE281:
4938:./Drivers/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 8051              		.loc 1 4938 17 is_stmt 1 discriminator 3
 8052 0168 3B6B     		ldr	r3, [r7, #48]
 8053 016a DB6A     		ldr	r3, [r3, #44]
 8054 016c 0122     		movs	r2, #1
 8055 016e 9A40     		lsls	r2, r2, r3
 8056 0170 304B     		ldr	r3, .L455+4
 8057 0172 1B68     		ldr	r3, [r3]
 8058 0174 1343     		orrs	r3, r3, r2
 8059 0176 2F4A     		ldr	r2, .L455+4
 8060 0178 1360     		str	r3, [r2]
 8061              	.LBB282:
 8062 017a 3B6B     		ldr	r3, [r7, #48]
 8063 017c DA6A     		ldr	r2, [r3, #44]
 8064 017e 2E49     		ldr	r1, .L455+8
 8065 0180 1346     		mov	r3, r2
 8066 0182 9B00     		lsls	r3, r3, #2
 8067 0184 1344     		add	r3, r3, r2
 8068 0186 9B00     		lsls	r3, r3, #2
 8069 0188 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 233


 8070 018a 0433     		adds	r3, r3, #4
 8071 018c 1B68     		ldr	r3, [r3]
 8072 018e 7B62     		str	r3, [r7, #36]
 8073 0190 3B6B     		ldr	r3, [r7, #48]
 8074 0192 7A6A     		ldr	r2, [r7, #36]
 8075 0194 9A60     		str	r2, [r3, #8]
 8076 0196 7B6A     		ldr	r3, [r7, #36]
 8077 0198 9A68     		ldr	r2, [r3, #8]
 8078 019a 3B6B     		ldr	r3, [r7, #48]
 8079 019c DA60     		str	r2, [r3, #12]
 8080 019e 7B6A     		ldr	r3, [r7, #36]
 8081 01a0 9B68     		ldr	r3, [r3, #8]
 8082 01a2 3A6B     		ldr	r2, [r7, #48]
 8083 01a4 0432     		adds	r2, r2, #4
 8084 01a6 5A60     		str	r2, [r3, #4]
 8085 01a8 3B6B     		ldr	r3, [r7, #48]
 8086 01aa 1A1D     		adds	r2, r3, #4
 8087 01ac 7B6A     		ldr	r3, [r7, #36]
 8088 01ae 9A60     		str	r2, [r3, #8]
 8089 01b0 3B6B     		ldr	r3, [r7, #48]
 8090 01b2 DA6A     		ldr	r2, [r3, #44]
 8091 01b4 1346     		mov	r3, r2
 8092 01b6 9B00     		lsls	r3, r3, #2
 8093 01b8 1344     		add	r3, r3, r2
 8094 01ba 9B00     		lsls	r3, r3, #2
 8095 01bc 1E4A     		ldr	r2, .L455+8
 8096 01be 1A44     		add	r2, r2, r3
 8097 01c0 3B6B     		ldr	r3, [r7, #48]
 8098 01c2 5A61     		str	r2, [r3, #20]
 8099 01c4 3B6B     		ldr	r3, [r7, #48]
 8100 01c6 DA6A     		ldr	r2, [r3, #44]
 8101 01c8 1B49     		ldr	r1, .L455+8
 8102 01ca 1346     		mov	r3, r2
 8103 01cc 9B00     		lsls	r3, r3, #2
 8104 01ce 1344     		add	r3, r3, r2
 8105 01d0 9B00     		lsls	r3, r3, #2
 8106 01d2 0B44     		add	r3, r3, r1
 8107 01d4 1B68     		ldr	r3, [r3]
 8108 01d6 591C     		adds	r1, r3, #1
 8109 01d8 1748     		ldr	r0, .L455+8
 8110 01da 1346     		mov	r3, r2
 8111 01dc 9B00     		lsls	r3, r3, #2
 8112 01de 1344     		add	r3, r3, r2
 8113 01e0 9B00     		lsls	r3, r3, #2
 8114 01e2 0344     		add	r3, r3, r0
 8115 01e4 1960     		str	r1, [r3]
 8116              	.LBE282:
4939:./Drivers/FreeRTOS/tasks.c **** 
4940:./Drivers/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4941:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8117              		.loc 1 4941 17 discriminator 3
 8118 01e6 3B6B     		ldr	r3, [r7, #48]
 8119 01e8 9B6A     		ldr	r3, [r3, #40]
 8120 01ea 002B     		cmp	r3, #0
 8121 01ec 0AD0     		beq	.L450
 8122              	.LBB283:
 8123              	.LBB284:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 234


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8124              		.loc 2 198 9
 8125              		.syntax unified
 8126              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8127 01ee 4FF05003 			mov r3, #80												
 8128 01f2 83F31188 		msr basepri, r3											
 8129 01f6 BFF36F8F 		isb														
 8130 01fa BFF34F8F 		dsb														
 8131              	
 8132              	@ 0 "" 2
 8133              		.thumb
 8134              		.syntax unified
 8135 01fe 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8136              		.loc 2 206 5
 8137 0200 00BF     		nop
 8138              	.L451:
 8139              	.LBE284:
 8140              	.LBE283:
 8141              		.loc 1 4941 17 discriminator 4
 8142 0202 FEE7     		b	.L451
 8143              	.L450:
4942:./Drivers/FreeRTOS/tasks.c **** 
4943:./Drivers/FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4944:./Drivers/FreeRTOS/tasks.c ****                     {
4945:./Drivers/FreeRTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4946:./Drivers/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4947:./Drivers/FreeRTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4948:./Drivers/FreeRTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4949:./Drivers/FreeRTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4950:./Drivers/FreeRTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4951:./Drivers/FreeRTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4952:./Drivers/FreeRTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4953:./Drivers/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4954:./Drivers/FreeRTOS/tasks.c ****                          * earliest possible time. */
4955:./Drivers/FreeRTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4956:./Drivers/FreeRTOS/tasks.c ****                     }
4957:./Drivers/FreeRTOS/tasks.c ****                 #endif
4958:./Drivers/FreeRTOS/tasks.c **** 
4959:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8144              		.loc 1 4959 26
 8145 0204 3B6B     		ldr	r3, [r7, #48]
 8146 0206 DA6A     		ldr	r2, [r3, #44]
 8147              		.loc 1 4959 53
 8148 0208 0C4B     		ldr	r3, .L455+12
 8149 020a 1B68     		ldr	r3, [r3]
 8150 020c DB6A     		ldr	r3, [r3, #44]
 8151              		.loc 1 4959 19
 8152 020e 9A42     		cmp	r2, r3
 8153 0210 07D9     		bls	.L448
4960:./Drivers/FreeRTOS/tasks.c ****                 {
4961:./Drivers/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4962:./Drivers/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4963:./Drivers/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 8154              		.loc 1 4963 21
 8155 0212 0B4B     		ldr	r3, .L455+16
 8156 0214 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 235


 8157 0218 1A60     		str	r2, [r3]
 8158              		.syntax unified
 8159              	@ 4963 "./Drivers/FreeRTOS/tasks.c" 1
 8160 021a BFF34F8F 		dsb
 8161              	@ 0 "" 2
 8162              	@ 4963 "./Drivers/FreeRTOS/tasks.c" 1
 8163 021e BFF36F8F 		isb
 8164              	@ 0 "" 2
 8165              		.thumb
 8166              		.syntax unified
 8167              	.L448:
4964:./Drivers/FreeRTOS/tasks.c ****                 }
4965:./Drivers/FreeRTOS/tasks.c ****                 else
4966:./Drivers/FreeRTOS/tasks.c ****                 {
4967:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4968:./Drivers/FreeRTOS/tasks.c ****                 }
4969:./Drivers/FreeRTOS/tasks.c ****             }
4970:./Drivers/FreeRTOS/tasks.c ****             else
4971:./Drivers/FreeRTOS/tasks.c ****             {
4972:./Drivers/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4973:./Drivers/FreeRTOS/tasks.c ****             }
4974:./Drivers/FreeRTOS/tasks.c ****         }
4975:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 8168              		.loc 1 4975 9
 8169 0222 FFF7FEFF 		bl	vPortExitCritical
4976:./Drivers/FreeRTOS/tasks.c **** 
4977:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 8170              		.loc 1 4977 16
 8171 0226 7B6B     		ldr	r3, [r7, #52]
4978:./Drivers/FreeRTOS/tasks.c ****     }
 8172              		.loc 1 4978 5
 8173 0228 1846     		mov	r0, r3
 8174 022a 3837     		adds	r7, r7, #56
 8175              	.LCFI279:
 8176              		.cfi_def_cfa_offset 8
 8177 022c BD46     		mov	sp, r7
 8178              	.LCFI280:
 8179              		.cfi_def_cfa_register 13
 8180              		@ sp needed
 8181 022e 80BD     		pop	{r7, pc}
 8182              	.L456:
 8183              		.align	2
 8184              	.L455:
 8185 0230 00000000 		.word	xTickCount
 8186 0234 00000000 		.word	uxTopReadyPriority
 8187 0238 00000000 		.word	pxReadyTasksLists
 8188 023c 00000000 		.word	pxCurrentTCB
 8189 0240 04ED00E0 		.word	-536810236
 8190              		.cfi_endproc
 8191              	.LFE59:
 8193              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 8194              		.align	1
 8195              		.global	xTaskGenericNotifyFromISR
 8196              		.syntax unified
 8197              		.thumb
 8198              		.thumb_func
 8199              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 236


 8201              	xTaskGenericNotifyFromISR:
 8202              	.LFB60:
4979:./Drivers/FreeRTOS/tasks.c **** 
4980:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4981:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4982:./Drivers/FreeRTOS/tasks.c **** 
4983:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4984:./Drivers/FreeRTOS/tasks.c **** 
4985:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4986:./Drivers/FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4987:./Drivers/FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4988:./Drivers/FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4989:./Drivers/FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4990:./Drivers/FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4991:./Drivers/FreeRTOS/tasks.c ****     {
 8203              		.loc 1 4991 5
 8204              		.cfi_startproc
 8205              		@ args = 8, pretend = 0, frame = 72
 8206              		@ frame_needed = 1, uses_anonymous_args = 0
 8207 0000 80B5     		push	{r7, lr}
 8208              	.LCFI281:
 8209              		.cfi_def_cfa_offset 8
 8210              		.cfi_offset 7, -8
 8211              		.cfi_offset 14, -4
 8212 0002 92B0     		sub	sp, sp, #72
 8213              	.LCFI282:
 8214              		.cfi_def_cfa_offset 80
 8215 0004 00AF     		add	r7, sp, #0
 8216              	.LCFI283:
 8217              		.cfi_def_cfa_register 7
 8218 0006 F860     		str	r0, [r7, #12]
 8219 0008 B960     		str	r1, [r7, #8]
 8220 000a 7A60     		str	r2, [r7, #4]
 8221 000c FB70     		strb	r3, [r7, #3]
4992:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4993:./Drivers/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4994:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 8222              		.loc 1 4994 20
 8223 000e 0123     		movs	r3, #1
 8224 0010 7B64     		str	r3, [r7, #68]
4995:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4996:./Drivers/FreeRTOS/tasks.c **** 
4997:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8225              		.loc 1 4997 9
 8226 0012 FB68     		ldr	r3, [r7, #12]
 8227 0014 002B     		cmp	r3, #0
 8228 0016 0AD1     		bne	.L458
 8229              	.LBB285:
 8230              	.LBB286:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8231              		.loc 2 198 9
 8232              		.syntax unified
 8233              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8234 0018 4FF05003 			mov r3, #80												
 8235 001c 83F31188 		msr basepri, r3											
 8236 0020 BFF36F8F 		isb														
 8237 0024 BFF34F8F 		dsb														
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 237


 8238              	
 8239              	@ 0 "" 2
 8240              		.thumb
 8241              		.syntax unified
 8242 0028 BB62     		str	r3, [r7, #40]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8243              		.loc 2 206 5
 8244 002a 00BF     		nop
 8245              	.L459:
 8246              	.LBE286:
 8247              	.LBE285:
 8248              		.loc 1 4997 9 discriminator 1
 8249 002c FEE7     		b	.L459
 8250              	.L458:
4998:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8251              		.loc 1 4998 9
 8252 002e BB68     		ldr	r3, [r7, #8]
 8253 0030 002B     		cmp	r3, #0
 8254 0032 0AD0     		beq	.L460
 8255              	.LBB287:
 8256              	.LBB288:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8257              		.loc 2 198 9
 8258              		.syntax unified
 8259              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8260 0034 4FF05003 			mov r3, #80												
 8261 0038 83F31188 		msr basepri, r3											
 8262 003c BFF36F8F 		isb														
 8263 0040 BFF34F8F 		dsb														
 8264              	
 8265              	@ 0 "" 2
 8266              		.thumb
 8267              		.syntax unified
 8268 0044 7B62     		str	r3, [r7, #36]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8269              		.loc 2 206 5
 8270 0046 00BF     		nop
 8271              	.L461:
 8272              	.LBE288:
 8273              	.LBE287:
 8274              		.loc 1 4998 9 discriminator 2
 8275 0048 FEE7     		b	.L461
 8276              	.L460:
4999:./Drivers/FreeRTOS/tasks.c **** 
5000:./Drivers/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5001:./Drivers/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5002:./Drivers/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5003:./Drivers/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5004:./Drivers/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5005:./Drivers/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5006:./Drivers/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5007:./Drivers/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5008:./Drivers/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5009:./Drivers/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5010:./Drivers/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5011:./Drivers/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5012:./Drivers/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 238


5013:./Drivers/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5014:./Drivers/FreeRTOS/tasks.c ****          * provided on the following link:
5015:./Drivers/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5016:./Drivers/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8277              		.loc 1 5016 9
 8278 004a FFF7FEFF 		bl	vPortValidateInterruptPriority
5017:./Drivers/FreeRTOS/tasks.c **** 
5018:./Drivers/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8279              		.loc 1 5018 15
 8280 004e FB68     		ldr	r3, [r7, #12]
 8281 0050 3B64     		str	r3, [r7, #64]
 8282              	.LBB289:
 8283              	.LBB290:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8284              		.loc 2 214 9
 8285              		.syntax unified
 8286              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8287 0052 EFF31182 			mrs r2, basepri											
 8288 0056 4FF05003 		mov r3, #80												
 8289 005a 83F31188 		msr basepri, r3											
 8290 005e BFF36F8F 		isb														
 8291 0062 BFF34F8F 		dsb														
 8292              	
 8293              	@ 0 "" 2
 8294              		.thumb
 8295              		.syntax unified
 8296 0066 3A62     		str	r2, [r7, #32]
 8297 0068 FB61     		str	r3, [r7, #28]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8298              		.loc 2 226 16
 8299 006a 3B6A     		ldr	r3, [r7, #32]
 8300              	.LBE290:
 8301              	.LBE289:
5019:./Drivers/FreeRTOS/tasks.c **** 
5020:./Drivers/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8302              		.loc 1 5020 34
 8303 006c FB63     		str	r3, [r7, #60]
5021:./Drivers/FreeRTOS/tasks.c ****         {
5022:./Drivers/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 8304              		.loc 1 5022 15
 8305 006e 3B6D     		ldr	r3, [r7, #80]
 8306 0070 002B     		cmp	r3, #0
 8307 0072 06D0     		beq	.L463
5023:./Drivers/FreeRTOS/tasks.c ****             {
5024:./Drivers/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8308              		.loc 1 5024 71
 8309 0074 3B6C     		ldr	r3, [r7, #64]
 8310 0076 BA68     		ldr	r2, [r7, #8]
 8311 0078 1432     		adds	r2, r2, #20
 8312 007a 53F82220 		ldr	r2, [r3, r2, lsl #2]
 8313              		.loc 1 5024 47
 8314 007e 3B6D     		ldr	r3, [r7, #80]
 8315 0080 1A60     		str	r2, [r3]
 8316              	.L463:
5025:./Drivers/FreeRTOS/tasks.c ****             }
5026:./Drivers/FreeRTOS/tasks.c **** 
5027:./Drivers/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 239


 8317              		.loc 1 5027 35
 8318 0082 3A6C     		ldr	r2, [r7, #64]
 8319 0084 BB68     		ldr	r3, [r7, #8]
 8320 0086 1344     		add	r3, r3, r2
 8321 0088 5433     		adds	r3, r3, #84
 8322 008a 1B78     		ldrb	r3, [r3]
 8323 008c 87F83B30 		strb	r3, [r7, #59]
5028:./Drivers/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8324              		.loc 1 5028 53
 8325 0090 3A6C     		ldr	r2, [r7, #64]
 8326 0092 BB68     		ldr	r3, [r7, #8]
 8327 0094 1344     		add	r3, r3, r2
 8328 0096 5433     		adds	r3, r3, #84
 8329 0098 0222     		movs	r2, #2
 8330 009a 1A70     		strb	r2, [r3]
5029:./Drivers/FreeRTOS/tasks.c **** 
5030:./Drivers/FreeRTOS/tasks.c ****             switch( eAction )
 8331              		.loc 1 5030 13
 8332 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 8333 009e 042B     		cmp	r3, #4
 8334 00a0 3BD8     		bhi	.L464
 8335 00a2 01A2     		adr	r2, .L466
 8336 00a4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8337              		.p2align 2
 8338              	.L466:
 8339 00a8 39010000 		.word	.L484+1
 8340 00ac BD000000 		.word	.L469+1
 8341 00b0 D9000000 		.word	.L468+1
 8342 00b4 F1000000 		.word	.L467+1
 8343 00b8 FF000000 		.word	.L465+1
 8344              		.p2align 1
 8345              	.L469:
5031:./Drivers/FreeRTOS/tasks.c ****             {
5032:./Drivers/FreeRTOS/tasks.c ****                 case eSetBits:
5033:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8346              		.loc 1 5033 63
 8347 00bc 3B6C     		ldr	r3, [r7, #64]
 8348 00be BA68     		ldr	r2, [r7, #8]
 8349 00c0 1432     		adds	r2, r2, #20
 8350 00c2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 8351 00c6 7B68     		ldr	r3, [r7, #4]
 8352 00c8 42EA0301 		orr	r1, r2, r3
 8353 00cc 3B6C     		ldr	r3, [r7, #64]
 8354 00ce BA68     		ldr	r2, [r7, #8]
 8355 00d0 1432     		adds	r2, r2, #20
 8356 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
5034:./Drivers/FreeRTOS/tasks.c ****                     break;
 8357              		.loc 1 5034 21
 8358 00d6 32E0     		b	.L471
 8359              	.L468:
5035:./Drivers/FreeRTOS/tasks.c **** 
5036:./Drivers/FreeRTOS/tasks.c ****                 case eIncrement:
5037:./Drivers/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8360              		.loc 1 5037 45
 8361 00d8 3B6C     		ldr	r3, [r7, #64]
 8362 00da BA68     		ldr	r2, [r7, #8]
 8363 00dc 1432     		adds	r2, r2, #20
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 240


 8364 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 8365              		.loc 1 5037 66
 8366 00e2 591C     		adds	r1, r3, #1
 8367 00e4 3B6C     		ldr	r3, [r7, #64]
 8368 00e6 BA68     		ldr	r2, [r7, #8]
 8369 00e8 1432     		adds	r2, r2, #20
 8370 00ea 43F82210 		str	r1, [r3, r2, lsl #2]
5038:./Drivers/FreeRTOS/tasks.c ****                     break;
 8371              		.loc 1 5038 21
 8372 00ee 26E0     		b	.L471
 8373              	.L467:
5039:./Drivers/FreeRTOS/tasks.c **** 
5040:./Drivers/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5041:./Drivers/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8374              		.loc 1 5041 63
 8375 00f0 3B6C     		ldr	r3, [r7, #64]
 8376 00f2 BA68     		ldr	r2, [r7, #8]
 8377 00f4 1432     		adds	r2, r2, #20
 8378 00f6 7968     		ldr	r1, [r7, #4]
 8379 00f8 43F82210 		str	r1, [r3, r2, lsl #2]
5042:./Drivers/FreeRTOS/tasks.c ****                     break;
 8380              		.loc 1 5042 21
 8381 00fc 1FE0     		b	.L471
 8382              	.L465:
5043:./Drivers/FreeRTOS/tasks.c **** 
5044:./Drivers/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5045:./Drivers/FreeRTOS/tasks.c **** 
5046:./Drivers/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8383              		.loc 1 5046 23
 8384 00fe 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 8385 0102 022B     		cmp	r3, #2
 8386 0104 06D0     		beq	.L472
5047:./Drivers/FreeRTOS/tasks.c ****                     {
5048:./Drivers/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8387              		.loc 1 5048 67
 8388 0106 3B6C     		ldr	r3, [r7, #64]
 8389 0108 BA68     		ldr	r2, [r7, #8]
 8390 010a 1432     		adds	r2, r2, #20
 8391 010c 7968     		ldr	r1, [r7, #4]
 8392 010e 43F82210 		str	r1, [r3, r2, lsl #2]
5049:./Drivers/FreeRTOS/tasks.c ****                     }
5050:./Drivers/FreeRTOS/tasks.c ****                     else
5051:./Drivers/FreeRTOS/tasks.c ****                     {
5052:./Drivers/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5053:./Drivers/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5054:./Drivers/FreeRTOS/tasks.c ****                     }
5055:./Drivers/FreeRTOS/tasks.c **** 
5056:./Drivers/FreeRTOS/tasks.c ****                     break;
 8393              		.loc 1 5056 21
 8394 0112 14E0     		b	.L471
 8395              	.L472:
5053:./Drivers/FreeRTOS/tasks.c ****                     }
 8396              		.loc 1 5053 33
 8397 0114 0023     		movs	r3, #0
 8398 0116 7B64     		str	r3, [r7, #68]
 8399              		.loc 1 5056 21
 8400 0118 11E0     		b	.L471
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 241


 8401              	.L464:
5057:./Drivers/FreeRTOS/tasks.c **** 
5058:./Drivers/FreeRTOS/tasks.c ****                 case eNoAction:
5059:./Drivers/FreeRTOS/tasks.c **** 
5060:./Drivers/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5061:./Drivers/FreeRTOS/tasks.c ****                      * updated. */
5062:./Drivers/FreeRTOS/tasks.c ****                     break;
5063:./Drivers/FreeRTOS/tasks.c **** 
5064:./Drivers/FreeRTOS/tasks.c ****                 default:
5065:./Drivers/FreeRTOS/tasks.c **** 
5066:./Drivers/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5067:./Drivers/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5068:./Drivers/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5069:./Drivers/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8402              		.loc 1 5069 21
 8403 011a 604B     		ldr	r3, .L486
 8404 011c 1B68     		ldr	r3, [r3]
 8405 011e 002B     		cmp	r3, #0
 8406 0120 0CD0     		beq	.L485
 8407              	.LBB291:
 8408              	.LBB292:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8409              		.loc 2 198 9
 8410              		.syntax unified
 8411              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8412 0122 4FF05003 			mov r3, #80												
 8413 0126 83F31188 		msr basepri, r3											
 8414 012a BFF36F8F 		isb														
 8415 012e BFF34F8F 		dsb														
 8416              	
 8417              	@ 0 "" 2
 8418              		.thumb
 8419              		.syntax unified
 8420 0132 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8421              		.loc 2 206 5
 8422 0134 00BF     		nop
 8423              	.L475:
 8424              	.LBE292:
 8425              	.LBE291:
 8426              		.loc 1 5069 21 discriminator 3
 8427 0136 FEE7     		b	.L475
 8428              	.L484:
5062:./Drivers/FreeRTOS/tasks.c **** 
 8429              		.loc 1 5062 21
 8430 0138 00BF     		nop
 8431 013a 00E0     		b	.L471
 8432              	.L485:
5070:./Drivers/FreeRTOS/tasks.c ****                     break;
 8433              		.loc 1 5070 21
 8434 013c 00BF     		nop
 8435              	.L471:
5071:./Drivers/FreeRTOS/tasks.c ****             }
5072:./Drivers/FreeRTOS/tasks.c **** 
5073:./Drivers/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5074:./Drivers/FreeRTOS/tasks.c **** 
5075:./Drivers/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 242


5076:./Drivers/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5077:./Drivers/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8436              		.loc 1 5077 15
 8437 013e 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 8438 0142 012B     		cmp	r3, #1
 8439 0144 40F09E80 		bne	.L476
5078:./Drivers/FreeRTOS/tasks.c ****             {
5079:./Drivers/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5080:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8440              		.loc 1 5080 17
 8441 0148 3B6C     		ldr	r3, [r7, #64]
 8442 014a 9B6A     		ldr	r3, [r3, #40]
 8443 014c 002B     		cmp	r3, #0
 8444 014e 0AD0     		beq	.L477
 8445              	.LBB293:
 8446              	.LBB294:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8447              		.loc 2 198 9
 8448              		.syntax unified
 8449              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8450 0150 4FF05003 			mov r3, #80												
 8451 0154 83F31188 		msr basepri, r3											
 8452 0158 BFF36F8F 		isb														
 8453 015c BFF34F8F 		dsb														
 8454              	
 8455              	@ 0 "" 2
 8456              		.thumb
 8457              		.syntax unified
 8458 0160 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8459              		.loc 2 206 5
 8460 0162 00BF     		nop
 8461              	.L478:
 8462              	.LBE294:
 8463              	.LBE293:
 8464              		.loc 1 5080 17 discriminator 4
 8465 0164 FEE7     		b	.L478
 8466              	.L477:
5081:./Drivers/FreeRTOS/tasks.c **** 
5082:./Drivers/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8467              		.loc 1 5082 42
 8468 0166 4E4B     		ldr	r3, .L486+4
 8469 0168 1B68     		ldr	r3, [r3]
 8470              		.loc 1 5082 19
 8471 016a 002B     		cmp	r3, #0
 8472 016c 5ED1     		bne	.L479
 8473              	.LBB295:
5083:./Drivers/FreeRTOS/tasks.c ****                 {
5084:./Drivers/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8474              		.loc 1 5084 21
 8475 016e 3B6C     		ldr	r3, [r7, #64]
 8476 0170 5B69     		ldr	r3, [r3, #20]
 8477 0172 3B63     		str	r3, [r7, #48]
 8478 0174 3B6C     		ldr	r3, [r7, #64]
 8479 0176 9B68     		ldr	r3, [r3, #8]
 8480 0178 3A6C     		ldr	r2, [r7, #64]
 8481 017a D268     		ldr	r2, [r2, #12]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 243


 8482 017c 9A60     		str	r2, [r3, #8]
 8483 017e 3B6C     		ldr	r3, [r7, #64]
 8484 0180 DB68     		ldr	r3, [r3, #12]
 8485 0182 3A6C     		ldr	r2, [r7, #64]
 8486 0184 9268     		ldr	r2, [r2, #8]
 8487 0186 5A60     		str	r2, [r3, #4]
 8488 0188 3B6B     		ldr	r3, [r7, #48]
 8489 018a 5A68     		ldr	r2, [r3, #4]
 8490 018c 3B6C     		ldr	r3, [r7, #64]
 8491 018e 0433     		adds	r3, r3, #4
 8492 0190 9A42     		cmp	r2, r3
 8493 0192 03D1     		bne	.L480
 8494              		.loc 1 5084 21 is_stmt 0 discriminator 1
 8495 0194 3B6C     		ldr	r3, [r7, #64]
 8496 0196 DA68     		ldr	r2, [r3, #12]
 8497 0198 3B6B     		ldr	r3, [r7, #48]
 8498 019a 5A60     		str	r2, [r3, #4]
 8499              	.L480:
 8500              		.loc 1 5084 21 discriminator 3
 8501 019c 3B6C     		ldr	r3, [r7, #64]
 8502 019e 0022     		movs	r2, #0
 8503 01a0 5A61     		str	r2, [r3, #20]
 8504 01a2 3B6B     		ldr	r3, [r7, #48]
 8505 01a4 1B68     		ldr	r3, [r3]
 8506 01a6 5A1E     		subs	r2, r3, #1
 8507 01a8 3B6B     		ldr	r3, [r7, #48]
 8508 01aa 1A60     		str	r2, [r3]
 8509              	.LBE295:
5085:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8510              		.loc 1 5085 21 is_stmt 1 discriminator 3
 8511 01ac 3B6C     		ldr	r3, [r7, #64]
 8512 01ae DB6A     		ldr	r3, [r3, #44]
 8513 01b0 0122     		movs	r2, #1
 8514 01b2 9A40     		lsls	r2, r2, r3
 8515 01b4 3B4B     		ldr	r3, .L486+8
 8516 01b6 1B68     		ldr	r3, [r3]
 8517 01b8 1343     		orrs	r3, r3, r2
 8518 01ba 3A4A     		ldr	r2, .L486+8
 8519 01bc 1360     		str	r3, [r2]
 8520              	.LBB296:
 8521 01be 3B6C     		ldr	r3, [r7, #64]
 8522 01c0 DA6A     		ldr	r2, [r3, #44]
 8523 01c2 3949     		ldr	r1, .L486+12
 8524 01c4 1346     		mov	r3, r2
 8525 01c6 9B00     		lsls	r3, r3, #2
 8526 01c8 1344     		add	r3, r3, r2
 8527 01ca 9B00     		lsls	r3, r3, #2
 8528 01cc 0B44     		add	r3, r3, r1
 8529 01ce 0433     		adds	r3, r3, #4
 8530 01d0 1B68     		ldr	r3, [r3]
 8531 01d2 FB62     		str	r3, [r7, #44]
 8532 01d4 3B6C     		ldr	r3, [r7, #64]
 8533 01d6 FA6A     		ldr	r2, [r7, #44]
 8534 01d8 9A60     		str	r2, [r3, #8]
 8535 01da FB6A     		ldr	r3, [r7, #44]
 8536 01dc 9A68     		ldr	r2, [r3, #8]
 8537 01de 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 244


 8538 01e0 DA60     		str	r2, [r3, #12]
 8539 01e2 FB6A     		ldr	r3, [r7, #44]
 8540 01e4 9B68     		ldr	r3, [r3, #8]
 8541 01e6 3A6C     		ldr	r2, [r7, #64]
 8542 01e8 0432     		adds	r2, r2, #4
 8543 01ea 5A60     		str	r2, [r3, #4]
 8544 01ec 3B6C     		ldr	r3, [r7, #64]
 8545 01ee 1A1D     		adds	r2, r3, #4
 8546 01f0 FB6A     		ldr	r3, [r7, #44]
 8547 01f2 9A60     		str	r2, [r3, #8]
 8548 01f4 3B6C     		ldr	r3, [r7, #64]
 8549 01f6 DA6A     		ldr	r2, [r3, #44]
 8550 01f8 1346     		mov	r3, r2
 8551 01fa 9B00     		lsls	r3, r3, #2
 8552 01fc 1344     		add	r3, r3, r2
 8553 01fe 9B00     		lsls	r3, r3, #2
 8554 0200 294A     		ldr	r2, .L486+12
 8555 0202 1A44     		add	r2, r2, r3
 8556 0204 3B6C     		ldr	r3, [r7, #64]
 8557 0206 5A61     		str	r2, [r3, #20]
 8558 0208 3B6C     		ldr	r3, [r7, #64]
 8559 020a DA6A     		ldr	r2, [r3, #44]
 8560 020c 2649     		ldr	r1, .L486+12
 8561 020e 1346     		mov	r3, r2
 8562 0210 9B00     		lsls	r3, r3, #2
 8563 0212 1344     		add	r3, r3, r2
 8564 0214 9B00     		lsls	r3, r3, #2
 8565 0216 0B44     		add	r3, r3, r1
 8566 0218 1B68     		ldr	r3, [r3]
 8567 021a 591C     		adds	r1, r3, #1
 8568 021c 2248     		ldr	r0, .L486+12
 8569 021e 1346     		mov	r3, r2
 8570 0220 9B00     		lsls	r3, r3, #2
 8571 0222 1344     		add	r3, r3, r2
 8572 0224 9B00     		lsls	r3, r3, #2
 8573 0226 0344     		add	r3, r3, r0
 8574 0228 1960     		str	r1, [r3]
 8575              	.LBE296:
 8576 022a 1BE0     		b	.L481
 8577              	.L479:
 8578              	.LBB297:
5086:./Drivers/FreeRTOS/tasks.c ****                 }
5087:./Drivers/FreeRTOS/tasks.c ****                 else
5088:./Drivers/FreeRTOS/tasks.c ****                 {
5089:./Drivers/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5090:./Drivers/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5091:./Drivers/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8579              		.loc 1 5091 21
 8580 022c 1F4B     		ldr	r3, .L486+16
 8581 022e 5B68     		ldr	r3, [r3, #4]
 8582 0230 7B63     		str	r3, [r7, #52]
 8583 0232 3B6C     		ldr	r3, [r7, #64]
 8584 0234 7A6B     		ldr	r2, [r7, #52]
 8585 0236 DA61     		str	r2, [r3, #28]
 8586 0238 7B6B     		ldr	r3, [r7, #52]
 8587 023a 9A68     		ldr	r2, [r3, #8]
 8588 023c 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 245


 8589 023e 1A62     		str	r2, [r3, #32]
 8590 0240 7B6B     		ldr	r3, [r7, #52]
 8591 0242 9B68     		ldr	r3, [r3, #8]
 8592 0244 3A6C     		ldr	r2, [r7, #64]
 8593 0246 1832     		adds	r2, r2, #24
 8594 0248 5A60     		str	r2, [r3, #4]
 8595 024a 3B6C     		ldr	r3, [r7, #64]
 8596 024c 03F11802 		add	r2, r3, #24
 8597 0250 7B6B     		ldr	r3, [r7, #52]
 8598 0252 9A60     		str	r2, [r3, #8]
 8599 0254 3B6C     		ldr	r3, [r7, #64]
 8600 0256 154A     		ldr	r2, .L486+16
 8601 0258 9A62     		str	r2, [r3, #40]
 8602 025a 144B     		ldr	r3, .L486+16
 8603 025c 1B68     		ldr	r3, [r3]
 8604 025e 0133     		adds	r3, r3, #1
 8605 0260 124A     		ldr	r2, .L486+16
 8606 0262 1360     		str	r3, [r2]
 8607              	.L481:
 8608              	.LBE297:
5092:./Drivers/FreeRTOS/tasks.c ****                 }
5093:./Drivers/FreeRTOS/tasks.c **** 
5094:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8609              		.loc 1 5094 26
 8610 0264 3B6C     		ldr	r3, [r7, #64]
 8611 0266 DA6A     		ldr	r2, [r3, #44]
 8612              		.loc 1 5094 53
 8613 0268 114B     		ldr	r3, .L486+20
 8614 026a 1B68     		ldr	r3, [r3]
 8615 026c DB6A     		ldr	r3, [r3, #44]
 8616              		.loc 1 5094 19
 8617 026e 9A42     		cmp	r2, r3
 8618 0270 08D9     		bls	.L476
5095:./Drivers/FreeRTOS/tasks.c ****                 {
5096:./Drivers/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5097:./Drivers/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5098:./Drivers/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8619              		.loc 1 5098 23
 8620 0272 7B6D     		ldr	r3, [r7, #84]
 8621 0274 002B     		cmp	r3, #0
 8622 0276 02D0     		beq	.L482
5099:./Drivers/FreeRTOS/tasks.c ****                     {
5100:./Drivers/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8623              		.loc 1 5100 52
 8624 0278 7B6D     		ldr	r3, [r7, #84]
 8625 027a 0122     		movs	r2, #1
 8626 027c 1A60     		str	r2, [r3]
 8627              	.L482:
5101:./Drivers/FreeRTOS/tasks.c ****                     }
5102:./Drivers/FreeRTOS/tasks.c **** 
5103:./Drivers/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5104:./Drivers/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5105:./Drivers/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5106:./Drivers/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8628              		.loc 1 5106 35
 8629 027e 0D4B     		ldr	r3, .L486+24
 8630 0280 0122     		movs	r2, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 246


 8631 0282 1A60     		str	r2, [r3]
 8632              	.L476:
 8633 0284 FB6B     		ldr	r3, [r7, #60]
 8634 0286 3B61     		str	r3, [r7, #16]
 8635              	.LBB298:
 8636              	.LBB299:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8637              		.loc 2 232 9
 8638 0288 3B69     		ldr	r3, [r7, #16]
 8639              		.syntax unified
 8640              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8641 028a 83F31188 			msr basepri, r3	
 8642              	@ 0 "" 2
 8643              		.loc 2 236 5
 8644              		.thumb
 8645              		.syntax unified
 8646 028e 00BF     		nop
 8647              	.LBE299:
 8648              	.LBE298:
5107:./Drivers/FreeRTOS/tasks.c ****                 }
5108:./Drivers/FreeRTOS/tasks.c ****                 else
5109:./Drivers/FreeRTOS/tasks.c ****                 {
5110:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5111:./Drivers/FreeRTOS/tasks.c ****                 }
5112:./Drivers/FreeRTOS/tasks.c ****             }
5113:./Drivers/FreeRTOS/tasks.c ****         }
5114:./Drivers/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5115:./Drivers/FreeRTOS/tasks.c **** 
5116:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 8649              		.loc 1 5116 16
 8650 0290 7B6C     		ldr	r3, [r7, #68]
5117:./Drivers/FreeRTOS/tasks.c ****     }
 8651              		.loc 1 5117 5
 8652 0292 1846     		mov	r0, r3
 8653 0294 4837     		adds	r7, r7, #72
 8654              	.LCFI284:
 8655              		.cfi_def_cfa_offset 8
 8656 0296 BD46     		mov	sp, r7
 8657              	.LCFI285:
 8658              		.cfi_def_cfa_register 13
 8659              		@ sp needed
 8660 0298 80BD     		pop	{r7, pc}
 8661              	.L487:
 8662 029a 00BF     		.align	2
 8663              	.L486:
 8664 029c 00000000 		.word	xTickCount
 8665 02a0 00000000 		.word	uxSchedulerSuspended
 8666 02a4 00000000 		.word	uxTopReadyPriority
 8667 02a8 00000000 		.word	pxReadyTasksLists
 8668 02ac 00000000 		.word	xPendingReadyList
 8669 02b0 00000000 		.word	pxCurrentTCB
 8670 02b4 00000000 		.word	xYieldPending
 8671              		.cfi_endproc
 8672              	.LFE60:
 8674              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 8675              		.align	1
 8676              		.global	vTaskGenericNotifyGiveFromISR
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 247


 8677              		.syntax unified
 8678              		.thumb
 8679              		.thumb_func
 8680              		.fpu fpv4-sp-d16
 8682              	vTaskGenericNotifyGiveFromISR:
 8683              	.LFB61:
5118:./Drivers/FreeRTOS/tasks.c **** 
5119:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5120:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5121:./Drivers/FreeRTOS/tasks.c **** 
5122:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5123:./Drivers/FreeRTOS/tasks.c **** 
5124:./Drivers/FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5125:./Drivers/FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5126:./Drivers/FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5127:./Drivers/FreeRTOS/tasks.c ****     {
 8684              		.loc 1 5127 5
 8685              		.cfi_startproc
 8686              		@ args = 0, pretend = 0, frame = 64
 8687              		@ frame_needed = 1, uses_anonymous_args = 0
 8688 0000 80B5     		push	{r7, lr}
 8689              	.LCFI286:
 8690              		.cfi_def_cfa_offset 8
 8691              		.cfi_offset 7, -8
 8692              		.cfi_offset 14, -4
 8693 0002 90B0     		sub	sp, sp, #64
 8694              	.LCFI287:
 8695              		.cfi_def_cfa_offset 72
 8696 0004 00AF     		add	r7, sp, #0
 8697              	.LCFI288:
 8698              		.cfi_def_cfa_register 7
 8699 0006 F860     		str	r0, [r7, #12]
 8700 0008 B960     		str	r1, [r7, #8]
 8701 000a 7A60     		str	r2, [r7, #4]
5128:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5129:./Drivers/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5130:./Drivers/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5131:./Drivers/FreeRTOS/tasks.c **** 
5132:./Drivers/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 8702              		.loc 1 5132 9
 8703 000c FB68     		ldr	r3, [r7, #12]
 8704 000e 002B     		cmp	r3, #0
 8705 0010 0AD1     		bne	.L489
 8706              	.LBB300:
 8707              	.LBB301:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8708              		.loc 2 198 9
 8709              		.syntax unified
 8710              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8711 0012 4FF05003 			mov r3, #80												
 8712 0016 83F31188 		msr basepri, r3											
 8713 001a BFF36F8F 		isb														
 8714 001e BFF34F8F 		dsb														
 8715              	
 8716              	@ 0 "" 2
 8717              		.thumb
 8718              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 248


 8719 0022 7B62     		str	r3, [r7, #36]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8720              		.loc 2 206 5
 8721 0024 00BF     		nop
 8722              	.L490:
 8723              	.LBE301:
 8724              	.LBE300:
 8725              		.loc 1 5132 9 discriminator 1
 8726 0026 FEE7     		b	.L490
 8727              	.L489:
5133:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8728              		.loc 1 5133 9
 8729 0028 BB68     		ldr	r3, [r7, #8]
 8730 002a 002B     		cmp	r3, #0
 8731 002c 0AD0     		beq	.L491
 8732              	.LBB302:
 8733              	.LBB303:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8734              		.loc 2 198 9
 8735              		.syntax unified
 8736              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8737 002e 4FF05003 			mov r3, #80												
 8738 0032 83F31188 		msr basepri, r3											
 8739 0036 BFF36F8F 		isb														
 8740 003a BFF34F8F 		dsb														
 8741              	
 8742              	@ 0 "" 2
 8743              		.thumb
 8744              		.syntax unified
 8745 003e 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8746              		.loc 2 206 5
 8747 0040 00BF     		nop
 8748              	.L492:
 8749              	.LBE303:
 8750              	.LBE302:
 8751              		.loc 1 5133 9 discriminator 2
 8752 0042 FEE7     		b	.L492
 8753              	.L491:
5134:./Drivers/FreeRTOS/tasks.c **** 
5135:./Drivers/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5136:./Drivers/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5137:./Drivers/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5138:./Drivers/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5139:./Drivers/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5140:./Drivers/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5141:./Drivers/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5142:./Drivers/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5143:./Drivers/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5144:./Drivers/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5145:./Drivers/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5146:./Drivers/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5147:./Drivers/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5148:./Drivers/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5149:./Drivers/FreeRTOS/tasks.c ****          * provided on the following link:
5150:./Drivers/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5151:./Drivers/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 249


 8754              		.loc 1 5151 9
 8755 0044 FFF7FEFF 		bl	vPortValidateInterruptPriority
5152:./Drivers/FreeRTOS/tasks.c **** 
5153:./Drivers/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 8756              		.loc 1 5153 15
 8757 0048 FB68     		ldr	r3, [r7, #12]
 8758 004a FB63     		str	r3, [r7, #60]
 8759              	.LBB304:
 8760              	.LBB305:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8761              		.loc 2 214 9
 8762              		.syntax unified
 8763              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8764 004c EFF31182 			mrs r2, basepri											
 8765 0050 4FF05003 		mov r3, #80												
 8766 0054 83F31188 		msr basepri, r3											
 8767 0058 BFF36F8F 		isb														
 8768 005c BFF34F8F 		dsb														
 8769              	
 8770              	@ 0 "" 2
 8771              		.thumb
 8772              		.syntax unified
 8773 0060 FA61     		str	r2, [r7, #28]
 8774 0062 BB61     		str	r3, [r7, #24]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 8775              		.loc 2 226 16
 8776 0064 FB69     		ldr	r3, [r7, #28]
 8777              	.LBE305:
 8778              	.LBE304:
5154:./Drivers/FreeRTOS/tasks.c **** 
5155:./Drivers/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8779              		.loc 1 5155 34
 8780 0066 BB63     		str	r3, [r7, #56]
5156:./Drivers/FreeRTOS/tasks.c ****         {
5157:./Drivers/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8781              		.loc 1 5157 35
 8782 0068 FA6B     		ldr	r2, [r7, #60]
 8783 006a BB68     		ldr	r3, [r7, #8]
 8784 006c 1344     		add	r3, r3, r2
 8785 006e 5433     		adds	r3, r3, #84
 8786 0070 1B78     		ldrb	r3, [r3]
 8787 0072 87F83730 		strb	r3, [r7, #55]
5158:./Drivers/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8788              		.loc 1 5158 53
 8789 0076 FA6B     		ldr	r2, [r7, #60]
 8790 0078 BB68     		ldr	r3, [r7, #8]
 8791 007a 1344     		add	r3, r3, r2
 8792 007c 5433     		adds	r3, r3, #84
 8793 007e 0222     		movs	r2, #2
 8794 0080 1A70     		strb	r2, [r3]
5159:./Drivers/FreeRTOS/tasks.c **** 
5160:./Drivers/FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5161:./Drivers/FreeRTOS/tasks.c ****              * semaphore. */
5162:./Drivers/FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8795              		.loc 1 5162 37
 8796 0082 FB6B     		ldr	r3, [r7, #60]
 8797 0084 BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 250


 8798 0086 1432     		adds	r2, r2, #20
 8799 0088 53F82230 		ldr	r3, [r3, r2, lsl #2]
 8800              		.loc 1 5162 58
 8801 008c 591C     		adds	r1, r3, #1
 8802 008e FB6B     		ldr	r3, [r7, #60]
 8803 0090 BA68     		ldr	r2, [r7, #8]
 8804 0092 1432     		adds	r2, r2, #20
 8805 0094 43F82210 		str	r1, [r3, r2, lsl #2]
5163:./Drivers/FreeRTOS/tasks.c **** 
5164:./Drivers/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5165:./Drivers/FreeRTOS/tasks.c **** 
5166:./Drivers/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5167:./Drivers/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5168:./Drivers/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8806              		.loc 1 5168 15
 8807 0098 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8808 009c 012B     		cmp	r3, #1
 8809 009e 40F09E80 		bne	.L494
5169:./Drivers/FreeRTOS/tasks.c ****             {
5170:./Drivers/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5171:./Drivers/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8810              		.loc 1 5171 17
 8811 00a2 FB6B     		ldr	r3, [r7, #60]
 8812 00a4 9B6A     		ldr	r3, [r3, #40]
 8813 00a6 002B     		cmp	r3, #0
 8814 00a8 0AD0     		beq	.L495
 8815              	.LBB306:
 8816              	.LBB307:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 8817              		.loc 2 198 9
 8818              		.syntax unified
 8819              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 8820 00aa 4FF05003 			mov r3, #80												
 8821 00ae 83F31188 		msr basepri, r3											
 8822 00b2 BFF36F8F 		isb														
 8823 00b6 BFF34F8F 		dsb														
 8824              	
 8825              	@ 0 "" 2
 8826              		.thumb
 8827              		.syntax unified
 8828 00ba 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 8829              		.loc 2 206 5
 8830 00bc 00BF     		nop
 8831              	.L496:
 8832              	.LBE307:
 8833              	.LBE306:
 8834              		.loc 1 5171 17 discriminator 3
 8835 00be FEE7     		b	.L496
 8836              	.L495:
5172:./Drivers/FreeRTOS/tasks.c **** 
5173:./Drivers/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8837              		.loc 1 5173 42
 8838 00c0 4C4B     		ldr	r3, .L501
 8839 00c2 1B68     		ldr	r3, [r3]
 8840              		.loc 1 5173 19
 8841 00c4 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 251


 8842 00c6 5ED1     		bne	.L497
 8843              	.LBB308:
5174:./Drivers/FreeRTOS/tasks.c ****                 {
5175:./Drivers/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8844              		.loc 1 5175 21
 8845 00c8 FB6B     		ldr	r3, [r7, #60]
 8846 00ca 5B69     		ldr	r3, [r3, #20]
 8847 00cc FB62     		str	r3, [r7, #44]
 8848 00ce FB6B     		ldr	r3, [r7, #60]
 8849 00d0 9B68     		ldr	r3, [r3, #8]
 8850 00d2 FA6B     		ldr	r2, [r7, #60]
 8851 00d4 D268     		ldr	r2, [r2, #12]
 8852 00d6 9A60     		str	r2, [r3, #8]
 8853 00d8 FB6B     		ldr	r3, [r7, #60]
 8854 00da DB68     		ldr	r3, [r3, #12]
 8855 00dc FA6B     		ldr	r2, [r7, #60]
 8856 00de 9268     		ldr	r2, [r2, #8]
 8857 00e0 5A60     		str	r2, [r3, #4]
 8858 00e2 FB6A     		ldr	r3, [r7, #44]
 8859 00e4 5A68     		ldr	r2, [r3, #4]
 8860 00e6 FB6B     		ldr	r3, [r7, #60]
 8861 00e8 0433     		adds	r3, r3, #4
 8862 00ea 9A42     		cmp	r2, r3
 8863 00ec 03D1     		bne	.L498
 8864              		.loc 1 5175 21 is_stmt 0 discriminator 1
 8865 00ee FB6B     		ldr	r3, [r7, #60]
 8866 00f0 DA68     		ldr	r2, [r3, #12]
 8867 00f2 FB6A     		ldr	r3, [r7, #44]
 8868 00f4 5A60     		str	r2, [r3, #4]
 8869              	.L498:
 8870              		.loc 1 5175 21 discriminator 3
 8871 00f6 FB6B     		ldr	r3, [r7, #60]
 8872 00f8 0022     		movs	r2, #0
 8873 00fa 5A61     		str	r2, [r3, #20]
 8874 00fc FB6A     		ldr	r3, [r7, #44]
 8875 00fe 1B68     		ldr	r3, [r3]
 8876 0100 5A1E     		subs	r2, r3, #1
 8877 0102 FB6A     		ldr	r3, [r7, #44]
 8878 0104 1A60     		str	r2, [r3]
 8879              	.LBE308:
5176:./Drivers/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 8880              		.loc 1 5176 21 is_stmt 1 discriminator 3
 8881 0106 FB6B     		ldr	r3, [r7, #60]
 8882 0108 DB6A     		ldr	r3, [r3, #44]
 8883 010a 0122     		movs	r2, #1
 8884 010c 9A40     		lsls	r2, r2, r3
 8885 010e 3A4B     		ldr	r3, .L501+4
 8886 0110 1B68     		ldr	r3, [r3]
 8887 0112 1343     		orrs	r3, r3, r2
 8888 0114 384A     		ldr	r2, .L501+4
 8889 0116 1360     		str	r3, [r2]
 8890              	.LBB309:
 8891 0118 FB6B     		ldr	r3, [r7, #60]
 8892 011a DA6A     		ldr	r2, [r3, #44]
 8893 011c 3749     		ldr	r1, .L501+8
 8894 011e 1346     		mov	r3, r2
 8895 0120 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 252


 8896 0122 1344     		add	r3, r3, r2
 8897 0124 9B00     		lsls	r3, r3, #2
 8898 0126 0B44     		add	r3, r3, r1
 8899 0128 0433     		adds	r3, r3, #4
 8900 012a 1B68     		ldr	r3, [r3]
 8901 012c BB62     		str	r3, [r7, #40]
 8902 012e FB6B     		ldr	r3, [r7, #60]
 8903 0130 BA6A     		ldr	r2, [r7, #40]
 8904 0132 9A60     		str	r2, [r3, #8]
 8905 0134 BB6A     		ldr	r3, [r7, #40]
 8906 0136 9A68     		ldr	r2, [r3, #8]
 8907 0138 FB6B     		ldr	r3, [r7, #60]
 8908 013a DA60     		str	r2, [r3, #12]
 8909 013c BB6A     		ldr	r3, [r7, #40]
 8910 013e 9B68     		ldr	r3, [r3, #8]
 8911 0140 FA6B     		ldr	r2, [r7, #60]
 8912 0142 0432     		adds	r2, r2, #4
 8913 0144 5A60     		str	r2, [r3, #4]
 8914 0146 FB6B     		ldr	r3, [r7, #60]
 8915 0148 1A1D     		adds	r2, r3, #4
 8916 014a BB6A     		ldr	r3, [r7, #40]
 8917 014c 9A60     		str	r2, [r3, #8]
 8918 014e FB6B     		ldr	r3, [r7, #60]
 8919 0150 DA6A     		ldr	r2, [r3, #44]
 8920 0152 1346     		mov	r3, r2
 8921 0154 9B00     		lsls	r3, r3, #2
 8922 0156 1344     		add	r3, r3, r2
 8923 0158 9B00     		lsls	r3, r3, #2
 8924 015a 284A     		ldr	r2, .L501+8
 8925 015c 1A44     		add	r2, r2, r3
 8926 015e FB6B     		ldr	r3, [r7, #60]
 8927 0160 5A61     		str	r2, [r3, #20]
 8928 0162 FB6B     		ldr	r3, [r7, #60]
 8929 0164 DA6A     		ldr	r2, [r3, #44]
 8930 0166 2549     		ldr	r1, .L501+8
 8931 0168 1346     		mov	r3, r2
 8932 016a 9B00     		lsls	r3, r3, #2
 8933 016c 1344     		add	r3, r3, r2
 8934 016e 9B00     		lsls	r3, r3, #2
 8935 0170 0B44     		add	r3, r3, r1
 8936 0172 1B68     		ldr	r3, [r3]
 8937 0174 591C     		adds	r1, r3, #1
 8938 0176 2148     		ldr	r0, .L501+8
 8939 0178 1346     		mov	r3, r2
 8940 017a 9B00     		lsls	r3, r3, #2
 8941 017c 1344     		add	r3, r3, r2
 8942 017e 9B00     		lsls	r3, r3, #2
 8943 0180 0344     		add	r3, r3, r0
 8944 0182 1960     		str	r1, [r3]
 8945              	.LBE309:
 8946 0184 1BE0     		b	.L499
 8947              	.L497:
 8948              	.LBB310:
5177:./Drivers/FreeRTOS/tasks.c ****                 }
5178:./Drivers/FreeRTOS/tasks.c ****                 else
5179:./Drivers/FreeRTOS/tasks.c ****                 {
5180:./Drivers/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 253


5181:./Drivers/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5182:./Drivers/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8949              		.loc 1 5182 21
 8950 0186 1E4B     		ldr	r3, .L501+12
 8951 0188 5B68     		ldr	r3, [r3, #4]
 8952 018a 3B63     		str	r3, [r7, #48]
 8953 018c FB6B     		ldr	r3, [r7, #60]
 8954 018e 3A6B     		ldr	r2, [r7, #48]
 8955 0190 DA61     		str	r2, [r3, #28]
 8956 0192 3B6B     		ldr	r3, [r7, #48]
 8957 0194 9A68     		ldr	r2, [r3, #8]
 8958 0196 FB6B     		ldr	r3, [r7, #60]
 8959 0198 1A62     		str	r2, [r3, #32]
 8960 019a 3B6B     		ldr	r3, [r7, #48]
 8961 019c 9B68     		ldr	r3, [r3, #8]
 8962 019e FA6B     		ldr	r2, [r7, #60]
 8963 01a0 1832     		adds	r2, r2, #24
 8964 01a2 5A60     		str	r2, [r3, #4]
 8965 01a4 FB6B     		ldr	r3, [r7, #60]
 8966 01a6 03F11802 		add	r2, r3, #24
 8967 01aa 3B6B     		ldr	r3, [r7, #48]
 8968 01ac 9A60     		str	r2, [r3, #8]
 8969 01ae FB6B     		ldr	r3, [r7, #60]
 8970 01b0 134A     		ldr	r2, .L501+12
 8971 01b2 9A62     		str	r2, [r3, #40]
 8972 01b4 124B     		ldr	r3, .L501+12
 8973 01b6 1B68     		ldr	r3, [r3]
 8974 01b8 0133     		adds	r3, r3, #1
 8975 01ba 114A     		ldr	r2, .L501+12
 8976 01bc 1360     		str	r3, [r2]
 8977              	.L499:
 8978              	.LBE310:
5183:./Drivers/FreeRTOS/tasks.c ****                 }
5184:./Drivers/FreeRTOS/tasks.c **** 
5185:./Drivers/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8979              		.loc 1 5185 26
 8980 01be FB6B     		ldr	r3, [r7, #60]
 8981 01c0 DA6A     		ldr	r2, [r3, #44]
 8982              		.loc 1 5185 53
 8983 01c2 104B     		ldr	r3, .L501+16
 8984 01c4 1B68     		ldr	r3, [r3]
 8985 01c6 DB6A     		ldr	r3, [r3, #44]
 8986              		.loc 1 5185 19
 8987 01c8 9A42     		cmp	r2, r3
 8988 01ca 08D9     		bls	.L494
5186:./Drivers/FreeRTOS/tasks.c ****                 {
5187:./Drivers/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5188:./Drivers/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5189:./Drivers/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 8989              		.loc 1 5189 23
 8990 01cc 7B68     		ldr	r3, [r7, #4]
 8991 01ce 002B     		cmp	r3, #0
 8992 01d0 02D0     		beq	.L500
5190:./Drivers/FreeRTOS/tasks.c ****                     {
5191:./Drivers/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 8993              		.loc 1 5191 52
 8994 01d2 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 254


 8995 01d4 0122     		movs	r2, #1
 8996 01d6 1A60     		str	r2, [r3]
 8997              	.L500:
5192:./Drivers/FreeRTOS/tasks.c ****                     }
5193:./Drivers/FreeRTOS/tasks.c **** 
5194:./Drivers/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5195:./Drivers/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5196:./Drivers/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5197:./Drivers/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
 8998              		.loc 1 5197 35
 8999 01d8 0B4B     		ldr	r3, .L501+20
 9000 01da 0122     		movs	r2, #1
 9001 01dc 1A60     		str	r2, [r3]
 9002              	.L494:
 9003 01de BB6B     		ldr	r3, [r7, #56]
 9004 01e0 3B61     		str	r3, [r7, #16]
 9005              	.LBB311:
 9006              	.LBB312:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 9007              		.loc 2 232 9
 9008 01e2 3B69     		ldr	r3, [r7, #16]
 9009              		.syntax unified
 9010              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 9011 01e4 83F31188 			msr basepri, r3	
 9012              	@ 0 "" 2
 9013              		.loc 2 236 5
 9014              		.thumb
 9015              		.syntax unified
 9016 01e8 00BF     		nop
 9017              	.LBE312:
 9018              	.LBE311:
5198:./Drivers/FreeRTOS/tasks.c ****                 }
5199:./Drivers/FreeRTOS/tasks.c ****                 else
5200:./Drivers/FreeRTOS/tasks.c ****                 {
5201:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5202:./Drivers/FreeRTOS/tasks.c ****                 }
5203:./Drivers/FreeRTOS/tasks.c ****             }
5204:./Drivers/FreeRTOS/tasks.c ****         }
5205:./Drivers/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5206:./Drivers/FreeRTOS/tasks.c ****     }
 9019              		.loc 1 5206 5
 9020 01ea 00BF     		nop
 9021 01ec 4037     		adds	r7, r7, #64
 9022              	.LCFI289:
 9023              		.cfi_def_cfa_offset 8
 9024 01ee BD46     		mov	sp, r7
 9025              	.LCFI290:
 9026              		.cfi_def_cfa_register 13
 9027              		@ sp needed
 9028 01f0 80BD     		pop	{r7, pc}
 9029              	.L502:
 9030 01f2 00BF     		.align	2
 9031              	.L501:
 9032 01f4 00000000 		.word	uxSchedulerSuspended
 9033 01f8 00000000 		.word	uxTopReadyPriority
 9034 01fc 00000000 		.word	pxReadyTasksLists
 9035 0200 00000000 		.word	xPendingReadyList
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 255


 9036 0204 00000000 		.word	pxCurrentTCB
 9037 0208 00000000 		.word	xYieldPending
 9038              		.cfi_endproc
 9039              	.LFE61:
 9041              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 9042              		.align	1
 9043              		.global	xTaskGenericNotifyStateClear
 9044              		.syntax unified
 9045              		.thumb
 9046              		.thumb_func
 9047              		.fpu fpv4-sp-d16
 9049              	xTaskGenericNotifyStateClear:
 9050              	.LFB62:
5207:./Drivers/FreeRTOS/tasks.c **** 
5208:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5209:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5210:./Drivers/FreeRTOS/tasks.c **** 
5211:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5212:./Drivers/FreeRTOS/tasks.c **** 
5213:./Drivers/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5214:./Drivers/FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5215:./Drivers/FreeRTOS/tasks.c ****     {
 9051              		.loc 1 5215 5
 9052              		.cfi_startproc
 9053              		@ args = 0, pretend = 0, frame = 24
 9054              		@ frame_needed = 1, uses_anonymous_args = 0
 9055 0000 80B5     		push	{r7, lr}
 9056              	.LCFI291:
 9057              		.cfi_def_cfa_offset 8
 9058              		.cfi_offset 7, -8
 9059              		.cfi_offset 14, -4
 9060 0002 86B0     		sub	sp, sp, #24
 9061              	.LCFI292:
 9062              		.cfi_def_cfa_offset 32
 9063 0004 00AF     		add	r7, sp, #0
 9064              	.LCFI293:
 9065              		.cfi_def_cfa_register 7
 9066 0006 7860     		str	r0, [r7, #4]
 9067 0008 3960     		str	r1, [r7]
5216:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5217:./Drivers/FreeRTOS/tasks.c ****         BaseType_t xReturn;
5218:./Drivers/FreeRTOS/tasks.c **** 
5219:./Drivers/FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 9068              		.loc 1 5219 9
 9069 000a 3B68     		ldr	r3, [r7]
 9070 000c 002B     		cmp	r3, #0
 9071 000e 0AD0     		beq	.L504
 9072              	.LBB313:
 9073              	.LBB314:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 9074              		.loc 2 198 9
 9075              		.syntax unified
 9076              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 9077 0010 4FF05003 			mov r3, #80												
 9078 0014 83F31188 		msr basepri, r3											
 9079 0018 BFF36F8F 		isb														
 9080 001c BFF34F8F 		dsb														
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 256


 9081              	
 9082              	@ 0 "" 2
 9083              		.thumb
 9084              		.syntax unified
 9085 0020 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 9086              		.loc 2 206 5
 9087 0022 00BF     		nop
 9088              	.L505:
 9089              	.LBE314:
 9090              	.LBE313:
 9091              		.loc 1 5219 9 discriminator 1
 9092 0024 FEE7     		b	.L505
 9093              	.L504:
5220:./Drivers/FreeRTOS/tasks.c **** 
5221:./Drivers/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5222:./Drivers/FreeRTOS/tasks.c ****          * its notification state cleared. */
5223:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 9094              		.loc 1 5223 17
 9095 0026 7B68     		ldr	r3, [r7, #4]
 9096 0028 002B     		cmp	r3, #0
 9097 002a 02D1     		bne	.L506
 9098              		.loc 1 5223 17 is_stmt 0 discriminator 1
 9099 002c 104B     		ldr	r3, .L511
 9100 002e 1B68     		ldr	r3, [r3]
 9101 0030 00E0     		b	.L507
 9102              	.L506:
 9103              		.loc 1 5223 17 discriminator 2
 9104 0032 7B68     		ldr	r3, [r7, #4]
 9105              	.L507:
 9106              		.loc 1 5223 15 is_stmt 1 discriminator 4
 9107 0034 3B61     		str	r3, [r7, #16]
5224:./Drivers/FreeRTOS/tasks.c **** 
5225:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 9108              		.loc 1 5225 9 discriminator 4
 9109 0036 FFF7FEFF 		bl	vPortEnterCritical
5226:./Drivers/FreeRTOS/tasks.c ****         {
5227:./Drivers/FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 9110              		.loc 1 5227 37 discriminator 4
 9111 003a 3A69     		ldr	r2, [r7, #16]
 9112 003c 3B68     		ldr	r3, [r7]
 9113 003e 1344     		add	r3, r3, r2
 9114 0040 5433     		adds	r3, r3, #84
 9115 0042 1B78     		ldrb	r3, [r3]
 9116 0044 DBB2     		uxtb	r3, r3
 9117              		.loc 1 5227 15 discriminator 4
 9118 0046 022B     		cmp	r3, #2
 9119 0048 08D1     		bne	.L508
5228:./Drivers/FreeRTOS/tasks.c ****             {
5229:./Drivers/FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 9120              		.loc 1 5229 56
 9121 004a 3A69     		ldr	r2, [r7, #16]
 9122 004c 3B68     		ldr	r3, [r7]
 9123 004e 1344     		add	r3, r3, r2
 9124 0050 5433     		adds	r3, r3, #84
 9125 0052 0022     		movs	r2, #0
 9126 0054 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 257


5230:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 9127              		.loc 1 5230 25
 9128 0056 0123     		movs	r3, #1
 9129 0058 7B61     		str	r3, [r7, #20]
 9130 005a 01E0     		b	.L509
 9131              	.L508:
5231:./Drivers/FreeRTOS/tasks.c ****             }
5232:./Drivers/FreeRTOS/tasks.c ****             else
5233:./Drivers/FreeRTOS/tasks.c ****             {
5234:./Drivers/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
 9132              		.loc 1 5234 25
 9133 005c 0023     		movs	r3, #0
 9134 005e 7B61     		str	r3, [r7, #20]
 9135              	.L509:
5235:./Drivers/FreeRTOS/tasks.c ****             }
5236:./Drivers/FreeRTOS/tasks.c ****         }
5237:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 9136              		.loc 1 5237 9
 9137 0060 FFF7FEFF 		bl	vPortExitCritical
5238:./Drivers/FreeRTOS/tasks.c **** 
5239:./Drivers/FreeRTOS/tasks.c ****         return xReturn;
 9138              		.loc 1 5239 16
 9139 0064 7B69     		ldr	r3, [r7, #20]
5240:./Drivers/FreeRTOS/tasks.c ****     }
 9140              		.loc 1 5240 5
 9141 0066 1846     		mov	r0, r3
 9142 0068 1837     		adds	r7, r7, #24
 9143              	.LCFI294:
 9144              		.cfi_def_cfa_offset 8
 9145 006a BD46     		mov	sp, r7
 9146              	.LCFI295:
 9147              		.cfi_def_cfa_register 13
 9148              		@ sp needed
 9149 006c 80BD     		pop	{r7, pc}
 9150              	.L512:
 9151 006e 00BF     		.align	2
 9152              	.L511:
 9153 0070 00000000 		.word	pxCurrentTCB
 9154              		.cfi_endproc
 9155              	.LFE62:
 9157              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 9158              		.align	1
 9159              		.global	ulTaskGenericNotifyValueClear
 9160              		.syntax unified
 9161              		.thumb
 9162              		.thumb_func
 9163              		.fpu fpv4-sp-d16
 9165              	ulTaskGenericNotifyValueClear:
 9166              	.LFB63:
5241:./Drivers/FreeRTOS/tasks.c **** 
5242:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5243:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5244:./Drivers/FreeRTOS/tasks.c **** 
5245:./Drivers/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5246:./Drivers/FreeRTOS/tasks.c **** 
5247:./Drivers/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5248:./Drivers/FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 258


5249:./Drivers/FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5250:./Drivers/FreeRTOS/tasks.c ****     {
 9167              		.loc 1 5250 5
 9168              		.cfi_startproc
 9169              		@ args = 0, pretend = 0, frame = 24
 9170              		@ frame_needed = 1, uses_anonymous_args = 0
 9171 0000 80B5     		push	{r7, lr}
 9172              	.LCFI296:
 9173              		.cfi_def_cfa_offset 8
 9174              		.cfi_offset 7, -8
 9175              		.cfi_offset 14, -4
 9176 0002 86B0     		sub	sp, sp, #24
 9177              	.LCFI297:
 9178              		.cfi_def_cfa_offset 32
 9179 0004 00AF     		add	r7, sp, #0
 9180              	.LCFI298:
 9181              		.cfi_def_cfa_register 7
 9182 0006 F860     		str	r0, [r7, #12]
 9183 0008 B960     		str	r1, [r7, #8]
 9184 000a 7A60     		str	r2, [r7, #4]
5251:./Drivers/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5252:./Drivers/FreeRTOS/tasks.c ****         uint32_t ulReturn;
5253:./Drivers/FreeRTOS/tasks.c **** 
5254:./Drivers/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5255:./Drivers/FreeRTOS/tasks.c ****          * its notification state cleared. */
5256:./Drivers/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 9185              		.loc 1 5256 17
 9186 000c FB68     		ldr	r3, [r7, #12]
 9187 000e 002B     		cmp	r3, #0
 9188 0010 02D1     		bne	.L514
 9189              		.loc 1 5256 17 is_stmt 0 discriminator 1
 9190 0012 114B     		ldr	r3, .L517
 9191 0014 1B68     		ldr	r3, [r3]
 9192 0016 00E0     		b	.L515
 9193              	.L514:
 9194              		.loc 1 5256 17 discriminator 2
 9195 0018 FB68     		ldr	r3, [r7, #12]
 9196              	.L515:
 9197              		.loc 1 5256 15 is_stmt 1 discriminator 4
 9198 001a 7B61     		str	r3, [r7, #20]
5257:./Drivers/FreeRTOS/tasks.c **** 
5258:./Drivers/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
 9199              		.loc 1 5258 9 discriminator 4
 9200 001c FFF7FEFF 		bl	vPortEnterCritical
5259:./Drivers/FreeRTOS/tasks.c ****         {
5260:./Drivers/FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5261:./Drivers/FreeRTOS/tasks.c ****              * then clear the bit mask. */
5262:./Drivers/FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 9201              		.loc 1 5262 22 discriminator 4
 9202 0020 7B69     		ldr	r3, [r7, #20]
 9203 0022 BA68     		ldr	r2, [r7, #8]
 9204 0024 1432     		adds	r2, r2, #20
 9205 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 9206 002a 3B61     		str	r3, [r7, #16]
5263:./Drivers/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 9207              		.loc 1 5263 54 discriminator 4
 9208 002c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 259


 9209 002e BA68     		ldr	r2, [r7, #8]
 9210 0030 1432     		adds	r2, r2, #20
 9211 0032 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9212              		.loc 1 5263 57 discriminator 4
 9213 0036 7B68     		ldr	r3, [r7, #4]
 9214 0038 DB43     		mvns	r3, r3
 9215              		.loc 1 5263 54 discriminator 4
 9216 003a 02EA0301 		and	r1, r2, r3
 9217 003e 7B69     		ldr	r3, [r7, #20]
 9218 0040 BA68     		ldr	r2, [r7, #8]
 9219 0042 1432     		adds	r2, r2, #20
 9220 0044 43F82210 		str	r1, [r3, r2, lsl #2]
5264:./Drivers/FreeRTOS/tasks.c ****         }
5265:./Drivers/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
 9221              		.loc 1 5265 9 discriminator 4
 9222 0048 FFF7FEFF 		bl	vPortExitCritical
5266:./Drivers/FreeRTOS/tasks.c **** 
5267:./Drivers/FreeRTOS/tasks.c ****         return ulReturn;
 9223              		.loc 1 5267 16 discriminator 4
 9224 004c 3B69     		ldr	r3, [r7, #16]
5268:./Drivers/FreeRTOS/tasks.c ****     }
 9225              		.loc 1 5268 5 discriminator 4
 9226 004e 1846     		mov	r0, r3
 9227 0050 1837     		adds	r7, r7, #24
 9228              	.LCFI299:
 9229              		.cfi_def_cfa_offset 8
 9230 0052 BD46     		mov	sp, r7
 9231              	.LCFI300:
 9232              		.cfi_def_cfa_register 13
 9233              		@ sp needed
 9234 0054 80BD     		pop	{r7, pc}
 9235              	.L518:
 9236 0056 00BF     		.align	2
 9237              	.L517:
 9238 0058 00000000 		.word	pxCurrentTCB
 9239              		.cfi_endproc
 9240              	.LFE63:
 9242              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 9243              		.align	1
 9244              		.syntax unified
 9245              		.thumb
 9246              		.thumb_func
 9247              		.fpu fpv4-sp-d16
 9249              	prvAddCurrentTaskToDelayedList:
 9250              	.LFB64:
5269:./Drivers/FreeRTOS/tasks.c **** 
5270:./Drivers/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5271:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5272:./Drivers/FreeRTOS/tasks.c **** 
5273:./Drivers/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5274:./Drivers/FreeRTOS/tasks.c **** 
5275:./Drivers/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5276:./Drivers/FreeRTOS/tasks.c ****     {
5277:./Drivers/FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5278:./Drivers/FreeRTOS/tasks.c ****     }
5279:./Drivers/FreeRTOS/tasks.c **** 
5280:./Drivers/FreeRTOS/tasks.c **** #endif
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 260


5281:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5282:./Drivers/FreeRTOS/tasks.c **** 
5283:./Drivers/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5284:./Drivers/FreeRTOS/tasks.c **** 
5285:./Drivers/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5286:./Drivers/FreeRTOS/tasks.c ****     {
5287:./Drivers/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5288:./Drivers/FreeRTOS/tasks.c **** 
5289:./Drivers/FreeRTOS/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5290:./Drivers/FreeRTOS/tasks.c **** 
5291:./Drivers/FreeRTOS/tasks.c ****         /* For percentage calculations. */
5292:./Drivers/FreeRTOS/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5293:./Drivers/FreeRTOS/tasks.c **** 
5294:./Drivers/FreeRTOS/tasks.c ****         /* Avoid divide by zero errors. */
5295:./Drivers/FreeRTOS/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5296:./Drivers/FreeRTOS/tasks.c ****         {
5297:./Drivers/FreeRTOS/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5298:./Drivers/FreeRTOS/tasks.c ****         }
5299:./Drivers/FreeRTOS/tasks.c ****         else
5300:./Drivers/FreeRTOS/tasks.c ****         {
5301:./Drivers/FreeRTOS/tasks.c ****             ulReturn = 0;
5302:./Drivers/FreeRTOS/tasks.c ****         }
5303:./Drivers/FreeRTOS/tasks.c **** 
5304:./Drivers/FreeRTOS/tasks.c ****         return ulReturn;
5305:./Drivers/FreeRTOS/tasks.c ****     }
5306:./Drivers/FreeRTOS/tasks.c **** 
5307:./Drivers/FreeRTOS/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5308:./Drivers/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5309:./Drivers/FreeRTOS/tasks.c **** 
5310:./Drivers/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5311:./Drivers/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5312:./Drivers/FreeRTOS/tasks.c **** {
 9251              		.loc 1 5312 1
 9252              		.cfi_startproc
 9253              		@ args = 0, pretend = 0, frame = 24
 9254              		@ frame_needed = 1, uses_anonymous_args = 0
 9255 0000 80B5     		push	{r7, lr}
 9256              	.LCFI301:
 9257              		.cfi_def_cfa_offset 8
 9258              		.cfi_offset 7, -8
 9259              		.cfi_offset 14, -4
 9260 0002 86B0     		sub	sp, sp, #24
 9261              	.LCFI302:
 9262              		.cfi_def_cfa_offset 32
 9263 0004 00AF     		add	r7, sp, #0
 9264              	.LCFI303:
 9265              		.cfi_def_cfa_register 7
 9266 0006 7860     		str	r0, [r7, #4]
 9267 0008 3960     		str	r1, [r7]
5313:./Drivers/FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
5314:./Drivers/FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 9268              		.loc 1 5314 22
 9269 000a 364B     		ldr	r3, .L525
 9270 000c 1B68     		ldr	r3, [r3]
 9271 000e 7B61     		str	r3, [r7, #20]
5315:./Drivers/FreeRTOS/tasks.c **** 
5316:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 261


5317:./Drivers/FreeRTOS/tasks.c ****         {
5318:./Drivers/FreeRTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5319:./Drivers/FreeRTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5320:./Drivers/FreeRTOS/tasks.c ****              * when the task leaves the Blocked state. */
5321:./Drivers/FreeRTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5322:./Drivers/FreeRTOS/tasks.c ****         }
5323:./Drivers/FreeRTOS/tasks.c ****     #endif
5324:./Drivers/FreeRTOS/tasks.c **** 
5325:./Drivers/FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5326:./Drivers/FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5327:./Drivers/FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 9272              		.loc 1 5327 38
 9273 0010 354B     		ldr	r3, .L525+4
 9274 0012 1B68     		ldr	r3, [r3]
 9275              		.loc 1 5327 9
 9276 0014 0433     		adds	r3, r3, #4
 9277 0016 1846     		mov	r0, r3
 9278 0018 FFF7FEFF 		bl	uxListRemove
 9279 001c 0346     		mov	r3, r0
 9280              		.loc 1 5327 7
 9281 001e 002B     		cmp	r3, #0
 9282 0020 0BD1     		bne	.L520
5328:./Drivers/FreeRTOS/tasks.c ****     {
5329:./Drivers/FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5330:./Drivers/FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5331:./Drivers/FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 9283              		.loc 1 5331 9
 9284 0022 314B     		ldr	r3, .L525+4
 9285 0024 1B68     		ldr	r3, [r3]
 9286 0026 DB6A     		ldr	r3, [r3, #44]
 9287 0028 0122     		movs	r2, #1
 9288 002a 02FA03F3 		lsl	r3, r2, r3
 9289 002e DA43     		mvns	r2, r3
 9290 0030 2E4B     		ldr	r3, .L525+8
 9291 0032 1B68     		ldr	r3, [r3]
 9292 0034 1340     		ands	r3, r3, r2
 9293 0036 2D4A     		ldr	r2, .L525+8
 9294 0038 1360     		str	r3, [r2]
 9295              	.L520:
5332:./Drivers/FreeRTOS/tasks.c ****     }
5333:./Drivers/FreeRTOS/tasks.c ****     else
5334:./Drivers/FreeRTOS/tasks.c ****     {
5335:./Drivers/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5336:./Drivers/FreeRTOS/tasks.c ****     }
5337:./Drivers/FreeRTOS/tasks.c **** 
5338:./Drivers/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5339:./Drivers/FreeRTOS/tasks.c ****         {
5340:./Drivers/FreeRTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 9296              		.loc 1 5340 15
 9297 003a 7B68     		ldr	r3, [r7, #4]
 9298 003c B3F1FF3F 		cmp	r3, #-1
 9299 0040 24D1     		bne	.L521
 9300              		.loc 1 5340 51 discriminator 1
 9301 0042 3B68     		ldr	r3, [r7]
 9302 0044 002B     		cmp	r3, #0
 9303 0046 21D0     		beq	.L521
 9304              	.LBB315:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 262


5341:./Drivers/FreeRTOS/tasks.c ****             {
5342:./Drivers/FreeRTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5343:./Drivers/FreeRTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5344:./Drivers/FreeRTOS/tasks.c ****                  * indefinitely. */
5345:./Drivers/FreeRTOS/tasks.c ****                 listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 9305              		.loc 1 5345 17
 9306 0048 294B     		ldr	r3, .L525+12
 9307 004a 5B68     		ldr	r3, [r3, #4]
 9308 004c 3B61     		str	r3, [r7, #16]
 9309 004e 264B     		ldr	r3, .L525+4
 9310 0050 1B68     		ldr	r3, [r3]
 9311 0052 3A69     		ldr	r2, [r7, #16]
 9312 0054 9A60     		str	r2, [r3, #8]
 9313 0056 244B     		ldr	r3, .L525+4
 9314 0058 1B68     		ldr	r3, [r3]
 9315 005a 3A69     		ldr	r2, [r7, #16]
 9316 005c 9268     		ldr	r2, [r2, #8]
 9317 005e DA60     		str	r2, [r3, #12]
 9318 0060 214B     		ldr	r3, .L525+4
 9319 0062 1A68     		ldr	r2, [r3]
 9320 0064 3B69     		ldr	r3, [r7, #16]
 9321 0066 9B68     		ldr	r3, [r3, #8]
 9322 0068 0432     		adds	r2, r2, #4
 9323 006a 5A60     		str	r2, [r3, #4]
 9324 006c 1E4B     		ldr	r3, .L525+4
 9325 006e 1B68     		ldr	r3, [r3]
 9326 0070 1A1D     		adds	r2, r3, #4
 9327 0072 3B69     		ldr	r3, [r7, #16]
 9328 0074 9A60     		str	r2, [r3, #8]
 9329 0076 1C4B     		ldr	r3, .L525+4
 9330 0078 1B68     		ldr	r3, [r3]
 9331 007a 1D4A     		ldr	r2, .L525+12
 9332 007c 5A61     		str	r2, [r3, #20]
 9333 007e 1C4B     		ldr	r3, .L525+12
 9334 0080 1B68     		ldr	r3, [r3]
 9335 0082 0133     		adds	r3, r3, #1
 9336 0084 1A4A     		ldr	r2, .L525+12
 9337 0086 1360     		str	r3, [r2]
 9338              	.LBE315:
 9339 0088 00BF     		nop
5346:./Drivers/FreeRTOS/tasks.c ****             }
5347:./Drivers/FreeRTOS/tasks.c ****             else
5348:./Drivers/FreeRTOS/tasks.c ****             {
5349:./Drivers/FreeRTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5350:./Drivers/FreeRTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5351:./Drivers/FreeRTOS/tasks.c ****                  * kernel will manage it correctly. */
5352:./Drivers/FreeRTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
5353:./Drivers/FreeRTOS/tasks.c **** 
5354:./Drivers/FreeRTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5355:./Drivers/FreeRTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5356:./Drivers/FreeRTOS/tasks.c **** 
5357:./Drivers/FreeRTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
5358:./Drivers/FreeRTOS/tasks.c ****                 {
5359:./Drivers/FreeRTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5360:./Drivers/FreeRTOS/tasks.c ****                      * list. */
5361:./Drivers/FreeRTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5362:./Drivers/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 263


5363:./Drivers/FreeRTOS/tasks.c ****                 else
5364:./Drivers/FreeRTOS/tasks.c ****                 {
5365:./Drivers/FreeRTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5366:./Drivers/FreeRTOS/tasks.c ****                      * is used. */
5367:./Drivers/FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5368:./Drivers/FreeRTOS/tasks.c **** 
5369:./Drivers/FreeRTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5370:./Drivers/FreeRTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5371:./Drivers/FreeRTOS/tasks.c ****                      * needs to be updated too. */
5372:./Drivers/FreeRTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
5373:./Drivers/FreeRTOS/tasks.c ****                     {
5374:./Drivers/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
5375:./Drivers/FreeRTOS/tasks.c ****                     }
5376:./Drivers/FreeRTOS/tasks.c ****                     else
5377:./Drivers/FreeRTOS/tasks.c ****                     {
5378:./Drivers/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5379:./Drivers/FreeRTOS/tasks.c ****                     }
5380:./Drivers/FreeRTOS/tasks.c ****                 }
5381:./Drivers/FreeRTOS/tasks.c ****             }
5382:./Drivers/FreeRTOS/tasks.c ****         }
5383:./Drivers/FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5384:./Drivers/FreeRTOS/tasks.c ****         {
5385:./Drivers/FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5386:./Drivers/FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5387:./Drivers/FreeRTOS/tasks.c ****              * will manage it correctly. */
5388:./Drivers/FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5389:./Drivers/FreeRTOS/tasks.c **** 
5390:./Drivers/FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5391:./Drivers/FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5392:./Drivers/FreeRTOS/tasks.c **** 
5393:./Drivers/FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5394:./Drivers/FreeRTOS/tasks.c ****             {
5395:./Drivers/FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5396:./Drivers/FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5397:./Drivers/FreeRTOS/tasks.c ****             }
5398:./Drivers/FreeRTOS/tasks.c ****             else
5399:./Drivers/FreeRTOS/tasks.c ****             {
5400:./Drivers/FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5401:./Drivers/FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5402:./Drivers/FreeRTOS/tasks.c **** 
5403:./Drivers/FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5404:./Drivers/FreeRTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5405:./Drivers/FreeRTOS/tasks.c ****                  * too. */
5406:./Drivers/FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5407:./Drivers/FreeRTOS/tasks.c ****                 {
5408:./Drivers/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5409:./Drivers/FreeRTOS/tasks.c ****                 }
5410:./Drivers/FreeRTOS/tasks.c ****                 else
5411:./Drivers/FreeRTOS/tasks.c ****                 {
5412:./Drivers/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5413:./Drivers/FreeRTOS/tasks.c ****                 }
5414:./Drivers/FreeRTOS/tasks.c ****             }
5415:./Drivers/FreeRTOS/tasks.c **** 
5416:./Drivers/FreeRTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5417:./Drivers/FreeRTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5418:./Drivers/FreeRTOS/tasks.c ****         }
5419:./Drivers/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 264


5420:./Drivers/FreeRTOS/tasks.c **** }
 9340              		.loc 1 5420 1
 9341 008a 26E0     		b	.L524
 9342              	.L521:
5352:./Drivers/FreeRTOS/tasks.c **** 
 9343              		.loc 1 5352 29
 9344 008c 7A69     		ldr	r2, [r7, #20]
 9345 008e 7B68     		ldr	r3, [r7, #4]
 9346 0090 1344     		add	r3, r3, r2
 9347 0092 FB60     		str	r3, [r7, #12]
5355:./Drivers/FreeRTOS/tasks.c **** 
 9348              		.loc 1 5355 17
 9349 0094 144B     		ldr	r3, .L525+4
 9350 0096 1B68     		ldr	r3, [r3]
 9351 0098 FA68     		ldr	r2, [r7, #12]
 9352 009a 5A60     		str	r2, [r3, #4]
5357:./Drivers/FreeRTOS/tasks.c ****                 {
 9353              		.loc 1 5357 19
 9354 009c FA68     		ldr	r2, [r7, #12]
 9355 009e 7B69     		ldr	r3, [r7, #20]
 9356 00a0 9A42     		cmp	r2, r3
 9357 00a2 09D2     		bcs	.L523
5361:./Drivers/FreeRTOS/tasks.c ****                 }
 9358              		.loc 1 5361 21
 9359 00a4 134B     		ldr	r3, .L525+16
 9360 00a6 1A68     		ldr	r2, [r3]
5361:./Drivers/FreeRTOS/tasks.c ****                 }
 9361              		.loc 1 5361 76
 9362 00a8 0F4B     		ldr	r3, .L525+4
 9363 00aa 1B68     		ldr	r3, [r3]
5361:./Drivers/FreeRTOS/tasks.c ****                 }
 9364              		.loc 1 5361 21
 9365 00ac 0433     		adds	r3, r3, #4
 9366 00ae 1946     		mov	r1, r3
 9367 00b0 1046     		mov	r0, r2
 9368 00b2 FFF7FEFF 		bl	vListInsert
 9369              		.loc 1 5420 1
 9370 00b6 10E0     		b	.L524
 9371              	.L523:
5367:./Drivers/FreeRTOS/tasks.c **** 
 9372              		.loc 1 5367 21
 9373 00b8 0F4B     		ldr	r3, .L525+20
 9374 00ba 1A68     		ldr	r2, [r3]
5367:./Drivers/FreeRTOS/tasks.c **** 
 9375              		.loc 1 5367 68
 9376 00bc 0A4B     		ldr	r3, .L525+4
 9377 00be 1B68     		ldr	r3, [r3]
5367:./Drivers/FreeRTOS/tasks.c **** 
 9378              		.loc 1 5367 21
 9379 00c0 0433     		adds	r3, r3, #4
 9380 00c2 1946     		mov	r1, r3
 9381 00c4 1046     		mov	r0, r2
 9382 00c6 FFF7FEFF 		bl	vListInsert
5372:./Drivers/FreeRTOS/tasks.c ****                     {
 9383              		.loc 1 5372 37
 9384 00ca 0C4B     		ldr	r3, .L525+24
 9385 00cc 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 265


5372:./Drivers/FreeRTOS/tasks.c ****                     {
 9386              		.loc 1 5372 23
 9387 00ce FA68     		ldr	r2, [r7, #12]
 9388 00d0 9A42     		cmp	r2, r3
 9389 00d2 02D2     		bcs	.L524
5374:./Drivers/FreeRTOS/tasks.c ****                     }
 9390              		.loc 1 5374 46
 9391 00d4 094A     		ldr	r2, .L525+24
 9392 00d6 FB68     		ldr	r3, [r7, #12]
 9393 00d8 1360     		str	r3, [r2]
 9394              	.L524:
 9395              		.loc 1 5420 1
 9396 00da 00BF     		nop
 9397 00dc 1837     		adds	r7, r7, #24
 9398              	.LCFI304:
 9399              		.cfi_def_cfa_offset 8
 9400 00de BD46     		mov	sp, r7
 9401              	.LCFI305:
 9402              		.cfi_def_cfa_register 13
 9403              		@ sp needed
 9404 00e0 80BD     		pop	{r7, pc}
 9405              	.L526:
 9406 00e2 00BF     		.align	2
 9407              	.L525:
 9408 00e4 00000000 		.word	xTickCount
 9409 00e8 00000000 		.word	pxCurrentTCB
 9410 00ec 00000000 		.word	uxTopReadyPriority
 9411 00f0 00000000 		.word	xSuspendedTaskList
 9412 00f4 00000000 		.word	pxOverflowDelayedTaskList
 9413 00f8 00000000 		.word	pxDelayedTaskList
 9414 00fc 00000000 		.word	xNextTaskUnblockTime
 9415              		.cfi_endproc
 9416              	.LFE64:
 9418              		.text
 9419              	.Letext0:
 9420              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\lib\\gcc\\arm-none-eabi\
 9421              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\arm-none-eabi\\include\\
 9422              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\arm-none-eabi\\include\\
 9423              		.file 6 "Drivers/FreeRTOS/include/projdefs.h"
 9424              		.file 7 "Drivers/FreeRTOS/include/list.h"
 9425              		.file 8 "Drivers/FreeRTOS/include/task.h"
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 266


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:22     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:19     .bss.pxCurrentTCB:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:25     .bss.pxReadyTasksLists:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:28     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:31     .bss.xDelayedTaskList1:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:34     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:37     .bss.xDelayedTaskList2:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:40     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:43     .bss.pxDelayedTaskList:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:46     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:49     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:52     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:55     .bss.xPendingReadyList:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:58     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:61     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:64     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:67     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:73     .bss.xSuspendedTaskList:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:76     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:79     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:82     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:85     .bss.xTickCount:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:88     .bss.xTickCount:00000000 xTickCount
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:91     .bss.uxTopReadyPriority:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:94     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:97     .bss.xSchedulerRunning:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:100    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:103    .bss.xPendedTicks:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:106    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:109    .bss.xYieldPending:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:112    .bss.xYieldPending:00000000 xYieldPending
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:115    .bss.xNumOfOverflows:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:118    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:121    .bss.uxTaskNumber:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:124    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:127    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:130    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:133    .bss.xIdleTaskHandle:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:136    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:143    .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:140    .data.uxTopUsedPriority:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:146    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:149    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:152    .text.xTaskCreate:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:160    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:271    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:524    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:265    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:518    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5797   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:713    .text.prvAddNewTaskToReadyList:00000110 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:724    .text.vTaskDelete:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:731    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6401   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 267


C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6354   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:926    .text.vTaskDelete:00000100 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:940    .text.xTaskDelayUntil:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:947    .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2917   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9249   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2964   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1156   .text.xTaskDelayUntil:000000f0 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1163   .text.vTaskDelay:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1170   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1263   .text.vTaskDelay:00000060 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1269   .text.eTaskGetState:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1276   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1455   .text.eTaskGetState:000000e0 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1464   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1471   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1526   .text.uxTaskPriorityGet:00000030 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1531   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1538   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1629   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1634   .text.vTaskPrioritySet:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1641   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1925   .text.vTaskPrioritySet:00000194 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1933   .text.vTaskSuspend:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:1940   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4191   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2163   .text.vTaskSuspend:00000120 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2175   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2181   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2274   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2280   .text.vTaskResume:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2287   .text.vTaskResume:00000000 vTaskResume
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2465   .text.vTaskResume:000000fc $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2473   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2480   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2696   .text.xTaskResumeFromISR:00000124 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2706   .rodata:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2710   .text.vTaskStartScheduler:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2717   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2833   .text.vTaskStartScheduler:00000088 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5735   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2844   .text.vTaskEndScheduler:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2851   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2905   .text.vTaskEndScheduler:0000002c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2910   .text.vTaskSuspendAll:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2952   .text.vTaskSuspendAll:00000018 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:2957   .text.xTaskResumeAll:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3820   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3287   .text.xTaskResumeAll:000001d4 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3300   .text.xTaskGetTickCount:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3307   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3347   .text.xTaskGetTickCount:0000001c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3352   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3359   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3400   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3405   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3412   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 268


C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3443   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3448   .text.pcTaskGetName:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3455   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3533   .text.pcTaskGetName:00000044 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3538   .text.uxTaskGetSystemState:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3545   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6151   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3718   .text.uxTaskGetSystemState:00000104 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3728   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3735   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3807   .text.xTaskCatchUpTicks:00000048 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:3813   .text.xTaskIncrementTick:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4169   .text.xTaskIncrementTick:00000200 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4184   .text.vTaskSwitchContext:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4334   .text.vTaskSwitchContext:000000a4 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4343   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4350   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4420   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4425   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4432   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4563   .text.vTaskPlaceOnUnorderedEventList:000000a4 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4569   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4576   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4682   .text.vTaskPlaceOnEventListRestricted:00000088 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4687   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4694   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4965   .text.xTaskRemoveFromEventList:00000194 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4975   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:4982   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5234   .text.vTaskRemoveFromUnorderedEventList:0000016c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5243   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5250   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5321   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5327   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5334   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5379   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5385   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5392   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5561   .text.xTaskCheckForTimeOut:000000c4 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5567   .text.vTaskMissedYield:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5574   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5606   .text.vTaskMissedYield:00000014 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5611   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5618   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5673   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5680   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5729   .text.prvIdleTask:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5893   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5785   .text.prvIdleTask:0000002c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5791   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5875   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5887   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5966   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5973   .text.vTaskGetInfo:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:5980   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6284   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6140   .text.vTaskGetInfo:000000c8 $d
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 269


C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6145   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6278   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6348   .text.prvDeleteTCB:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6395   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6452   .text.prvResetNextTaskUnblockTime:00000030 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6458   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6465   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6505   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6510   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6517   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6579   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6585   .text.xTaskPriorityInherit:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6592   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6796   .text.xTaskPriorityInherit:00000130 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6803   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:6810   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7033   .text.xTaskPriorityDisinherit:0000013c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7040   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7047   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7296   .text.vTaskPriorityDisinheritAfterTimeout:00000164 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7303   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7310   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7360   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7365   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7372   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7417   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7422   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7429   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7585   .text.ulTaskGenericNotifyTake:000000c8 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7591   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7598   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7784   .text.xTaskGenericNotifyWait:000000f8 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7790   .text.xTaskGenericNotify:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7797   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7913   .text.xTaskGenericNotify:0000008c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:7918   .text.xTaskGenericNotify:000000a0 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8185   .text.xTaskGenericNotify:00000230 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8194   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8201   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8339   .text.xTaskGenericNotifyFromISR:000000a8 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8344   .text.xTaskGenericNotifyFromISR:000000bc $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8664   .text.xTaskGenericNotifyFromISR:0000029c $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8675   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:8682   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9032   .text.vTaskGenericNotifyGiveFromISR:000001f4 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9042   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9049   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9153   .text.xTaskGenericNotifyStateClear:00000070 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9158   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9165   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9238   .text.ulTaskGenericNotifyValueClear:00000058 $d
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9243   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s:9408   .text.prvAddCurrentTaskToDelayedList:000000e4 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccSM8CXv.s 			page 270


memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsertEnd
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vApplicationIdleHook
vListInitialise
