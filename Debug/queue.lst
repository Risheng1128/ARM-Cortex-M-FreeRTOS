ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	xQueueRegistry
  18              		.section	.bss.xQueueRegistry,"aw",%nobits
  19              		.align	2
  22              	xQueueRegistry:
  23 0000 00000000 		.space	64
  23      00000000 
  23      00000000 
  23      00000000 
  23      00000000 
  24              		.section	.text.xQueueGenericReset,"ax",%progbits
  25              		.align	1
  26              		.global	xQueueGenericReset
  27              		.arch armv7e-m
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  31              		.fpu fpv4-sp-d16
  33              	xQueueGenericReset:
  34              	.LFB5:
  35              		.file 1 "./Drivers/FreeRTOS/queue.c"
   1:./Drivers/FreeRTOS/queue.c **** /*
   2:./Drivers/FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.4.6
   3:./Drivers/FreeRTOS/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./Drivers/FreeRTOS/queue.c ****  *
   5:./Drivers/FreeRTOS/queue.c ****  * SPDX-License-Identifier: MIT
   6:./Drivers/FreeRTOS/queue.c ****  *
   7:./Drivers/FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:./Drivers/FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:./Drivers/FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:./Drivers/FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:./Drivers/FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:./Drivers/FreeRTOS/queue.c ****  * subject to the following conditions:
  13:./Drivers/FreeRTOS/queue.c ****  *
  14:./Drivers/FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:./Drivers/FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  16:./Drivers/FreeRTOS/queue.c ****  *
  17:./Drivers/FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:./Drivers/FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:./Drivers/FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:./Drivers/FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:./Drivers/FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 2


  22:./Drivers/FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:./Drivers/FreeRTOS/queue.c ****  *
  24:./Drivers/FreeRTOS/queue.c ****  * https://www.FreeRTOS.org
  25:./Drivers/FreeRTOS/queue.c ****  * https://github.com/FreeRTOS
  26:./Drivers/FreeRTOS/queue.c ****  *
  27:./Drivers/FreeRTOS/queue.c ****  */
  28:./Drivers/FreeRTOS/queue.c **** 
  29:./Drivers/FreeRTOS/queue.c **** #include <stdlib.h>
  30:./Drivers/FreeRTOS/queue.c **** #include <string.h>
  31:./Drivers/FreeRTOS/queue.c **** 
  32:./Drivers/FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:./Drivers/FreeRTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:./Drivers/FreeRTOS/queue.c ****  * task.h is included from an application file. */
  35:./Drivers/FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:./Drivers/FreeRTOS/queue.c **** 
  37:./Drivers/FreeRTOS/queue.c **** #include "FreeRTOS.h"
  38:./Drivers/FreeRTOS/queue.c **** #include "task.h"
  39:./Drivers/FreeRTOS/queue.c **** #include "queue.h"
  40:./Drivers/FreeRTOS/queue.c **** 
  41:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:./Drivers/FreeRTOS/queue.c ****     #include "croutine.h"
  43:./Drivers/FreeRTOS/queue.c **** #endif
  44:./Drivers/FreeRTOS/queue.c **** 
  45:./Drivers/FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:./Drivers/FreeRTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:./Drivers/FreeRTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:./Drivers/FreeRTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:./Drivers/FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:./Drivers/FreeRTOS/queue.c **** 
  51:./Drivers/FreeRTOS/queue.c **** 
  52:./Drivers/FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:./Drivers/FreeRTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:./Drivers/FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:./Drivers/FreeRTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:./Drivers/FreeRTOS/queue.c **** 
  57:./Drivers/FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:./Drivers/FreeRTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:./Drivers/FreeRTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:./Drivers/FreeRTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:./Drivers/FreeRTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:./Drivers/FreeRTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:./Drivers/FreeRTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:./Drivers/FreeRTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:./Drivers/FreeRTOS/queue.c ****  * being used for. */
  66:./Drivers/FreeRTOS/queue.c **** #define uxQueueType               pcHead
  67:./Drivers/FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:./Drivers/FreeRTOS/queue.c **** 
  69:./Drivers/FreeRTOS/queue.c **** typedef struct QueuePointers
  70:./Drivers/FreeRTOS/queue.c **** {
  71:./Drivers/FreeRTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:./Drivers/FreeRTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:./Drivers/FreeRTOS/queue.c **** } QueuePointers_t;
  74:./Drivers/FreeRTOS/queue.c **** 
  75:./Drivers/FreeRTOS/queue.c **** typedef struct SemaphoreData
  76:./Drivers/FreeRTOS/queue.c **** {
  77:./Drivers/FreeRTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 3


  79:./Drivers/FreeRTOS/queue.c **** } SemaphoreData_t;
  80:./Drivers/FreeRTOS/queue.c **** 
  81:./Drivers/FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:./Drivers/FreeRTOS/queue.c ****  * zero. */
  83:./Drivers/FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:./Drivers/FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:./Drivers/FreeRTOS/queue.c **** 
  86:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:./Drivers/FreeRTOS/queue.c **** 
  88:./Drivers/FreeRTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  89:./Drivers/FreeRTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  90:./Drivers/FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:./Drivers/FreeRTOS/queue.c **** #else
  92:./Drivers/FreeRTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:./Drivers/FreeRTOS/queue.c **** #endif
  94:./Drivers/FreeRTOS/queue.c **** 
  95:./Drivers/FreeRTOS/queue.c **** /*
  96:./Drivers/FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  97:./Drivers/FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:./Drivers/FreeRTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:./Drivers/FreeRTOS/queue.c ****  */
 100:./Drivers/FreeRTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:./Drivers/FreeRTOS/queue.c **** {
 102:./Drivers/FreeRTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:./Drivers/FreeRTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:./Drivers/FreeRTOS/queue.c **** 
 105:./Drivers/FreeRTOS/queue.c ****     union
 106:./Drivers/FreeRTOS/queue.c ****     {
 107:./Drivers/FreeRTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:./Drivers/FreeRTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:./Drivers/FreeRTOS/queue.c ****     } u;
 110:./Drivers/FreeRTOS/queue.c **** 
 111:./Drivers/FreeRTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:./Drivers/FreeRTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:./Drivers/FreeRTOS/queue.c **** 
 114:./Drivers/FreeRTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:./Drivers/FreeRTOS/queue.c **** 
 118:./Drivers/FreeRTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:./Drivers/FreeRTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:./Drivers/FreeRTOS/queue.c **** 
 121:./Drivers/FreeRTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:./Drivers/FreeRTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:./Drivers/FreeRTOS/queue.c ****     #endif
 124:./Drivers/FreeRTOS/queue.c **** 
 125:./Drivers/FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:./Drivers/FreeRTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:./Drivers/FreeRTOS/queue.c ****     #endif
 128:./Drivers/FreeRTOS/queue.c **** 
 129:./Drivers/FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:./Drivers/FreeRTOS/queue.c ****         UBaseType_t uxQueueNumber;
 131:./Drivers/FreeRTOS/queue.c ****         uint8_t ucQueueType;
 132:./Drivers/FreeRTOS/queue.c ****     #endif
 133:./Drivers/FreeRTOS/queue.c **** } xQUEUE;
 134:./Drivers/FreeRTOS/queue.c **** 
 135:./Drivers/FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 4


 136:./Drivers/FreeRTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:./Drivers/FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 138:./Drivers/FreeRTOS/queue.c **** 
 139:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 140:./Drivers/FreeRTOS/queue.c **** 
 141:./Drivers/FreeRTOS/queue.c **** /*
 142:./Drivers/FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:./Drivers/FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:./Drivers/FreeRTOS/queue.c ****  */
 145:./Drivers/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 146:./Drivers/FreeRTOS/queue.c **** 
 147:./Drivers/FreeRTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:./Drivers/FreeRTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 149:./Drivers/FreeRTOS/queue.c ****  * more user friendly. */
 150:./Drivers/FreeRTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:./Drivers/FreeRTOS/queue.c ****     {
 152:./Drivers/FreeRTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:./Drivers/FreeRTOS/queue.c ****         QueueHandle_t xHandle;
 154:./Drivers/FreeRTOS/queue.c ****     } xQueueRegistryItem;
 155:./Drivers/FreeRTOS/queue.c **** 
 156:./Drivers/FreeRTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:./Drivers/FreeRTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:./Drivers/FreeRTOS/queue.c ****  * debuggers. */
 159:./Drivers/FreeRTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:./Drivers/FreeRTOS/queue.c **** 
 161:./Drivers/FreeRTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:./Drivers/FreeRTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:./Drivers/FreeRTOS/queue.c ****  * array position being vacant. */
 164:./Drivers/FreeRTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:./Drivers/FreeRTOS/queue.c **** 
 166:./Drivers/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:./Drivers/FreeRTOS/queue.c **** 
 168:./Drivers/FreeRTOS/queue.c **** /*
 169:./Drivers/FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:./Drivers/FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:./Drivers/FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:./Drivers/FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:./Drivers/FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:./Drivers/FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:./Drivers/FreeRTOS/queue.c ****  */
 176:./Drivers/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:./Drivers/FreeRTOS/queue.c **** 
 178:./Drivers/FreeRTOS/queue.c **** /*
 179:./Drivers/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:./Drivers/FreeRTOS/queue.c ****  *
 181:./Drivers/FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:./Drivers/FreeRTOS/queue.c ****  */
 183:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:./Drivers/FreeRTOS/queue.c **** 
 185:./Drivers/FreeRTOS/queue.c **** /*
 186:./Drivers/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:./Drivers/FreeRTOS/queue.c ****  *
 188:./Drivers/FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:./Drivers/FreeRTOS/queue.c ****  */
 190:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:./Drivers/FreeRTOS/queue.c **** 
 192:./Drivers/FreeRTOS/queue.c **** /*
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 5


 193:./Drivers/FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:./Drivers/FreeRTOS/queue.c ****  * back of the queue.
 195:./Drivers/FreeRTOS/queue.c ****  */
 196:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:./Drivers/FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
 198:./Drivers/FreeRTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:./Drivers/FreeRTOS/queue.c **** 
 200:./Drivers/FreeRTOS/queue.c **** /*
 201:./Drivers/FreeRTOS/queue.c ****  * Copies an item out of a queue.
 202:./Drivers/FreeRTOS/queue.c ****  */
 203:./Drivers/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:./Drivers/FreeRTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:./Drivers/FreeRTOS/queue.c **** 
 206:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:./Drivers/FreeRTOS/queue.c **** 
 208:./Drivers/FreeRTOS/queue.c **** /*
 209:./Drivers/FreeRTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:./Drivers/FreeRTOS/queue.c ****  * the queue set that the queue contains data.
 211:./Drivers/FreeRTOS/queue.c ****  */
 212:./Drivers/FreeRTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:./Drivers/FreeRTOS/queue.c **** #endif
 214:./Drivers/FreeRTOS/queue.c **** 
 215:./Drivers/FreeRTOS/queue.c **** /*
 216:./Drivers/FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:./Drivers/FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 218:./Drivers/FreeRTOS/queue.c ****  */
 219:./Drivers/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:./Drivers/FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 221:./Drivers/FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 222:./Drivers/FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 223:./Drivers/FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:./Drivers/FreeRTOS/queue.c **** 
 225:./Drivers/FreeRTOS/queue.c **** /*
 226:./Drivers/FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:./Drivers/FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:./Drivers/FreeRTOS/queue.c ****  * as a mutex.
 229:./Drivers/FreeRTOS/queue.c ****  */
 230:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:./Drivers/FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:./Drivers/FreeRTOS/queue.c **** #endif
 233:./Drivers/FreeRTOS/queue.c **** 
 234:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:./Drivers/FreeRTOS/queue.c **** 
 236:./Drivers/FreeRTOS/queue.c **** /*
 237:./Drivers/FreeRTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:./Drivers/FreeRTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:./Drivers/FreeRTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:./Drivers/FreeRTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:./Drivers/FreeRTOS/queue.c ****  * that priority.
 242:./Drivers/FreeRTOS/queue.c ****  */
 243:./Drivers/FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:./Drivers/FreeRTOS/queue.c **** #endif
 245:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 246:./Drivers/FreeRTOS/queue.c **** 
 247:./Drivers/FreeRTOS/queue.c **** /*
 248:./Drivers/FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:./Drivers/FreeRTOS/queue.c ****  * accessing the queue event lists.
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 6


 250:./Drivers/FreeRTOS/queue.c ****  */
 251:./Drivers/FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 253:./Drivers/FreeRTOS/queue.c ****     {                                                      \
 254:./Drivers/FreeRTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:./Drivers/FreeRTOS/queue.c ****         {                                                  \
 256:./Drivers/FreeRTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:./Drivers/FreeRTOS/queue.c ****         }                                                  \
 258:./Drivers/FreeRTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:./Drivers/FreeRTOS/queue.c ****         {                                                  \
 260:./Drivers/FreeRTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:./Drivers/FreeRTOS/queue.c ****         }                                                  \
 262:./Drivers/FreeRTOS/queue.c ****     }                                                      \
 263:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL()
 264:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 265:./Drivers/FreeRTOS/queue.c **** 
 266:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 267:./Drivers/FreeRTOS/queue.c ****                                BaseType_t xNewQueue )
 268:./Drivers/FreeRTOS/queue.c **** {
  36              		.loc 1 268 1
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 24
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40 0000 80B5     		push	{r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 86B0     		sub	sp, sp, #24
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 32
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
  52 0008 3960     		str	r1, [r7]
 269:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn = pdPASS;
  53              		.loc 1 269 16
  54 000a 0123     		movs	r3, #1
  55 000c 7B61     		str	r3, [r7, #20]
 270:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
  56              		.loc 1 270 21
  57 000e 7B68     		ldr	r3, [r7, #4]
  58 0010 3B61     		str	r3, [r7, #16]
 271:./Drivers/FreeRTOS/queue.c **** 
 272:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
  59              		.loc 1 272 5
  60 0012 3B69     		ldr	r3, [r7, #16]
  61 0014 002B     		cmp	r3, #0
  62 0016 0AD1     		bne	.L2
  63              	.LBB113:
  64              	.LBB114:
  65              		.file 2 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 7


   5:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
   7:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  13:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  14:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  16:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  17:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  24:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://www.FreeRTOS.org
  25:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * https://github.com/FreeRTOS
  26:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  27:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  28:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  30:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  31:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define PORTMACRO_H
  32:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  33:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef __cplusplus
  34:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern "C" {
  35:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  36:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  37:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  38:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  39:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  40:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  42:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  43:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  44:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  45:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  46:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  48:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCHAR          char
  49:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portFLOAT         float
  50:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDOUBLE        double
  51:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portLONG          long
  52:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSHORT         short
  53:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBASE_TYPE     long
  55:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef long             BaseType_t;
  58:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  60:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint16_t     TickType_t;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 8


  62:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #else
  64:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
  71:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  72:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  73:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  74:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  79:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  80:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  81:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD()                                 \
  82:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {                                                   \
  83:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****                                                         \
  86:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  91:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  92:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  97:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  98:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  99:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     extern void vPortExitCritical( void );
 101:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 109:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 110:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * (which build with all the ports) will build. */
 113:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 116:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 117:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 9


 119:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 122:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 123:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 124:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 125:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 128:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 131:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Generic helper function. */
 132:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 134:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             uint8_t ucReturn;
 135:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 136:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             return ucReturn;
 139:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 140:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 141:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Check the configuration. */
 142:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #endif
 145:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 146:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 152:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 154:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 156:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 158:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifdef configASSERT
 159:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 162:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portNOP()
 165:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 166:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #define portINLINE              __inline
 167:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 168:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     #endif
 171:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 172:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 173:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 174:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulCurrentInterrupt;
 175:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         BaseType_t xReturn;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 10


 176:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 178:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 179:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 181:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 182:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdFALSE;
 183:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 184:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         else
 185:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         {
 186:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             xReturn = pdTRUE;
 187:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         }
 188:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return xReturn;
 190:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 191:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 192:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 193:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 194:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 195:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 196:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulNewBASEPRI;
 197:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
  66              		.loc 2 198 9
  67              		.syntax unified
  68              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
  69 0018 4FF05003 			mov r3, #80												
  70 001c 83F31188 		msr basepri, r3											
  71 0020 BFF36F8F 		isb														
  72 0024 BFF34F8F 		dsb														
  73              	
  74              	@ 0 "" 2
  75              		.thumb
  76              		.syntax unified
  77 0028 FB60     		str	r3, [r7, #12]
 199:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 200:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %0, %1												\n"\
 201:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0											\n"\
 202:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 203:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 204:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 205:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
  78              		.loc 2 206 5
  79 002a 00BF     		nop
  80              	.L3:
  81              	.LBE114:
  82              	.LBE113:
  83              		.loc 1 272 5 discriminator 1
  84 002c FEE7     		b	.L3
  85              	.L2:
 273:./Drivers/FreeRTOS/queue.c **** 
 274:./Drivers/FreeRTOS/queue.c ****     if( ( pxQueue != NULL ) &&
  86              		.loc 1 274 7
  87 002e 3B69     		ldr	r3, [r7, #16]
  88 0030 002B     		cmp	r3, #0
  89 0032 5DD0     		beq	.L4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 11


 275:./Drivers/FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
  90              		.loc 1 275 18 discriminator 1
  91 0034 3B69     		ldr	r3, [r7, #16]
  92 0036 DB6B     		ldr	r3, [r3, #60]
 274:./Drivers/FreeRTOS/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
  93              		.loc 1 274 29 discriminator 1
  94 0038 002B     		cmp	r3, #0
  95 003a 59D0     		beq	.L4
 276:./Drivers/FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 277:./Drivers/FreeRTOS/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
  96              		.loc 1 277 54
  97 003c 3B69     		ldr	r3, [r7, #16]
  98 003e 1A6C     		ldr	r2, [r3, #64]
  99              		.loc 1 277 31
 100 0040 3B69     		ldr	r3, [r7, #16]
 101 0042 DB6B     		ldr	r3, [r3, #60]
 102              		.loc 1 277 44
 103 0044 0021     		movs	r1, #0
 104 0046 A3FB0223 		umull	r2, r3, r3, r2
 105 004a 002B     		cmp	r3, #0
 106 004c 00D0     		beq	.L5
 107 004e 0121     		movs	r1, #1
 108              	.L5:
 109 0050 0B46     		mov	r3, r1
 275:./Drivers/FreeRTOS/queue.c ****         /* Check for multiplication overflow. */
 110              		.loc 1 275 37
 111 0052 002B     		cmp	r3, #0
 112 0054 4CD1     		bne	.L4
 278:./Drivers/FreeRTOS/queue.c ****     {
 279:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 113              		.loc 1 279 9
 114 0056 FFF7FEFF 		bl	vPortEnterCritical
 280:./Drivers/FreeRTOS/queue.c ****         {
 281:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 115              		.loc 1 281 47
 116 005a 3B69     		ldr	r3, [r7, #16]
 117 005c 1A68     		ldr	r2, [r3]
 118              		.loc 1 281 67
 119 005e 3B69     		ldr	r3, [r7, #16]
 120 0060 DB6B     		ldr	r3, [r3, #60]
 121              		.loc 1 281 87
 122 0062 3969     		ldr	r1, [r7, #16]
 123 0064 096C     		ldr	r1, [r1, #64]
 124              		.loc 1 281 78
 125 0066 01FB03F3 		mul	r3, r1, r3
 126              		.loc 1 281 56
 127 006a 1A44     		add	r2, r2, r3
 128              		.loc 1 281 38
 129 006c 3B69     		ldr	r3, [r7, #16]
 130 006e 9A60     		str	r2, [r3, #8]
 282:./Drivers/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 131              		.loc 1 282 40
 132 0070 3B69     		ldr	r3, [r7, #16]
 133 0072 0022     		movs	r2, #0
 134 0074 9A63     		str	r2, [r3, #56]
 283:./Drivers/FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 135              		.loc 1 283 41
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 12


 136 0076 3B69     		ldr	r3, [r7, #16]
 137 0078 1A68     		ldr	r2, [r3]
 138              		.loc 1 283 32
 139 007a 3B69     		ldr	r3, [r7, #16]
 140 007c 5A60     		str	r2, [r3, #4]
 284:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 141              		.loc 1 284 51
 142 007e 3B69     		ldr	r3, [r7, #16]
 143 0080 1A68     		ldr	r2, [r3]
 144              		.loc 1 284 73
 145 0082 3B69     		ldr	r3, [r7, #16]
 146 0084 DB6B     		ldr	r3, [r3, #60]
 147              		.loc 1 284 84
 148 0086 013B     		subs	r3, r3, #1
 149              		.loc 1 284 100
 150 0088 3969     		ldr	r1, [r7, #16]
 151 008a 096C     		ldr	r1, [r1, #64]
 152              		.loc 1 284 91
 153 008c 01FB03F3 		mul	r3, r1, r3
 154              		.loc 1 284 60
 155 0090 1A44     		add	r2, r2, r3
 156              		.loc 1 284 42
 157 0092 3B69     		ldr	r3, [r7, #16]
 158 0094 DA60     		str	r2, [r3, #12]
 285:./Drivers/FreeRTOS/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 159              		.loc 1 285 30
 160 0096 3B69     		ldr	r3, [r7, #16]
 161 0098 FF22     		movs	r2, #255
 162 009a 83F84420 		strb	r2, [r3, #68]
 286:./Drivers/FreeRTOS/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 163              		.loc 1 286 30
 164 009e 3B69     		ldr	r3, [r7, #16]
 165 00a0 FF22     		movs	r2, #255
 166 00a2 83F84520 		strb	r2, [r3, #69]
 287:./Drivers/FreeRTOS/queue.c **** 
 288:./Drivers/FreeRTOS/queue.c ****             if( xNewQueue == pdFALSE )
 167              		.loc 1 288 15
 168 00a6 3B68     		ldr	r3, [r7]
 169 00a8 002B     		cmp	r3, #0
 170 00aa 14D1     		bne	.L7
 289:./Drivers/FreeRTOS/queue.c ****             {
 290:./Drivers/FreeRTOS/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 291:./Drivers/FreeRTOS/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 292:./Drivers/FreeRTOS/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 293:./Drivers/FreeRTOS/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 294:./Drivers/FreeRTOS/queue.c ****                  * it will be possible to write to it. */
 295:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 171              		.loc 1 295 21
 172 00ac 3B69     		ldr	r3, [r7, #16]
 173 00ae 1B69     		ldr	r3, [r3, #16]
 174              		.loc 1 295 19
 175 00b0 002B     		cmp	r3, #0
 176 00b2 1AD0     		beq	.L8
 296:./Drivers/FreeRTOS/queue.c ****                 {
 297:./Drivers/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 177              		.loc 1 297 51
 178 00b4 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 13


 179 00b6 1033     		adds	r3, r3, #16
 180              		.loc 1 297 25
 181 00b8 1846     		mov	r0, r3
 182 00ba FFF7FEFF 		bl	xTaskRemoveFromEventList
 183 00be 0346     		mov	r3, r0
 184              		.loc 1 297 23
 185 00c0 002B     		cmp	r3, #0
 186 00c2 12D0     		beq	.L8
 298:./Drivers/FreeRTOS/queue.c ****                     {
 299:./Drivers/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 187              		.loc 1 299 25
 188 00c4 154B     		ldr	r3, .L13
 189 00c6 4FF08052 		mov	r2, #268435456
 190 00ca 1A60     		str	r2, [r3]
 191              		.syntax unified
 192              	@ 299 "./Drivers/FreeRTOS/queue.c" 1
 193 00cc BFF34F8F 		dsb
 194              	@ 0 "" 2
 195              	@ 299 "./Drivers/FreeRTOS/queue.c" 1
 196 00d0 BFF36F8F 		isb
 197              	@ 0 "" 2
 198              		.thumb
 199              		.syntax unified
 200 00d4 09E0     		b	.L8
 201              	.L7:
 300:./Drivers/FreeRTOS/queue.c ****                     }
 301:./Drivers/FreeRTOS/queue.c ****                     else
 302:./Drivers/FreeRTOS/queue.c ****                     {
 303:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 304:./Drivers/FreeRTOS/queue.c ****                     }
 305:./Drivers/FreeRTOS/queue.c ****                 }
 306:./Drivers/FreeRTOS/queue.c ****                 else
 307:./Drivers/FreeRTOS/queue.c ****                 {
 308:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 309:./Drivers/FreeRTOS/queue.c ****                 }
 310:./Drivers/FreeRTOS/queue.c ****             }
 311:./Drivers/FreeRTOS/queue.c ****             else
 312:./Drivers/FreeRTOS/queue.c ****             {
 313:./Drivers/FreeRTOS/queue.c ****                 /* Ensure the event queues start in the correct state. */
 314:./Drivers/FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 202              		.loc 1 314 17
 203 00d6 3B69     		ldr	r3, [r7, #16]
 204 00d8 1033     		adds	r3, r3, #16
 205 00da 1846     		mov	r0, r3
 206 00dc FFF7FEFF 		bl	vListInitialise
 315:./Drivers/FreeRTOS/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 207              		.loc 1 315 17
 208 00e0 3B69     		ldr	r3, [r7, #16]
 209 00e2 2433     		adds	r3, r3, #36
 210 00e4 1846     		mov	r0, r3
 211 00e6 FFF7FEFF 		bl	vListInitialise
 212              	.L8:
 316:./Drivers/FreeRTOS/queue.c ****             }
 317:./Drivers/FreeRTOS/queue.c ****         }
 318:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 213              		.loc 1 318 9
 214 00ea FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 14


 215 00ee 01E0     		b	.L9
 216              	.L4:
 319:./Drivers/FreeRTOS/queue.c ****     }
 320:./Drivers/FreeRTOS/queue.c ****     else
 321:./Drivers/FreeRTOS/queue.c ****     {
 322:./Drivers/FreeRTOS/queue.c ****         xReturn = pdFAIL;
 217              		.loc 1 322 17
 218 00f0 0023     		movs	r3, #0
 219 00f2 7B61     		str	r3, [r7, #20]
 220              	.L9:
 323:./Drivers/FreeRTOS/queue.c ****     }
 324:./Drivers/FreeRTOS/queue.c **** 
 325:./Drivers/FreeRTOS/queue.c ****     configASSERT( xReturn != pdFAIL );
 221              		.loc 1 325 5
 222 00f4 7B69     		ldr	r3, [r7, #20]
 223 00f6 002B     		cmp	r3, #0
 224 00f8 0AD1     		bne	.L10
 225              	.LBB115:
 226              	.LBB116:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 227              		.loc 2 198 9
 228              		.syntax unified
 229              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 230 00fa 4FF05003 			mov r3, #80												
 231 00fe 83F31188 		msr basepri, r3											
 232 0102 BFF36F8F 		isb														
 233 0106 BFF34F8F 		dsb														
 234              	
 235              	@ 0 "" 2
 236              		.thumb
 237              		.syntax unified
 238 010a BB60     		str	r3, [r7, #8]
 239              		.loc 2 206 5
 240 010c 00BF     		nop
 241              	.L11:
 242              	.LBE116:
 243              	.LBE115:
 244              		.loc 1 325 5 discriminator 3
 245 010e FEE7     		b	.L11
 246              	.L10:
 326:./Drivers/FreeRTOS/queue.c **** 
 327:./Drivers/FreeRTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 328:./Drivers/FreeRTOS/queue.c ****      * versions. */
 329:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 247              		.loc 1 329 12
 248 0110 7B69     		ldr	r3, [r7, #20]
 330:./Drivers/FreeRTOS/queue.c **** }
 249              		.loc 1 330 1
 250 0112 1846     		mov	r0, r3
 251 0114 1837     		adds	r7, r7, #24
 252              	.LCFI3:
 253              		.cfi_def_cfa_offset 8
 254 0116 BD46     		mov	sp, r7
 255              	.LCFI4:
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0118 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 15


 259              	.L14:
 260 011a 00BF     		.align	2
 261              	.L13:
 262 011c 04ED00E0 		.word	-536810236
 263              		.cfi_endproc
 264              	.LFE5:
 266              		.section	.text.xQueueGenericCreate,"ax",%progbits
 267              		.align	1
 268              		.global	xQueueGenericCreate
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	xQueueGenericCreate:
 275              	.LFB6:
 331:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 332:./Drivers/FreeRTOS/queue.c **** 
 333:./Drivers/FreeRTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 334:./Drivers/FreeRTOS/queue.c **** 
 335:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 336:./Drivers/FreeRTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 337:./Drivers/FreeRTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 338:./Drivers/FreeRTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 339:./Drivers/FreeRTOS/queue.c ****                                              const uint8_t ucQueueType )
 340:./Drivers/FreeRTOS/queue.c ****     {
 341:./Drivers/FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 342:./Drivers/FreeRTOS/queue.c **** 
 343:./Drivers/FreeRTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 344:./Drivers/FreeRTOS/queue.c ****          * supplied. */
 345:./Drivers/FreeRTOS/queue.c ****         configASSERT( pxStaticQueue );
 346:./Drivers/FreeRTOS/queue.c **** 
 347:./Drivers/FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 348:./Drivers/FreeRTOS/queue.c ****             ( pxStaticQueue != NULL ) &&
 349:./Drivers/FreeRTOS/queue.c **** 
 350:./Drivers/FreeRTOS/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 351:./Drivers/FreeRTOS/queue.c ****              * should not be provided if the item size is 0. */
 352:./Drivers/FreeRTOS/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 353:./Drivers/FreeRTOS/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 354:./Drivers/FreeRTOS/queue.c ****         {
 355:./Drivers/FreeRTOS/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 356:./Drivers/FreeRTOS/queue.c ****                 {
 357:./Drivers/FreeRTOS/queue.c ****                     /* Sanity check that the size of the structure used to declare a
 358:./Drivers/FreeRTOS/queue.c ****                      * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 359:./Drivers/FreeRTOS/queue.c ****                      * the real queue and semaphore structures. */
 360:./Drivers/FreeRTOS/queue.c ****                     volatile size_t xSize = sizeof( StaticQueue_t );
 361:./Drivers/FreeRTOS/queue.c **** 
 362:./Drivers/FreeRTOS/queue.c ****                     /* This assertion cannot be branch covered in unit tests */
 363:./Drivers/FreeRTOS/queue.c ****                     configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 364:./Drivers/FreeRTOS/queue.c ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 365:./Drivers/FreeRTOS/queue.c ****                 }
 366:./Drivers/FreeRTOS/queue.c ****             #endif /* configASSERT_DEFINED */
 367:./Drivers/FreeRTOS/queue.c **** 
 368:./Drivers/FreeRTOS/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 369:./Drivers/FreeRTOS/queue.c ****              * The address of a statically allocated storage area was also passed in
 370:./Drivers/FreeRTOS/queue.c ****              * but is already set. */
 371:./Drivers/FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 372:./Drivers/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 16


 373:./Drivers/FreeRTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:./Drivers/FreeRTOS/queue.c ****                 {
 375:./Drivers/FreeRTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 376:./Drivers/FreeRTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
 377:./Drivers/FreeRTOS/queue.c ****                      * later deleted. */
 378:./Drivers/FreeRTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 379:./Drivers/FreeRTOS/queue.c ****                 }
 380:./Drivers/FreeRTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 381:./Drivers/FreeRTOS/queue.c **** 
 382:./Drivers/FreeRTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 383:./Drivers/FreeRTOS/queue.c ****         }
 384:./Drivers/FreeRTOS/queue.c ****         else
 385:./Drivers/FreeRTOS/queue.c ****         {
 386:./Drivers/FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 387:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 388:./Drivers/FreeRTOS/queue.c ****         }
 389:./Drivers/FreeRTOS/queue.c **** 
 390:./Drivers/FreeRTOS/queue.c ****         return pxNewQueue;
 391:./Drivers/FreeRTOS/queue.c ****     }
 392:./Drivers/FreeRTOS/queue.c **** 
 393:./Drivers/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 394:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 395:./Drivers/FreeRTOS/queue.c **** 
 396:./Drivers/FreeRTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 397:./Drivers/FreeRTOS/queue.c **** 
 398:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 399:./Drivers/FreeRTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 400:./Drivers/FreeRTOS/queue.c ****                                        const uint8_t ucQueueType )
 401:./Drivers/FreeRTOS/queue.c ****     {
 276              		.loc 1 401 5
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 32
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 80B5     		push	{r7, lr}
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 8AB0     		sub	sp, sp, #40
 286              	.LCFI6:
 287              		.cfi_def_cfa_offset 48
 288 0004 02AF     		add	r7, sp, #8
 289              	.LCFI7:
 290              		.cfi_def_cfa 7, 40
 291 0006 F860     		str	r0, [r7, #12]
 292 0008 B960     		str	r1, [r7, #8]
 293 000a 1346     		mov	r3, r2
 294 000c FB71     		strb	r3, [r7, #7]
 402:./Drivers/FreeRTOS/queue.c ****         Queue_t * pxNewQueue = NULL;
 295              		.loc 1 402 19
 296 000e 0023     		movs	r3, #0
 297 0010 FB61     		str	r3, [r7, #28]
 403:./Drivers/FreeRTOS/queue.c ****         size_t xQueueSizeInBytes;
 404:./Drivers/FreeRTOS/queue.c ****         uint8_t * pucQueueStorage;
 405:./Drivers/FreeRTOS/queue.c **** 
 406:./Drivers/FreeRTOS/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 298              		.loc 1 406 11
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 17


 299 0012 FB68     		ldr	r3, [r7, #12]
 300 0014 002B     		cmp	r3, #0
 301 0016 2ED0     		beq	.L16
 407:./Drivers/FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 408:./Drivers/FreeRTOS/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 302              		.loc 1 408 44 discriminator 1
 303 0018 0021     		movs	r1, #0
 304 001a BA68     		ldr	r2, [r7, #8]
 305 001c FB68     		ldr	r3, [r7, #12]
 306 001e A3FB0223 		umull	r2, r3, r3, r2
 307 0022 002B     		cmp	r3, #0
 308 0024 00D0     		beq	.L17
 309 0026 0121     		movs	r1, #1
 310              	.L17:
 311 0028 0B46     		mov	r3, r1
 406:./Drivers/FreeRTOS/queue.c ****             /* Check for multiplication overflow. */
 312              		.loc 1 406 51 discriminator 1
 313 002a 002B     		cmp	r3, #0
 314 002c 23D1     		bne	.L16
 409:./Drivers/FreeRTOS/queue.c ****             /* Check for addition overflow. */
 410:./Drivers/FreeRTOS/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 315              		.loc 1 410 67
 316 002e FB68     		ldr	r3, [r7, #12]
 317 0030 BA68     		ldr	r2, [r7, #8]
 318 0032 02FB03F3 		mul	r3, r2, r3
 408:./Drivers/FreeRTOS/queue.c ****             /* Check for addition overflow. */
 319              		.loc 1 408 60
 320 0036 13F1510F 		cmn	r3, #81
 321 003a 1CD8     		bhi	.L16
 411:./Drivers/FreeRTOS/queue.c ****         {
 412:./Drivers/FreeRTOS/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 413:./Drivers/FreeRTOS/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 414:./Drivers/FreeRTOS/queue.c ****              * zero in the case the queue is used as a semaphore. */
 415:./Drivers/FreeRTOS/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 322              		.loc 1 415 31
 323 003c FB68     		ldr	r3, [r7, #12]
 324 003e BA68     		ldr	r2, [r7, #8]
 325 0040 02FB03F3 		mul	r3, r2, r3
 326 0044 BB61     		str	r3, [r7, #24]
 416:./Drivers/FreeRTOS/queue.c **** 
 417:./Drivers/FreeRTOS/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 418:./Drivers/FreeRTOS/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 419:./Drivers/FreeRTOS/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 420:./Drivers/FreeRTOS/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 421:./Drivers/FreeRTOS/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 422:./Drivers/FreeRTOS/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 423:./Drivers/FreeRTOS/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 424:./Drivers/FreeRTOS/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 425:./Drivers/FreeRTOS/queue.c ****              * two bytes). */
 426:./Drivers/FreeRTOS/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 327              		.loc 1 426 40
 328 0046 BB69     		ldr	r3, [r7, #24]
 329 0048 5033     		adds	r3, r3, #80
 330 004a 1846     		mov	r0, r3
 331 004c FFF7FEFF 		bl	pvPortMalloc
 332 0050 F861     		str	r0, [r7, #28]
 427:./Drivers/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 18


 428:./Drivers/FreeRTOS/queue.c ****             if( pxNewQueue != NULL )
 333              		.loc 1 428 15
 334 0052 FB69     		ldr	r3, [r7, #28]
 335 0054 002B     		cmp	r3, #0
 336 0056 1CD0     		beq	.L20
 429:./Drivers/FreeRTOS/queue.c ****             {
 430:./Drivers/FreeRTOS/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 431:./Drivers/FreeRTOS/queue.c ****                  * storage area. */
 432:./Drivers/FreeRTOS/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 337              		.loc 1 432 33
 338 0058 FB69     		ldr	r3, [r7, #28]
 339 005a 7B61     		str	r3, [r7, #20]
 433:./Drivers/FreeRTOS/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 340              		.loc 1 433 33
 341 005c 7B69     		ldr	r3, [r7, #20]
 342 005e 5033     		adds	r3, r3, #80
 343 0060 7B61     		str	r3, [r7, #20]
 434:./Drivers/FreeRTOS/queue.c **** 
 435:./Drivers/FreeRTOS/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 436:./Drivers/FreeRTOS/queue.c ****                     {
 437:./Drivers/FreeRTOS/queue.c ****                         /* Queues can be created either statically or dynamically, so
 438:./Drivers/FreeRTOS/queue.c ****                          * note this task was created dynamically in case it is later
 439:./Drivers/FreeRTOS/queue.c ****                          * deleted. */
 440:./Drivers/FreeRTOS/queue.c ****                         pxNewQueue->ucStaticallyAllocated = pdFALSE;
 441:./Drivers/FreeRTOS/queue.c ****                     }
 442:./Drivers/FreeRTOS/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 443:./Drivers/FreeRTOS/queue.c **** 
 444:./Drivers/FreeRTOS/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 344              		.loc 1 444 17
 345 0062 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 346 0064 FB69     		ldr	r3, [r7, #28]
 347 0066 0093     		str	r3, [sp]
 348 0068 1346     		mov	r3, r2
 349 006a 7A69     		ldr	r2, [r7, #20]
 350 006c B968     		ldr	r1, [r7, #8]
 351 006e F868     		ldr	r0, [r7, #12]
 352 0070 FFF7FEFF 		bl	prvInitialiseNewQueue
 428:./Drivers/FreeRTOS/queue.c ****             {
 353              		.loc 1 428 15
 354 0074 0DE0     		b	.L20
 355              	.L16:
 445:./Drivers/FreeRTOS/queue.c ****             }
 446:./Drivers/FreeRTOS/queue.c ****             else
 447:./Drivers/FreeRTOS/queue.c ****             {
 448:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 449:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 450:./Drivers/FreeRTOS/queue.c ****             }
 451:./Drivers/FreeRTOS/queue.c ****         }
 452:./Drivers/FreeRTOS/queue.c ****         else
 453:./Drivers/FreeRTOS/queue.c ****         {
 454:./Drivers/FreeRTOS/queue.c ****             configASSERT( pxNewQueue );
 356              		.loc 1 454 13
 357 0076 FB69     		ldr	r3, [r7, #28]
 358 0078 002B     		cmp	r3, #0
 359 007a 0AD1     		bne	.L20
 360              	.LBB117:
 361              	.LBB118:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 19


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 362              		.loc 2 198 9
 363              		.syntax unified
 364              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 365 007c 4FF05003 			mov r3, #80												
 366 0080 83F31188 		msr basepri, r3											
 367 0084 BFF36F8F 		isb														
 368 0088 BFF34F8F 		dsb														
 369              	
 370              	@ 0 "" 2
 371              		.thumb
 372              		.syntax unified
 373 008c 3B61     		str	r3, [r7, #16]
 374              		.loc 2 206 5
 375 008e 00BF     		nop
 376              	.L21:
 377              	.LBE118:
 378              	.LBE117:
 379              		.loc 1 454 13 discriminator 1
 380 0090 FEE7     		b	.L21
 381              	.L20:
 455:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 456:./Drivers/FreeRTOS/queue.c ****         }
 457:./Drivers/FreeRTOS/queue.c **** 
 458:./Drivers/FreeRTOS/queue.c ****         return pxNewQueue;
 382              		.loc 1 458 16
 383 0092 FB69     		ldr	r3, [r7, #28]
 459:./Drivers/FreeRTOS/queue.c ****     }
 384              		.loc 1 459 5
 385 0094 1846     		mov	r0, r3
 386 0096 2037     		adds	r7, r7, #32
 387              	.LCFI8:
 388              		.cfi_def_cfa_offset 8
 389 0098 BD46     		mov	sp, r7
 390              	.LCFI9:
 391              		.cfi_def_cfa_register 13
 392              		@ sp needed
 393 009a 80BD     		pop	{r7, pc}
 394              		.cfi_endproc
 395              	.LFE6:
 397              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 398              		.align	1
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv4-sp-d16
 404              	prvInitialiseNewQueue:
 405              	.LFB7:
 460:./Drivers/FreeRTOS/queue.c **** 
 461:./Drivers/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 462:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 463:./Drivers/FreeRTOS/queue.c **** 
 464:./Drivers/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 465:./Drivers/FreeRTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 466:./Drivers/FreeRTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 467:./Drivers/FreeRTOS/queue.c ****                                    const uint8_t ucQueueType,
 468:./Drivers/FreeRTOS/queue.c ****                                    Queue_t * pxNewQueue )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 20


 469:./Drivers/FreeRTOS/queue.c **** {
 406              		.loc 1 469 1
 407              		.cfi_startproc
 408              		@ args = 4, pretend = 0, frame = 16
 409              		@ frame_needed = 1, uses_anonymous_args = 0
 410 0000 80B5     		push	{r7, lr}
 411              	.LCFI10:
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 415 0002 84B0     		sub	sp, sp, #16
 416              	.LCFI11:
 417              		.cfi_def_cfa_offset 24
 418 0004 00AF     		add	r7, sp, #0
 419              	.LCFI12:
 420              		.cfi_def_cfa_register 7
 421 0006 F860     		str	r0, [r7, #12]
 422 0008 B960     		str	r1, [r7, #8]
 423 000a 7A60     		str	r2, [r7, #4]
 424 000c FB70     		strb	r3, [r7, #3]
 470:./Drivers/FreeRTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 471:./Drivers/FreeRTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 472:./Drivers/FreeRTOS/queue.c ****     ( void ) ucQueueType;
 473:./Drivers/FreeRTOS/queue.c **** 
 474:./Drivers/FreeRTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 425              		.loc 1 474 7
 426 000e BB68     		ldr	r3, [r7, #8]
 427 0010 002B     		cmp	r3, #0
 428 0012 03D1     		bne	.L24
 475:./Drivers/FreeRTOS/queue.c ****     {
 476:./Drivers/FreeRTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 477:./Drivers/FreeRTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 478:./Drivers/FreeRTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 479:./Drivers/FreeRTOS/queue.c ****          * value that is known to be within the memory map. */
 480:./Drivers/FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 429              		.loc 1 480 28
 430 0014 BB69     		ldr	r3, [r7, #24]
 431 0016 BA69     		ldr	r2, [r7, #24]
 432 0018 1A60     		str	r2, [r3]
 433 001a 02E0     		b	.L25
 434              	.L24:
 481:./Drivers/FreeRTOS/queue.c ****     }
 482:./Drivers/FreeRTOS/queue.c ****     else
 483:./Drivers/FreeRTOS/queue.c ****     {
 484:./Drivers/FreeRTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 485:./Drivers/FreeRTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 435              		.loc 1 485 28
 436 001c BB69     		ldr	r3, [r7, #24]
 437 001e 7A68     		ldr	r2, [r7, #4]
 438 0020 1A60     		str	r2, [r3]
 439              	.L25:
 486:./Drivers/FreeRTOS/queue.c ****     }
 487:./Drivers/FreeRTOS/queue.c **** 
 488:./Drivers/FreeRTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 489:./Drivers/FreeRTOS/queue.c ****      * defined. */
 490:./Drivers/FreeRTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 440              		.loc 1 490 26
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 21


 441 0022 BB69     		ldr	r3, [r7, #24]
 442 0024 FA68     		ldr	r2, [r7, #12]
 443 0026 DA63     		str	r2, [r3, #60]
 491:./Drivers/FreeRTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 444              		.loc 1 491 28
 445 0028 BB69     		ldr	r3, [r7, #24]
 446 002a BA68     		ldr	r2, [r7, #8]
 447 002c 1A64     		str	r2, [r3, #64]
 492:./Drivers/FreeRTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 448              		.loc 1 492 14
 449 002e 0121     		movs	r1, #1
 450 0030 B869     		ldr	r0, [r7, #24]
 451 0032 FFF7FEFF 		bl	xQueueGenericReset
 493:./Drivers/FreeRTOS/queue.c **** 
 494:./Drivers/FreeRTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 495:./Drivers/FreeRTOS/queue.c ****         {
 496:./Drivers/FreeRTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 452              		.loc 1 496 37
 453 0036 BB69     		ldr	r3, [r7, #24]
 454 0038 FA78     		ldrb	r2, [r7, #3]
 455 003a 83F84C20 		strb	r2, [r3, #76]
 497:./Drivers/FreeRTOS/queue.c ****         }
 498:./Drivers/FreeRTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 499:./Drivers/FreeRTOS/queue.c **** 
 500:./Drivers/FreeRTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 501:./Drivers/FreeRTOS/queue.c ****         {
 502:./Drivers/FreeRTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 503:./Drivers/FreeRTOS/queue.c ****         }
 504:./Drivers/FreeRTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 505:./Drivers/FreeRTOS/queue.c **** 
 506:./Drivers/FreeRTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 507:./Drivers/FreeRTOS/queue.c **** }
 456              		.loc 1 507 1
 457 003e 00BF     		nop
 458 0040 1037     		adds	r7, r7, #16
 459              	.LCFI13:
 460              		.cfi_def_cfa_offset 8
 461 0042 BD46     		mov	sp, r7
 462              	.LCFI14:
 463              		.cfi_def_cfa_register 13
 464              		@ sp needed
 465 0044 80BD     		pop	{r7, pc}
 466              		.cfi_endproc
 467              	.LFE7:
 469              		.section	.text.prvInitialiseMutex,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	prvInitialiseMutex:
 477              	.LFB8:
 508:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 509:./Drivers/FreeRTOS/queue.c **** 
 510:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 511:./Drivers/FreeRTOS/queue.c **** 
 512:./Drivers/FreeRTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 22


 513:./Drivers/FreeRTOS/queue.c ****     {
 478              		.loc 1 513 5
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 8
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482 0000 80B5     		push	{r7, lr}
 483              	.LCFI15:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 82B0     		sub	sp, sp, #8
 488              	.LCFI16:
 489              		.cfi_def_cfa_offset 16
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI17:
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 514:./Drivers/FreeRTOS/queue.c ****         if( pxNewQueue != NULL )
 494              		.loc 1 514 11
 495 0008 7B68     		ldr	r3, [r7, #4]
 496 000a 002B     		cmp	r3, #0
 497 000c 0ED0     		beq	.L28
 515:./Drivers/FreeRTOS/queue.c ****         {
 516:./Drivers/FreeRTOS/queue.c ****             /* The queue create function will set all the queue structure members
 517:./Drivers/FreeRTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 518:./Drivers/FreeRTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 519:./Drivers/FreeRTOS/queue.c ****             * in particular the information required for priority inheritance. */
 520:./Drivers/FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 498              		.loc 1 520 51
 499 000e 7B68     		ldr	r3, [r7, #4]
 500 0010 0022     		movs	r2, #0
 501 0012 9A60     		str	r2, [r3, #8]
 521:./Drivers/FreeRTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 502              		.loc 1 521 37
 503 0014 7B68     		ldr	r3, [r7, #4]
 504 0016 0022     		movs	r2, #0
 505 0018 1A60     		str	r2, [r3]
 522:./Drivers/FreeRTOS/queue.c **** 
 523:./Drivers/FreeRTOS/queue.c ****             /* In case this is a recursive mutex. */
 524:./Drivers/FreeRTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 506              		.loc 1 524 59
 507 001a 7B68     		ldr	r3, [r7, #4]
 508 001c 0022     		movs	r2, #0
 509 001e DA60     		str	r2, [r3, #12]
 525:./Drivers/FreeRTOS/queue.c **** 
 526:./Drivers/FreeRTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 527:./Drivers/FreeRTOS/queue.c **** 
 528:./Drivers/FreeRTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 529:./Drivers/FreeRTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 510              		.loc 1 529 22
 511 0020 0023     		movs	r3, #0
 512 0022 0022     		movs	r2, #0
 513 0024 0021     		movs	r1, #0
 514 0026 7868     		ldr	r0, [r7, #4]
 515 0028 FFF7FEFF 		bl	xQueueGenericSend
 516              	.L28:
 530:./Drivers/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 23


 531:./Drivers/FreeRTOS/queue.c ****         else
 532:./Drivers/FreeRTOS/queue.c ****         {
 533:./Drivers/FreeRTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 534:./Drivers/FreeRTOS/queue.c ****         }
 535:./Drivers/FreeRTOS/queue.c ****     }
 517              		.loc 1 535 5
 518 002c 00BF     		nop
 519 002e 0837     		adds	r7, r7, #8
 520              	.LCFI18:
 521              		.cfi_def_cfa_offset 8
 522 0030 BD46     		mov	sp, r7
 523              	.LCFI19:
 524              		.cfi_def_cfa_register 13
 525              		@ sp needed
 526 0032 80BD     		pop	{r7, pc}
 527              		.cfi_endproc
 528              	.LFE8:
 530              		.section	.text.xQueueCreateMutex,"ax",%progbits
 531              		.align	1
 532              		.global	xQueueCreateMutex
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	xQueueCreateMutex:
 539              	.LFB9:
 536:./Drivers/FreeRTOS/queue.c **** 
 537:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:./Drivers/FreeRTOS/queue.c **** 
 540:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 541:./Drivers/FreeRTOS/queue.c **** 
 542:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 543:./Drivers/FreeRTOS/queue.c ****     {
 540              		.loc 1 543 5
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 24
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544 0000 80B5     		push	{r7, lr}
 545              	.LCFI20:
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 7, -8
 548              		.cfi_offset 14, -4
 549 0002 86B0     		sub	sp, sp, #24
 550              	.LCFI21:
 551              		.cfi_def_cfa_offset 32
 552 0004 00AF     		add	r7, sp, #0
 553              	.LCFI22:
 554              		.cfi_def_cfa_register 7
 555 0006 0346     		mov	r3, r0
 556 0008 FB71     		strb	r3, [r7, #7]
 544:./Drivers/FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 545:./Drivers/FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 557              		.loc 1 545 27
 558 000a 0123     		movs	r3, #1
 559 000c 7B61     		str	r3, [r7, #20]
 560              		.loc 1 545 62
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 24


 561 000e 0023     		movs	r3, #0
 562 0010 3B61     		str	r3, [r7, #16]
 546:./Drivers/FreeRTOS/queue.c **** 
 547:./Drivers/FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 563              		.loc 1 547 21
 564 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 565 0014 1A46     		mov	r2, r3
 566 0016 3969     		ldr	r1, [r7, #16]
 567 0018 7869     		ldr	r0, [r7, #20]
 568 001a FFF7FEFF 		bl	xQueueGenericCreate
 569 001e F860     		str	r0, [r7, #12]
 548:./Drivers/FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 570              		.loc 1 548 9
 571 0020 F868     		ldr	r0, [r7, #12]
 572 0022 FFF7FEFF 		bl	prvInitialiseMutex
 549:./Drivers/FreeRTOS/queue.c **** 
 550:./Drivers/FreeRTOS/queue.c ****         return xNewQueue;
 573              		.loc 1 550 16
 574 0026 FB68     		ldr	r3, [r7, #12]
 551:./Drivers/FreeRTOS/queue.c ****     }
 575              		.loc 1 551 5
 576 0028 1846     		mov	r0, r3
 577 002a 1837     		adds	r7, r7, #24
 578              	.LCFI23:
 579              		.cfi_def_cfa_offset 8
 580 002c BD46     		mov	sp, r7
 581              	.LCFI24:
 582              		.cfi_def_cfa_register 13
 583              		@ sp needed
 584 002e 80BD     		pop	{r7, pc}
 585              		.cfi_endproc
 586              	.LFE9:
 588              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 589              		.align	1
 590              		.global	xQueueGiveMutexRecursive
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu fpv4-sp-d16
 596              	xQueueGiveMutexRecursive:
 597              	.LFB10:
 552:./Drivers/FreeRTOS/queue.c **** 
 553:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 554:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 555:./Drivers/FreeRTOS/queue.c **** 
 556:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 557:./Drivers/FreeRTOS/queue.c **** 
 558:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 559:./Drivers/FreeRTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 560:./Drivers/FreeRTOS/queue.c ****     {
 561:./Drivers/FreeRTOS/queue.c ****         QueueHandle_t xNewQueue;
 562:./Drivers/FreeRTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 563:./Drivers/FreeRTOS/queue.c **** 
 564:./Drivers/FreeRTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 565:./Drivers/FreeRTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 566:./Drivers/FreeRTOS/queue.c ****         ( void ) ucQueueType;
 567:./Drivers/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 25


 568:./Drivers/FreeRTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 569:./Drivers/FreeRTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 570:./Drivers/FreeRTOS/queue.c **** 
 571:./Drivers/FreeRTOS/queue.c ****         return xNewQueue;
 572:./Drivers/FreeRTOS/queue.c ****     }
 573:./Drivers/FreeRTOS/queue.c **** 
 574:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 575:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 576:./Drivers/FreeRTOS/queue.c **** 
 577:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 578:./Drivers/FreeRTOS/queue.c **** 
 579:./Drivers/FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 580:./Drivers/FreeRTOS/queue.c ****     {
 581:./Drivers/FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 582:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 583:./Drivers/FreeRTOS/queue.c **** 
 584:./Drivers/FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 585:./Drivers/FreeRTOS/queue.c **** 
 586:./Drivers/FreeRTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 587:./Drivers/FreeRTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 588:./Drivers/FreeRTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 589:./Drivers/FreeRTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 590:./Drivers/FreeRTOS/queue.c ****          * following critical section exiting and the function returning. */
 591:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 592:./Drivers/FreeRTOS/queue.c ****         {
 593:./Drivers/FreeRTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 594:./Drivers/FreeRTOS/queue.c ****             {
 595:./Drivers/FreeRTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 596:./Drivers/FreeRTOS/queue.c ****             }
 597:./Drivers/FreeRTOS/queue.c ****             else
 598:./Drivers/FreeRTOS/queue.c ****             {
 599:./Drivers/FreeRTOS/queue.c ****                 pxReturn = NULL;
 600:./Drivers/FreeRTOS/queue.c ****             }
 601:./Drivers/FreeRTOS/queue.c ****         }
 602:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 603:./Drivers/FreeRTOS/queue.c **** 
 604:./Drivers/FreeRTOS/queue.c ****         return pxReturn;
 605:./Drivers/FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 606:./Drivers/FreeRTOS/queue.c **** 
 607:./Drivers/FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 608:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 609:./Drivers/FreeRTOS/queue.c **** 
 610:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 611:./Drivers/FreeRTOS/queue.c **** 
 612:./Drivers/FreeRTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 613:./Drivers/FreeRTOS/queue.c ****     {
 614:./Drivers/FreeRTOS/queue.c ****         TaskHandle_t pxReturn;
 615:./Drivers/FreeRTOS/queue.c **** 
 616:./Drivers/FreeRTOS/queue.c ****         configASSERT( xSemaphore );
 617:./Drivers/FreeRTOS/queue.c **** 
 618:./Drivers/FreeRTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 619:./Drivers/FreeRTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 620:./Drivers/FreeRTOS/queue.c ****          * not required here. */
 621:./Drivers/FreeRTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 622:./Drivers/FreeRTOS/queue.c ****         {
 623:./Drivers/FreeRTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 624:./Drivers/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 26


 625:./Drivers/FreeRTOS/queue.c ****         else
 626:./Drivers/FreeRTOS/queue.c ****         {
 627:./Drivers/FreeRTOS/queue.c ****             pxReturn = NULL;
 628:./Drivers/FreeRTOS/queue.c ****         }
 629:./Drivers/FreeRTOS/queue.c **** 
 630:./Drivers/FreeRTOS/queue.c ****         return pxReturn;
 631:./Drivers/FreeRTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 632:./Drivers/FreeRTOS/queue.c **** 
 633:./Drivers/FreeRTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 634:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 635:./Drivers/FreeRTOS/queue.c **** 
 636:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 637:./Drivers/FreeRTOS/queue.c **** 
 638:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 639:./Drivers/FreeRTOS/queue.c ****     {
 598              		.loc 1 639 5
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 24
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 90B5     		push	{r4, r7, lr}
 603              	.LCFI25:
 604              		.cfi_def_cfa_offset 12
 605              		.cfi_offset 4, -12
 606              		.cfi_offset 7, -8
 607              		.cfi_offset 14, -4
 608 0002 87B0     		sub	sp, sp, #28
 609              	.LCFI26:
 610              		.cfi_def_cfa_offset 40
 611 0004 00AF     		add	r7, sp, #0
 612              	.LCFI27:
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
 640:./Drivers/FreeRTOS/queue.c ****         BaseType_t xReturn;
 641:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 615              		.loc 1 641 25
 616 0008 7B68     		ldr	r3, [r7, #4]
 617 000a 3B61     		str	r3, [r7, #16]
 642:./Drivers/FreeRTOS/queue.c **** 
 643:./Drivers/FreeRTOS/queue.c ****         configASSERT( pxMutex );
 618              		.loc 1 643 9
 619 000c 3B69     		ldr	r3, [r7, #16]
 620 000e 002B     		cmp	r3, #0
 621 0010 0AD1     		bne	.L32
 622              	.LBB119:
 623              	.LBB120:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 624              		.loc 2 198 9
 625              		.syntax unified
 626              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 627 0012 4FF05003 			mov r3, #80												
 628 0016 83F31188 		msr basepri, r3											
 629 001a BFF36F8F 		isb														
 630 001e BFF34F8F 		dsb														
 631              	
 632              	@ 0 "" 2
 633              		.thumb
 634              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 27


 635 0022 FB60     		str	r3, [r7, #12]
 636              		.loc 2 206 5
 637 0024 00BF     		nop
 638              	.L33:
 639              	.LBE120:
 640              	.LBE119:
 641              		.loc 1 643 9 discriminator 1
 642 0026 FEE7     		b	.L33
 643              	.L32:
 644:./Drivers/FreeRTOS/queue.c **** 
 645:./Drivers/FreeRTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 646:./Drivers/FreeRTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 647:./Drivers/FreeRTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 648:./Drivers/FreeRTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 649:./Drivers/FreeRTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 650:./Drivers/FreeRTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 651:./Drivers/FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 644              		.loc 1 651 34
 645 0028 3B69     		ldr	r3, [r7, #16]
 646 002a 9C68     		ldr	r4, [r3, #8]
 647              		.loc 1 651 51
 648 002c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 649 0030 0346     		mov	r3, r0
 650              		.loc 1 651 11
 651 0032 9C42     		cmp	r4, r3
 652 0034 11D1     		bne	.L34
 652:./Drivers/FreeRTOS/queue.c ****         {
 653:./Drivers/FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 654:./Drivers/FreeRTOS/queue.c **** 
 655:./Drivers/FreeRTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 656:./Drivers/FreeRTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 657:./Drivers/FreeRTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 658:./Drivers/FreeRTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 659:./Drivers/FreeRTOS/queue.c ****              * uxRecursiveCallCount member. */
 660:./Drivers/FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 653              		.loc 1 660 36
 654 0036 3B69     		ldr	r3, [r7, #16]
 655 0038 DB68     		ldr	r3, [r3, #12]
 656              		.loc 1 660 59
 657 003a 5A1E     		subs	r2, r3, #1
 658 003c 3B69     		ldr	r3, [r7, #16]
 659 003e DA60     		str	r2, [r3, #12]
 661:./Drivers/FreeRTOS/queue.c **** 
 662:./Drivers/FreeRTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 663:./Drivers/FreeRTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 660              		.loc 1 663 38
 661 0040 3B69     		ldr	r3, [r7, #16]
 662 0042 DB68     		ldr	r3, [r3, #12]
 663              		.loc 1 663 15
 664 0044 002B     		cmp	r3, #0
 665 0046 05D1     		bne	.L35
 664:./Drivers/FreeRTOS/queue.c ****             {
 665:./Drivers/FreeRTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 666:./Drivers/FreeRTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 667:./Drivers/FreeRTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 666              		.loc 1 667 26
 667 0048 0023     		movs	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 28


 668 004a 0022     		movs	r2, #0
 669 004c 0021     		movs	r1, #0
 670 004e 3869     		ldr	r0, [r7, #16]
 671 0050 FFF7FEFF 		bl	xQueueGenericSend
 672              	.L35:
 668:./Drivers/FreeRTOS/queue.c ****             }
 669:./Drivers/FreeRTOS/queue.c ****             else
 670:./Drivers/FreeRTOS/queue.c ****             {
 671:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 672:./Drivers/FreeRTOS/queue.c ****             }
 673:./Drivers/FreeRTOS/queue.c **** 
 674:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 673              		.loc 1 674 21
 674 0054 0123     		movs	r3, #1
 675 0056 7B61     		str	r3, [r7, #20]
 676 0058 01E0     		b	.L36
 677              	.L34:
 675:./Drivers/FreeRTOS/queue.c ****         }
 676:./Drivers/FreeRTOS/queue.c ****         else
 677:./Drivers/FreeRTOS/queue.c ****         {
 678:./Drivers/FreeRTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 679:./Drivers/FreeRTOS/queue.c ****              * holder. */
 680:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 678              		.loc 1 680 21
 679 005a 0023     		movs	r3, #0
 680 005c 7B61     		str	r3, [r7, #20]
 681              	.L36:
 681:./Drivers/FreeRTOS/queue.c **** 
 682:./Drivers/FreeRTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 683:./Drivers/FreeRTOS/queue.c ****         }
 684:./Drivers/FreeRTOS/queue.c **** 
 685:./Drivers/FreeRTOS/queue.c ****         return xReturn;
 682              		.loc 1 685 16
 683 005e 7B69     		ldr	r3, [r7, #20]
 686:./Drivers/FreeRTOS/queue.c ****     }
 684              		.loc 1 686 5
 685 0060 1846     		mov	r0, r3
 686 0062 1C37     		adds	r7, r7, #28
 687              	.LCFI28:
 688              		.cfi_def_cfa_offset 12
 689 0064 BD46     		mov	sp, r7
 690              	.LCFI29:
 691              		.cfi_def_cfa_register 13
 692              		@ sp needed
 693 0066 90BD     		pop	{r4, r7, pc}
 694              		.cfi_endproc
 695              	.LFE10:
 697              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 698              		.align	1
 699              		.global	xQueueTakeMutexRecursive
 700              		.syntax unified
 701              		.thumb
 702              		.thumb_func
 703              		.fpu fpv4-sp-d16
 705              	xQueueTakeMutexRecursive:
 706              	.LFB11:
 687:./Drivers/FreeRTOS/queue.c **** 
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 29


 688:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 690:./Drivers/FreeRTOS/queue.c **** 
 691:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 692:./Drivers/FreeRTOS/queue.c **** 
 693:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 694:./Drivers/FreeRTOS/queue.c ****                                          TickType_t xTicksToWait )
 695:./Drivers/FreeRTOS/queue.c ****     {
 707              		.loc 1 695 5
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 24
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711 0000 90B5     		push	{r4, r7, lr}
 712              	.LCFI30:
 713              		.cfi_def_cfa_offset 12
 714              		.cfi_offset 4, -12
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
 717 0002 87B0     		sub	sp, sp, #28
 718              	.LCFI31:
 719              		.cfi_def_cfa_offset 40
 720 0004 00AF     		add	r7, sp, #0
 721              	.LCFI32:
 722              		.cfi_def_cfa_register 7
 723 0006 7860     		str	r0, [r7, #4]
 724 0008 3960     		str	r1, [r7]
 696:./Drivers/FreeRTOS/queue.c ****         BaseType_t xReturn;
 697:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 725              		.loc 1 697 25
 726 000a 7B68     		ldr	r3, [r7, #4]
 727 000c 3B61     		str	r3, [r7, #16]
 698:./Drivers/FreeRTOS/queue.c **** 
 699:./Drivers/FreeRTOS/queue.c ****         configASSERT( pxMutex );
 728              		.loc 1 699 9
 729 000e 3B69     		ldr	r3, [r7, #16]
 730 0010 002B     		cmp	r3, #0
 731 0012 0AD1     		bne	.L39
 732              	.LBB121:
 733              	.LBB122:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 734              		.loc 2 198 9
 735              		.syntax unified
 736              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 737 0014 4FF05003 			mov r3, #80												
 738 0018 83F31188 		msr basepri, r3											
 739 001c BFF36F8F 		isb														
 740 0020 BFF34F8F 		dsb														
 741              	
 742              	@ 0 "" 2
 743              		.thumb
 744              		.syntax unified
 745 0024 FB60     		str	r3, [r7, #12]
 746              		.loc 2 206 5
 747 0026 00BF     		nop
 748              	.L40:
 749              	.LBE122:
 750              	.LBE121:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 30


 751              		.loc 1 699 9 discriminator 1
 752 0028 FEE7     		b	.L40
 753              	.L39:
 700:./Drivers/FreeRTOS/queue.c **** 
 701:./Drivers/FreeRTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 702:./Drivers/FreeRTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 703:./Drivers/FreeRTOS/queue.c **** 
 704:./Drivers/FreeRTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 705:./Drivers/FreeRTOS/queue.c **** 
 706:./Drivers/FreeRTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 754              		.loc 1 706 34
 755 002a 3B69     		ldr	r3, [r7, #16]
 756 002c 9C68     		ldr	r4, [r3, #8]
 757              		.loc 1 706 51
 758 002e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 759 0032 0346     		mov	r3, r0
 760              		.loc 1 706 11
 761 0034 9C42     		cmp	r4, r3
 762 0036 07D1     		bne	.L41
 707:./Drivers/FreeRTOS/queue.c ****         {
 708:./Drivers/FreeRTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 763              		.loc 1 708 36
 764 0038 3B69     		ldr	r3, [r7, #16]
 765 003a DB68     		ldr	r3, [r3, #12]
 766              		.loc 1 708 59
 767 003c 5A1C     		adds	r2, r3, #1
 768 003e 3B69     		ldr	r3, [r7, #16]
 769 0040 DA60     		str	r2, [r3, #12]
 709:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 770              		.loc 1 709 21
 771 0042 0123     		movs	r3, #1
 772 0044 7B61     		str	r3, [r7, #20]
 773 0046 0CE0     		b	.L42
 774              	.L41:
 710:./Drivers/FreeRTOS/queue.c ****         }
 711:./Drivers/FreeRTOS/queue.c ****         else
 712:./Drivers/FreeRTOS/queue.c ****         {
 713:./Drivers/FreeRTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 775              		.loc 1 713 23
 776 0048 3968     		ldr	r1, [r7]
 777 004a 3869     		ldr	r0, [r7, #16]
 778 004c FFF7FEFF 		bl	xQueueSemaphoreTake
 779 0050 7861     		str	r0, [r7, #20]
 714:./Drivers/FreeRTOS/queue.c **** 
 715:./Drivers/FreeRTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 716:./Drivers/FreeRTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 717:./Drivers/FreeRTOS/queue.c ****              * before reaching here. */
 718:./Drivers/FreeRTOS/queue.c ****             if( xReturn != pdFAIL )
 780              		.loc 1 718 15
 781 0052 7B69     		ldr	r3, [r7, #20]
 782 0054 002B     		cmp	r3, #0
 783 0056 04D0     		beq	.L42
 719:./Drivers/FreeRTOS/queue.c ****             {
 720:./Drivers/FreeRTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 784              		.loc 1 720 40
 785 0058 3B69     		ldr	r3, [r7, #16]
 786 005a DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 31


 787              		.loc 1 720 63
 788 005c 5A1C     		adds	r2, r3, #1
 789 005e 3B69     		ldr	r3, [r7, #16]
 790 0060 DA60     		str	r2, [r3, #12]
 791              	.L42:
 721:./Drivers/FreeRTOS/queue.c ****             }
 722:./Drivers/FreeRTOS/queue.c ****             else
 723:./Drivers/FreeRTOS/queue.c ****             {
 724:./Drivers/FreeRTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 725:./Drivers/FreeRTOS/queue.c ****             }
 726:./Drivers/FreeRTOS/queue.c ****         }
 727:./Drivers/FreeRTOS/queue.c **** 
 728:./Drivers/FreeRTOS/queue.c ****         return xReturn;
 792              		.loc 1 728 16
 793 0062 7B69     		ldr	r3, [r7, #20]
 729:./Drivers/FreeRTOS/queue.c ****     }
 794              		.loc 1 729 5
 795 0064 1846     		mov	r0, r3
 796 0066 1C37     		adds	r7, r7, #28
 797              	.LCFI33:
 798              		.cfi_def_cfa_offset 12
 799 0068 BD46     		mov	sp, r7
 800              	.LCFI34:
 801              		.cfi_def_cfa_register 13
 802              		@ sp needed
 803 006a 90BD     		pop	{r4, r7, pc}
 804              		.cfi_endproc
 805              	.LFE11:
 807              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 808              		.align	1
 809              		.global	xQueueCreateCountingSemaphore
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 813              		.fpu fpv4-sp-d16
 815              	xQueueCreateCountingSemaphore:
 816              	.LFB12:
 730:./Drivers/FreeRTOS/queue.c **** 
 731:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 732:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 733:./Drivers/FreeRTOS/queue.c **** 
 734:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 735:./Drivers/FreeRTOS/queue.c **** 
 736:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 737:./Drivers/FreeRTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 738:./Drivers/FreeRTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 739:./Drivers/FreeRTOS/queue.c ****     {
 740:./Drivers/FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 741:./Drivers/FreeRTOS/queue.c **** 
 742:./Drivers/FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 743:./Drivers/FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 744:./Drivers/FreeRTOS/queue.c ****         {
 745:./Drivers/FreeRTOS/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 746:./Drivers/FreeRTOS/queue.c **** 
 747:./Drivers/FreeRTOS/queue.c ****             if( xHandle != NULL )
 748:./Drivers/FreeRTOS/queue.c ****             {
 749:./Drivers/FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 32


 750:./Drivers/FreeRTOS/queue.c **** 
 751:./Drivers/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 752:./Drivers/FreeRTOS/queue.c ****             }
 753:./Drivers/FreeRTOS/queue.c ****             else
 754:./Drivers/FreeRTOS/queue.c ****             {
 755:./Drivers/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 756:./Drivers/FreeRTOS/queue.c ****             }
 757:./Drivers/FreeRTOS/queue.c ****         }
 758:./Drivers/FreeRTOS/queue.c ****         else
 759:./Drivers/FreeRTOS/queue.c ****         {
 760:./Drivers/FreeRTOS/queue.c ****             configASSERT( xHandle );
 761:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 762:./Drivers/FreeRTOS/queue.c ****         }
 763:./Drivers/FreeRTOS/queue.c **** 
 764:./Drivers/FreeRTOS/queue.c ****         return xHandle;
 765:./Drivers/FreeRTOS/queue.c ****     }
 766:./Drivers/FreeRTOS/queue.c **** 
 767:./Drivers/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 768:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 769:./Drivers/FreeRTOS/queue.c **** 
 770:./Drivers/FreeRTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 771:./Drivers/FreeRTOS/queue.c **** 
 772:./Drivers/FreeRTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 773:./Drivers/FreeRTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 774:./Drivers/FreeRTOS/queue.c ****     {
 817              		.loc 1 774 5
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 16
 820              		@ frame_needed = 1, uses_anonymous_args = 0
 821 0000 80B5     		push	{r7, lr}
 822              	.LCFI35:
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 84B0     		sub	sp, sp, #16
 827              	.LCFI36:
 828              		.cfi_def_cfa_offset 24
 829 0004 00AF     		add	r7, sp, #0
 830              	.LCFI37:
 831              		.cfi_def_cfa_register 7
 832 0006 7860     		str	r0, [r7, #4]
 833 0008 3960     		str	r1, [r7]
 775:./Drivers/FreeRTOS/queue.c ****         QueueHandle_t xHandle = NULL;
 834              		.loc 1 775 23
 835 000a 0023     		movs	r3, #0
 836 000c FB60     		str	r3, [r7, #12]
 776:./Drivers/FreeRTOS/queue.c **** 
 777:./Drivers/FreeRTOS/queue.c ****         if( ( uxMaxCount != 0 ) &&
 837              		.loc 1 777 11
 838 000e 7B68     		ldr	r3, [r7, #4]
 839 0010 002B     		cmp	r3, #0
 840 0012 10D0     		beq	.L45
 841              		.loc 1 777 33 discriminator 1
 842 0014 3A68     		ldr	r2, [r7]
 843 0016 7B68     		ldr	r3, [r7, #4]
 844 0018 9A42     		cmp	r2, r3
 845 001a 0CD8     		bhi	.L45
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 33


 778:./Drivers/FreeRTOS/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 779:./Drivers/FreeRTOS/queue.c ****         {
 780:./Drivers/FreeRTOS/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 846              		.loc 1 780 23
 847 001c 0222     		movs	r2, #2
 848 001e 0021     		movs	r1, #0
 849 0020 7868     		ldr	r0, [r7, #4]
 850 0022 FFF7FEFF 		bl	xQueueGenericCreate
 851 0026 F860     		str	r0, [r7, #12]
 781:./Drivers/FreeRTOS/queue.c **** 
 782:./Drivers/FreeRTOS/queue.c ****             if( xHandle != NULL )
 852              		.loc 1 782 15
 853 0028 FB68     		ldr	r3, [r7, #12]
 854 002a 002B     		cmp	r3, #0
 855 002c 11D0     		beq	.L47
 783:./Drivers/FreeRTOS/queue.c ****             {
 784:./Drivers/FreeRTOS/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 856              		.loc 1 784 62
 857 002e FB68     		ldr	r3, [r7, #12]
 858 0030 3A68     		ldr	r2, [r7]
 859 0032 9A63     		str	r2, [r3, #56]
 782:./Drivers/FreeRTOS/queue.c ****             {
 860              		.loc 1 782 15
 861 0034 0DE0     		b	.L47
 862              	.L45:
 785:./Drivers/FreeRTOS/queue.c **** 
 786:./Drivers/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 787:./Drivers/FreeRTOS/queue.c ****             }
 788:./Drivers/FreeRTOS/queue.c ****             else
 789:./Drivers/FreeRTOS/queue.c ****             {
 790:./Drivers/FreeRTOS/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 791:./Drivers/FreeRTOS/queue.c ****             }
 792:./Drivers/FreeRTOS/queue.c ****         }
 793:./Drivers/FreeRTOS/queue.c ****         else
 794:./Drivers/FreeRTOS/queue.c ****         {
 795:./Drivers/FreeRTOS/queue.c ****             configASSERT( xHandle );
 863              		.loc 1 795 13
 864 0036 FB68     		ldr	r3, [r7, #12]
 865 0038 002B     		cmp	r3, #0
 866 003a 0AD1     		bne	.L47
 867              	.LBB123:
 868              	.LBB124:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 869              		.loc 2 198 9
 870              		.syntax unified
 871              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 872 003c 4FF05003 			mov r3, #80												
 873 0040 83F31188 		msr basepri, r3											
 874 0044 BFF36F8F 		isb														
 875 0048 BFF34F8F 		dsb														
 876              	
 877              	@ 0 "" 2
 878              		.thumb
 879              		.syntax unified
 880 004c BB60     		str	r3, [r7, #8]
 881              		.loc 2 206 5
 882 004e 00BF     		nop
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 34


 883              	.L48:
 884              	.LBE124:
 885              	.LBE123:
 886              		.loc 1 795 13 discriminator 1
 887 0050 FEE7     		b	.L48
 888              	.L47:
 796:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 797:./Drivers/FreeRTOS/queue.c ****         }
 798:./Drivers/FreeRTOS/queue.c **** 
 799:./Drivers/FreeRTOS/queue.c ****         return xHandle;
 889              		.loc 1 799 16
 890 0052 FB68     		ldr	r3, [r7, #12]
 800:./Drivers/FreeRTOS/queue.c ****     }
 891              		.loc 1 800 5
 892 0054 1846     		mov	r0, r3
 893 0056 1037     		adds	r7, r7, #16
 894              	.LCFI38:
 895              		.cfi_def_cfa_offset 8
 896 0058 BD46     		mov	sp, r7
 897              	.LCFI39:
 898              		.cfi_def_cfa_register 13
 899              		@ sp needed
 900 005a 80BD     		pop	{r7, pc}
 901              		.cfi_endproc
 902              	.LFE12:
 904              		.section	.text.xQueueGenericSend,"ax",%progbits
 905              		.align	1
 906              		.global	xQueueGenericSend
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 910              		.fpu fpv4-sp-d16
 912              	xQueueGenericSend:
 913              	.LFB13:
 801:./Drivers/FreeRTOS/queue.c **** 
 802:./Drivers/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 803:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 804:./Drivers/FreeRTOS/queue.c **** 
 805:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 806:./Drivers/FreeRTOS/queue.c ****                               const void * const pvItemToQueue,
 807:./Drivers/FreeRTOS/queue.c ****                               TickType_t xTicksToWait,
 808:./Drivers/FreeRTOS/queue.c ****                               const BaseType_t xCopyPosition )
 809:./Drivers/FreeRTOS/queue.c **** {
 914              		.loc 1 809 1
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 56
 917              		@ frame_needed = 1, uses_anonymous_args = 0
 918 0000 80B5     		push	{r7, lr}
 919              	.LCFI40:
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 8EB0     		sub	sp, sp, #56
 924              	.LCFI41:
 925              		.cfi_def_cfa_offset 64
 926 0004 00AF     		add	r7, sp, #0
 927              	.LCFI42:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 35


 928              		.cfi_def_cfa_register 7
 929 0006 F860     		str	r0, [r7, #12]
 930 0008 B960     		str	r1, [r7, #8]
 931 000a 7A60     		str	r2, [r7, #4]
 932 000c 3B60     		str	r3, [r7]
 810:./Drivers/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 933              		.loc 1 810 16
 934 000e 0023     		movs	r3, #0
 935 0010 7B63     		str	r3, [r7, #52]
 811:./Drivers/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
 812:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 936              		.loc 1 812 21
 937 0012 FB68     		ldr	r3, [r7, #12]
 938 0014 3B63     		str	r3, [r7, #48]
 813:./Drivers/FreeRTOS/queue.c **** 
 814:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 939              		.loc 1 814 5
 940 0016 3B6B     		ldr	r3, [r7, #48]
 941 0018 002B     		cmp	r3, #0
 942 001a 0AD1     		bne	.L51
 943              	.LBB125:
 944              	.LBB126:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 945              		.loc 2 198 9
 946              		.syntax unified
 947              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 948 001c 4FF05003 			mov r3, #80												
 949 0020 83F31188 		msr basepri, r3											
 950 0024 BFF36F8F 		isb														
 951 0028 BFF34F8F 		dsb														
 952              	
 953              	@ 0 "" 2
 954              		.thumb
 955              		.syntax unified
 956 002c BB62     		str	r3, [r7, #40]
 957              		.loc 2 206 5
 958 002e 00BF     		nop
 959              	.L52:
 960              	.LBE126:
 961              	.LBE125:
 962              		.loc 1 814 5 discriminator 1
 963 0030 FEE7     		b	.L52
 964              	.L51:
 815:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 965              		.loc 1 815 5
 966 0032 BB68     		ldr	r3, [r7, #8]
 967 0034 002B     		cmp	r3, #0
 968 0036 03D1     		bne	.L53
 969              		.loc 1 815 5 is_stmt 0 discriminator 2
 970 0038 3B6B     		ldr	r3, [r7, #48]
 971 003a 1B6C     		ldr	r3, [r3, #64]
 972 003c 002B     		cmp	r3, #0
 973 003e 01D1     		bne	.L54
 974              	.L53:
 975              		.loc 1 815 5 discriminator 3
 976 0040 0123     		movs	r3, #1
 977 0042 00E0     		b	.L55
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 36


 978              	.L54:
 979              		.loc 1 815 5 discriminator 4
 980 0044 0023     		movs	r3, #0
 981              	.L55:
 982              		.loc 1 815 5 discriminator 6
 983 0046 002B     		cmp	r3, #0
 984 0048 0AD1     		bne	.L56
 985              	.LBB127:
 986              	.LBB128:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 987              		.loc 2 198 9 is_stmt 1
 988              		.syntax unified
 989              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 990 004a 4FF05003 			mov r3, #80												
 991 004e 83F31188 		msr basepri, r3											
 992 0052 BFF36F8F 		isb														
 993 0056 BFF34F8F 		dsb														
 994              	
 995              	@ 0 "" 2
 996              		.thumb
 997              		.syntax unified
 998 005a 7B62     		str	r3, [r7, #36]
 999              		.loc 2 206 5
 1000 005c 00BF     		nop
 1001              	.L57:
 1002              	.LBE128:
 1003              	.LBE127:
 1004              		.loc 1 815 5 discriminator 2
 1005 005e FEE7     		b	.L57
 1006              	.L56:
 816:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1007              		.loc 1 816 5
 1008 0060 3B68     		ldr	r3, [r7]
 1009 0062 022B     		cmp	r3, #2
 1010 0064 03D1     		bne	.L58
 1011              		.loc 1 816 5 is_stmt 0 discriminator 2
 1012 0066 3B6B     		ldr	r3, [r7, #48]
 1013 0068 DB6B     		ldr	r3, [r3, #60]
 1014 006a 012B     		cmp	r3, #1
 1015 006c 01D1     		bne	.L59
 1016              	.L58:
 1017              		.loc 1 816 5 discriminator 3
 1018 006e 0123     		movs	r3, #1
 1019 0070 00E0     		b	.L60
 1020              	.L59:
 1021              		.loc 1 816 5 discriminator 4
 1022 0072 0023     		movs	r3, #0
 1023              	.L60:
 1024              		.loc 1 816 5 discriminator 6
 1025 0074 002B     		cmp	r3, #0
 1026 0076 0AD1     		bne	.L61
 1027              	.LBB129:
 1028              	.LBB130:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1029              		.loc 2 198 9 is_stmt 1
 1030              		.syntax unified
 1031              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 37


 1032 0078 4FF05003 			mov r3, #80												
 1033 007c 83F31188 		msr basepri, r3											
 1034 0080 BFF36F8F 		isb														
 1035 0084 BFF34F8F 		dsb														
 1036              	
 1037              	@ 0 "" 2
 1038              		.thumb
 1039              		.syntax unified
 1040 0088 3B62     		str	r3, [r7, #32]
 1041              		.loc 2 206 5
 1042 008a 00BF     		nop
 1043              	.L62:
 1044              	.LBE130:
 1045              	.LBE129:
 1046              		.loc 1 816 5 discriminator 3
 1047 008c FEE7     		b	.L62
 1048              	.L61:
 817:./Drivers/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 818:./Drivers/FreeRTOS/queue.c ****         {
 819:./Drivers/FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 1049              		.loc 1 819 13
 1050 008e FFF7FEFF 		bl	xTaskGetSchedulerState
 1051 0092 0346     		mov	r3, r0
 1052 0094 002B     		cmp	r3, #0
 1053 0096 02D1     		bne	.L63
 1054              		.loc 1 819 13 is_stmt 0 discriminator 2
 1055 0098 7B68     		ldr	r3, [r7, #4]
 1056 009a 002B     		cmp	r3, #0
 1057 009c 01D1     		bne	.L64
 1058              	.L63:
 1059              		.loc 1 819 13 discriminator 3
 1060 009e 0123     		movs	r3, #1
 1061 00a0 00E0     		b	.L65
 1062              	.L64:
 1063              		.loc 1 819 13 discriminator 4
 1064 00a2 0023     		movs	r3, #0
 1065              	.L65:
 1066              		.loc 1 819 13 discriminator 6
 1067 00a4 002B     		cmp	r3, #0
 1068 00a6 0AD1     		bne	.L66
 1069              	.LBB131:
 1070              	.LBB132:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1071              		.loc 2 198 9 is_stmt 1
 1072              		.syntax unified
 1073              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1074 00a8 4FF05003 			mov r3, #80												
 1075 00ac 83F31188 		msr basepri, r3											
 1076 00b0 BFF36F8F 		isb														
 1077 00b4 BFF34F8F 		dsb														
 1078              	
 1079              	@ 0 "" 2
 1080              		.thumb
 1081              		.syntax unified
 1082 00b8 FB61     		str	r3, [r7, #28]
 1083              		.loc 2 206 5
 1084 00ba 00BF     		nop
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 38


 1085              	.L67:
 1086              	.LBE132:
 1087              	.LBE131:
 1088              		.loc 1 819 13 discriminator 4
 1089 00bc FEE7     		b	.L67
 1090              	.L66:
 820:./Drivers/FreeRTOS/queue.c ****         }
 821:./Drivers/FreeRTOS/queue.c ****     #endif
 822:./Drivers/FreeRTOS/queue.c **** 
 823:./Drivers/FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 824:./Drivers/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 825:./Drivers/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
 826:./Drivers/FreeRTOS/queue.c ****     for( ; ; )
 827:./Drivers/FreeRTOS/queue.c ****     {
 828:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 1091              		.loc 1 828 9
 1092 00be FFF7FEFF 		bl	vPortEnterCritical
 829:./Drivers/FreeRTOS/queue.c ****         {
 830:./Drivers/FreeRTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 831:./Drivers/FreeRTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 832:./Drivers/FreeRTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 833:./Drivers/FreeRTOS/queue.c ****              * queue is full. */
 834:./Drivers/FreeRTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 1093              		.loc 1 834 26
 1094 00c2 3B6B     		ldr	r3, [r7, #48]
 1095 00c4 9A6B     		ldr	r2, [r3, #56]
 1096              		.loc 1 834 55
 1097 00c6 3B6B     		ldr	r3, [r7, #48]
 1098 00c8 DB6B     		ldr	r3, [r3, #60]
 1099              		.loc 1 834 15
 1100 00ca 9A42     		cmp	r2, r3
 1101 00cc 02D3     		bcc	.L68
 1102              		.loc 1 834 68 discriminator 1
 1103 00ce 3B68     		ldr	r3, [r7]
 1104 00d0 022B     		cmp	r3, #2
 1105 00d2 29D1     		bne	.L69
 1106              	.L68:
 835:./Drivers/FreeRTOS/queue.c ****             {
 836:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 837:./Drivers/FreeRTOS/queue.c **** 
 838:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 839:./Drivers/FreeRTOS/queue.c ****                     {
 840:./Drivers/FreeRTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 841:./Drivers/FreeRTOS/queue.c **** 
 842:./Drivers/FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 843:./Drivers/FreeRTOS/queue.c **** 
 844:./Drivers/FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 845:./Drivers/FreeRTOS/queue.c ****                         {
 846:./Drivers/FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 847:./Drivers/FreeRTOS/queue.c ****                             {
 848:./Drivers/FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 849:./Drivers/FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 850:./Drivers/FreeRTOS/queue.c ****                                  * in the queue has not changed. */
 851:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 852:./Drivers/FreeRTOS/queue.c ****                             }
 853:./Drivers/FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 854:./Drivers/FreeRTOS/queue.c ****                             {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 39


 855:./Drivers/FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 856:./Drivers/FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 857:./Drivers/FreeRTOS/queue.c ****                                  * unblock. A context switch is required. */
 858:./Drivers/FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 859:./Drivers/FreeRTOS/queue.c ****                             }
 860:./Drivers/FreeRTOS/queue.c ****                             else
 861:./Drivers/FreeRTOS/queue.c ****                             {
 862:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 863:./Drivers/FreeRTOS/queue.c ****                             }
 864:./Drivers/FreeRTOS/queue.c ****                         }
 865:./Drivers/FreeRTOS/queue.c ****                         else
 866:./Drivers/FreeRTOS/queue.c ****                         {
 867:./Drivers/FreeRTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 868:./Drivers/FreeRTOS/queue.c ****                              * queue then unblock it now. */
 869:./Drivers/FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 870:./Drivers/FreeRTOS/queue.c ****                             {
 871:./Drivers/FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 872:./Drivers/FreeRTOS/queue.c ****                                 {
 873:./Drivers/FreeRTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 874:./Drivers/FreeRTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 875:./Drivers/FreeRTOS/queue.c ****                                      * do this from within the critical section - the
 876:./Drivers/FreeRTOS/queue.c ****                                      * kernel takes care of that. */
 877:./Drivers/FreeRTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 878:./Drivers/FreeRTOS/queue.c ****                                 }
 879:./Drivers/FreeRTOS/queue.c ****                                 else
 880:./Drivers/FreeRTOS/queue.c ****                                 {
 881:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 882:./Drivers/FreeRTOS/queue.c ****                                 }
 883:./Drivers/FreeRTOS/queue.c ****                             }
 884:./Drivers/FreeRTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 885:./Drivers/FreeRTOS/queue.c ****                             {
 886:./Drivers/FreeRTOS/queue.c ****                                 /* This path is a special case that will only get
 887:./Drivers/FreeRTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 888:./Drivers/FreeRTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 889:./Drivers/FreeRTOS/queue.c ****                                  * different to that in which they were taken. */
 890:./Drivers/FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 891:./Drivers/FreeRTOS/queue.c ****                             }
 892:./Drivers/FreeRTOS/queue.c ****                             else
 893:./Drivers/FreeRTOS/queue.c ****                             {
 894:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 895:./Drivers/FreeRTOS/queue.c ****                             }
 896:./Drivers/FreeRTOS/queue.c ****                         }
 897:./Drivers/FreeRTOS/queue.c ****                     }
 898:./Drivers/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 899:./Drivers/FreeRTOS/queue.c ****                     {
 900:./Drivers/FreeRTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 1107              		.loc 1 900 42
 1108 00d4 3A68     		ldr	r2, [r7]
 1109 00d6 B968     		ldr	r1, [r7, #8]
 1110 00d8 386B     		ldr	r0, [r7, #48]
 1111 00da FFF7FEFF 		bl	prvCopyDataToQueue
 1112 00de F862     		str	r0, [r7, #44]
 901:./Drivers/FreeRTOS/queue.c **** 
 902:./Drivers/FreeRTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 903:./Drivers/FreeRTOS/queue.c ****                          * queue then unblock it now. */
 904:./Drivers/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1113              		.loc 1 904 29
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 40


 1114 00e0 3B6B     		ldr	r3, [r7, #48]
 1115 00e2 5B6A     		ldr	r3, [r3, #36]
 1116              		.loc 1 904 27
 1117 00e4 002B     		cmp	r3, #0
 1118 00e6 10D0     		beq	.L70
 905:./Drivers/FreeRTOS/queue.c ****                         {
 906:./Drivers/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 1119              		.loc 1 906 59
 1120 00e8 3B6B     		ldr	r3, [r7, #48]
 1121 00ea 2433     		adds	r3, r3, #36
 1122              		.loc 1 906 33
 1123 00ec 1846     		mov	r0, r3
 1124 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1125 00f2 0346     		mov	r3, r0
 1126              		.loc 1 906 31
 1127 00f4 002B     		cmp	r3, #0
 1128 00f6 13D0     		beq	.L71
 907:./Drivers/FreeRTOS/queue.c ****                             {
 908:./Drivers/FreeRTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 909:./Drivers/FreeRTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 910:./Drivers/FreeRTOS/queue.c ****                                  * this from within the critical section - the kernel
 911:./Drivers/FreeRTOS/queue.c ****                                  * takes care of that. */
 912:./Drivers/FreeRTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 1129              		.loc 1 912 33
 1130 00f8 3F4B     		ldr	r3, .L81
 1131 00fa 4FF08052 		mov	r2, #268435456
 1132 00fe 1A60     		str	r2, [r3]
 1133              		.syntax unified
 1134              	@ 912 "./Drivers/FreeRTOS/queue.c" 1
 1135 0100 BFF34F8F 		dsb
 1136              	@ 0 "" 2
 1137              	@ 912 "./Drivers/FreeRTOS/queue.c" 1
 1138 0104 BFF36F8F 		isb
 1139              	@ 0 "" 2
 1140              		.thumb
 1141              		.syntax unified
 1142 0108 0AE0     		b	.L71
 1143              	.L70:
 913:./Drivers/FreeRTOS/queue.c ****                             }
 914:./Drivers/FreeRTOS/queue.c ****                             else
 915:./Drivers/FreeRTOS/queue.c ****                             {
 916:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 917:./Drivers/FreeRTOS/queue.c ****                             }
 918:./Drivers/FreeRTOS/queue.c ****                         }
 919:./Drivers/FreeRTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 1144              		.loc 1 919 32
 1145 010a FB6A     		ldr	r3, [r7, #44]
 1146 010c 002B     		cmp	r3, #0
 1147 010e 07D0     		beq	.L71
 920:./Drivers/FreeRTOS/queue.c ****                         {
 921:./Drivers/FreeRTOS/queue.c ****                             /* This path is a special case that will only get
 922:./Drivers/FreeRTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 923:./Drivers/FreeRTOS/queue.c ****                              * the mutexes were given back in an order that is
 924:./Drivers/FreeRTOS/queue.c ****                              * different to that in which they were taken. */
 925:./Drivers/FreeRTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 1148              		.loc 1 925 29
 1149 0110 394B     		ldr	r3, .L81
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 41


 1150 0112 4FF08052 		mov	r2, #268435456
 1151 0116 1A60     		str	r2, [r3]
 1152              		.syntax unified
 1153              	@ 925 "./Drivers/FreeRTOS/queue.c" 1
 1154 0118 BFF34F8F 		dsb
 1155              	@ 0 "" 2
 1156              	@ 925 "./Drivers/FreeRTOS/queue.c" 1
 1157 011c BFF36F8F 		isb
 1158              	@ 0 "" 2
 1159              		.thumb
 1160              		.syntax unified
 1161              	.L71:
 926:./Drivers/FreeRTOS/queue.c ****                         }
 927:./Drivers/FreeRTOS/queue.c ****                         else
 928:./Drivers/FreeRTOS/queue.c ****                         {
 929:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 930:./Drivers/FreeRTOS/queue.c ****                         }
 931:./Drivers/FreeRTOS/queue.c ****                     }
 932:./Drivers/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 933:./Drivers/FreeRTOS/queue.c **** 
 934:./Drivers/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 1162              		.loc 1 934 17
 1163 0120 FFF7FEFF 		bl	vPortExitCritical
 935:./Drivers/FreeRTOS/queue.c ****                 return pdPASS;
 1164              		.loc 1 935 24
 1165 0124 0123     		movs	r3, #1
 1166 0126 63E0     		b	.L80
 1167              	.L69:
 936:./Drivers/FreeRTOS/queue.c ****             }
 937:./Drivers/FreeRTOS/queue.c ****             else
 938:./Drivers/FreeRTOS/queue.c ****             {
 939:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 1168              		.loc 1 939 34
 1169 0128 7B68     		ldr	r3, [r7, #4]
 1170              		.loc 1 939 19
 1171 012a 002B     		cmp	r3, #0
 1172 012c 03D1     		bne	.L73
 940:./Drivers/FreeRTOS/queue.c ****                 {
 941:./Drivers/FreeRTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 942:./Drivers/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
 943:./Drivers/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 1173              		.loc 1 943 21
 1174 012e FFF7FEFF 		bl	vPortExitCritical
 944:./Drivers/FreeRTOS/queue.c **** 
 945:./Drivers/FreeRTOS/queue.c ****                     /* Return to the original privilege level before exiting
 946:./Drivers/FreeRTOS/queue.c ****                      * the function. */
 947:./Drivers/FreeRTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 948:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
 1175              		.loc 1 948 28
 1176 0132 0023     		movs	r3, #0
 1177 0134 5CE0     		b	.L80
 1178              	.L73:
 949:./Drivers/FreeRTOS/queue.c ****                 }
 950:./Drivers/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 1179              		.loc 1 950 24
 1180 0136 7B6B     		ldr	r3, [r7, #52]
 1181 0138 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 42


 1182 013a 06D1     		bne	.L74
 951:./Drivers/FreeRTOS/queue.c ****                 {
 952:./Drivers/FreeRTOS/queue.c ****                     /* The queue was full and a block time was specified so
 953:./Drivers/FreeRTOS/queue.c ****                      * configure the timeout structure. */
 954:./Drivers/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 1183              		.loc 1 954 21
 1184 013c 07F11403 		add	r3, r7, #20
 1185 0140 1846     		mov	r0, r3
 1186 0142 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 955:./Drivers/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1187              		.loc 1 955 35
 1188 0146 0123     		movs	r3, #1
 1189 0148 7B63     		str	r3, [r7, #52]
 1190              	.L74:
 956:./Drivers/FreeRTOS/queue.c ****                 }
 957:./Drivers/FreeRTOS/queue.c ****                 else
 958:./Drivers/FreeRTOS/queue.c ****                 {
 959:./Drivers/FreeRTOS/queue.c ****                     /* Entry time was already set. */
 960:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 961:./Drivers/FreeRTOS/queue.c ****                 }
 962:./Drivers/FreeRTOS/queue.c ****             }
 963:./Drivers/FreeRTOS/queue.c ****         }
 964:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 1191              		.loc 1 964 9
 1192 014a FFF7FEFF 		bl	vPortExitCritical
 965:./Drivers/FreeRTOS/queue.c **** 
 966:./Drivers/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 967:./Drivers/FreeRTOS/queue.c ****          * now the critical section has been exited. */
 968:./Drivers/FreeRTOS/queue.c **** 
 969:./Drivers/FreeRTOS/queue.c ****         vTaskSuspendAll();
 1193              		.loc 1 969 9
 1194 014e FFF7FEFF 		bl	vTaskSuspendAll
 970:./Drivers/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 1195              		.loc 1 970 9
 1196 0152 FFF7FEFF 		bl	vPortEnterCritical
 1197 0156 3B6B     		ldr	r3, [r7, #48]
 1198 0158 93F84430 		ldrb	r3, [r3, #68]
 1199 015c 5BB2     		sxtb	r3, r3
 1200 015e B3F1FF3F 		cmp	r3, #-1
 1201 0162 03D1     		bne	.L75
 1202              		.loc 1 970 9 is_stmt 0 discriminator 1
 1203 0164 3B6B     		ldr	r3, [r7, #48]
 1204 0166 0022     		movs	r2, #0
 1205 0168 83F84420 		strb	r2, [r3, #68]
 1206              	.L75:
 1207              		.loc 1 970 9 discriminator 3
 1208 016c 3B6B     		ldr	r3, [r7, #48]
 1209 016e 93F84530 		ldrb	r3, [r3, #69]
 1210 0172 5BB2     		sxtb	r3, r3
 1211 0174 B3F1FF3F 		cmp	r3, #-1
 1212 0178 03D1     		bne	.L76
 1213              		.loc 1 970 9 discriminator 4
 1214 017a 3B6B     		ldr	r3, [r7, #48]
 1215 017c 0022     		movs	r2, #0
 1216 017e 83F84520 		strb	r2, [r3, #69]
 1217              	.L76:
 1218              		.loc 1 970 9 discriminator 6
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 43


 1219 0182 FFF7FEFF 		bl	vPortExitCritical
 971:./Drivers/FreeRTOS/queue.c **** 
 972:./Drivers/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 973:./Drivers/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1220              		.loc 1 973 13 is_stmt 1 discriminator 6
 1221 0186 3A1D     		adds	r2, r7, #4
 1222 0188 07F11403 		add	r3, r7, #20
 1223 018c 1146     		mov	r1, r2
 1224 018e 1846     		mov	r0, r3
 1225 0190 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1226 0194 0346     		mov	r3, r0
 1227              		.loc 1 973 11 discriminator 6
 1228 0196 002B     		cmp	r3, #0
 1229 0198 24D1     		bne	.L77
 974:./Drivers/FreeRTOS/queue.c ****         {
 975:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1230              		.loc 1 975 17
 1231 019a 386B     		ldr	r0, [r7, #48]
 1232 019c FFF7FEFF 		bl	prvIsQueueFull
 1233 01a0 0346     		mov	r3, r0
 1234              		.loc 1 975 15
 1235 01a2 002B     		cmp	r3, #0
 1236 01a4 18D0     		beq	.L78
 976:./Drivers/FreeRTOS/queue.c ****             {
 977:./Drivers/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 978:./Drivers/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1237              		.loc 1 978 17
 1238 01a6 3B6B     		ldr	r3, [r7, #48]
 1239 01a8 1033     		adds	r3, r3, #16
 1240 01aa 7A68     		ldr	r2, [r7, #4]
 1241 01ac 1146     		mov	r1, r2
 1242 01ae 1846     		mov	r0, r3
 1243 01b0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 979:./Drivers/FreeRTOS/queue.c **** 
 980:./Drivers/FreeRTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 981:./Drivers/FreeRTOS/queue.c ****                  * event list. It is possible that interrupts occurring now
 982:./Drivers/FreeRTOS/queue.c ****                  * remove this task from the event list again - but as the
 983:./Drivers/FreeRTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 984:./Drivers/FreeRTOS/queue.c ****                  * ready list instead of the actual ready list. */
 985:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1244              		.loc 1 985 17
 1245 01b4 386B     		ldr	r0, [r7, #48]
 1246 01b6 FFF7FEFF 		bl	prvUnlockQueue
 986:./Drivers/FreeRTOS/queue.c **** 
 987:./Drivers/FreeRTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 988:./Drivers/FreeRTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 989:./Drivers/FreeRTOS/queue.c ****                  * task is already in the ready list before it yields - in which
 990:./Drivers/FreeRTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 991:./Drivers/FreeRTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 992:./Drivers/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 1247              		.loc 1 992 21
 1248 01ba FFF7FEFF 		bl	xTaskResumeAll
 1249 01be 0346     		mov	r3, r0
 1250              		.loc 1 992 19
 1251 01c0 002B     		cmp	r3, #0
 1252 01c2 7FF47CAF 		bne	.L66
 993:./Drivers/FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 44


 994:./Drivers/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 1253              		.loc 1 994 21
 1254 01c6 0C4B     		ldr	r3, .L81
 1255 01c8 4FF08052 		mov	r2, #268435456
 1256 01cc 1A60     		str	r2, [r3]
 1257              		.syntax unified
 1258              	@ 994 "./Drivers/FreeRTOS/queue.c" 1
 1259 01ce BFF34F8F 		dsb
 1260              	@ 0 "" 2
 1261              	@ 994 "./Drivers/FreeRTOS/queue.c" 1
 1262 01d2 BFF36F8F 		isb
 1263              	@ 0 "" 2
 1264              		.thumb
 1265              		.syntax unified
 1266 01d6 72E7     		b	.L66
 1267              	.L78:
 995:./Drivers/FreeRTOS/queue.c ****                 }
 996:./Drivers/FreeRTOS/queue.c ****             }
 997:./Drivers/FreeRTOS/queue.c ****             else
 998:./Drivers/FreeRTOS/queue.c ****             {
 999:./Drivers/FreeRTOS/queue.c ****                 /* Try again. */
1000:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1268              		.loc 1 1000 17
 1269 01d8 386B     		ldr	r0, [r7, #48]
 1270 01da FFF7FEFF 		bl	prvUnlockQueue
1001:./Drivers/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1271              		.loc 1 1001 26
 1272 01de FFF7FEFF 		bl	xTaskResumeAll
 1273 01e2 6CE7     		b	.L66
 1274              	.L77:
1002:./Drivers/FreeRTOS/queue.c ****             }
1003:./Drivers/FreeRTOS/queue.c ****         }
1004:./Drivers/FreeRTOS/queue.c ****         else
1005:./Drivers/FreeRTOS/queue.c ****         {
1006:./Drivers/FreeRTOS/queue.c ****             /* The timeout has expired. */
1007:./Drivers/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 1275              		.loc 1 1007 13
 1276 01e4 386B     		ldr	r0, [r7, #48]
 1277 01e6 FFF7FEFF 		bl	prvUnlockQueue
1008:./Drivers/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 1278              		.loc 1 1008 22
 1279 01ea FFF7FEFF 		bl	xTaskResumeAll
1009:./Drivers/FreeRTOS/queue.c **** 
1010:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1011:./Drivers/FreeRTOS/queue.c ****             return errQUEUE_FULL;
 1280              		.loc 1 1011 20
 1281 01ee 0023     		movs	r3, #0
 1282              	.L80:
1012:./Drivers/FreeRTOS/queue.c ****         }
1013:./Drivers/FreeRTOS/queue.c ****     } /*lint -restore */
1014:./Drivers/FreeRTOS/queue.c **** }
 1283              		.loc 1 1014 1 discriminator 7
 1284 01f0 1846     		mov	r0, r3
 1285 01f2 3837     		adds	r7, r7, #56
 1286              	.LCFI43:
 1287              		.cfi_def_cfa_offset 8
 1288 01f4 BD46     		mov	sp, r7
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 45


 1289              	.LCFI44:
 1290              		.cfi_def_cfa_register 13
 1291              		@ sp needed
 1292 01f6 80BD     		pop	{r7, pc}
 1293              	.L82:
 1294              		.align	2
 1295              	.L81:
 1296 01f8 04ED00E0 		.word	-536810236
 1297              		.cfi_endproc
 1298              	.LFE13:
 1300              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1301              		.align	1
 1302              		.global	xQueueGenericSendFromISR
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu fpv4-sp-d16
 1308              	xQueueGenericSendFromISR:
 1309              	.LFB14:
1015:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1016:./Drivers/FreeRTOS/queue.c **** 
1017:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1018:./Drivers/FreeRTOS/queue.c ****                                      const void * const pvItemToQueue,
1019:./Drivers/FreeRTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1020:./Drivers/FreeRTOS/queue.c ****                                      const BaseType_t xCopyPosition )
1021:./Drivers/FreeRTOS/queue.c **** {
 1310              		.loc 1 1021 1
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 64
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314 0000 80B5     		push	{r7, lr}
 1315              	.LCFI45:
 1316              		.cfi_def_cfa_offset 8
 1317              		.cfi_offset 7, -8
 1318              		.cfi_offset 14, -4
 1319 0002 90B0     		sub	sp, sp, #64
 1320              	.LCFI46:
 1321              		.cfi_def_cfa_offset 72
 1322 0004 00AF     		add	r7, sp, #0
 1323              	.LCFI47:
 1324              		.cfi_def_cfa_register 7
 1325 0006 F860     		str	r0, [r7, #12]
 1326 0008 B960     		str	r1, [r7, #8]
 1327 000a 7A60     		str	r2, [r7, #4]
 1328 000c 3B60     		str	r3, [r7]
1022:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
1023:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1024:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1329              		.loc 1 1024 21
 1330 000e FB68     		ldr	r3, [r7, #12]
 1331 0010 BB63     		str	r3, [r7, #56]
1025:./Drivers/FreeRTOS/queue.c **** 
1026:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 1332              		.loc 1 1026 5
 1333 0012 BB6B     		ldr	r3, [r7, #56]
 1334 0014 002B     		cmp	r3, #0
 1335 0016 0AD1     		bne	.L84
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 46


 1336              	.LBB133:
 1337              	.LBB134:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1338              		.loc 2 198 9
 1339              		.syntax unified
 1340              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1341 0018 4FF05003 			mov r3, #80												
 1342 001c 83F31188 		msr basepri, r3											
 1343 0020 BFF36F8F 		isb														
 1344 0024 BFF34F8F 		dsb														
 1345              	
 1346              	@ 0 "" 2
 1347              		.thumb
 1348              		.syntax unified
 1349 0028 BB62     		str	r3, [r7, #40]
 1350              		.loc 2 206 5
 1351 002a 00BF     		nop
 1352              	.L85:
 1353              	.LBE134:
 1354              	.LBE133:
 1355              		.loc 1 1026 5 discriminator 1
 1356 002c FEE7     		b	.L85
 1357              	.L84:
1027:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1358              		.loc 1 1027 5
 1359 002e BB68     		ldr	r3, [r7, #8]
 1360 0030 002B     		cmp	r3, #0
 1361 0032 03D1     		bne	.L86
 1362              		.loc 1 1027 5 is_stmt 0 discriminator 2
 1363 0034 BB6B     		ldr	r3, [r7, #56]
 1364 0036 1B6C     		ldr	r3, [r3, #64]
 1365 0038 002B     		cmp	r3, #0
 1366 003a 01D1     		bne	.L87
 1367              	.L86:
 1368              		.loc 1 1027 5 discriminator 3
 1369 003c 0123     		movs	r3, #1
 1370 003e 00E0     		b	.L88
 1371              	.L87:
 1372              		.loc 1 1027 5 discriminator 4
 1373 0040 0023     		movs	r3, #0
 1374              	.L88:
 1375              		.loc 1 1027 5 discriminator 6
 1376 0042 002B     		cmp	r3, #0
 1377 0044 0AD1     		bne	.L89
 1378              	.LBB135:
 1379              	.LBB136:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1380              		.loc 2 198 9 is_stmt 1
 1381              		.syntax unified
 1382              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1383 0046 4FF05003 			mov r3, #80												
 1384 004a 83F31188 		msr basepri, r3											
 1385 004e BFF36F8F 		isb														
 1386 0052 BFF34F8F 		dsb														
 1387              	
 1388              	@ 0 "" 2
 1389              		.thumb
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 47


 1390              		.syntax unified
 1391 0056 7B62     		str	r3, [r7, #36]
 1392              		.loc 2 206 5
 1393 0058 00BF     		nop
 1394              	.L90:
 1395              	.LBE136:
 1396              	.LBE135:
 1397              		.loc 1 1027 5 discriminator 2
 1398 005a FEE7     		b	.L90
 1399              	.L89:
1028:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1400              		.loc 1 1028 5
 1401 005c 3B68     		ldr	r3, [r7]
 1402 005e 022B     		cmp	r3, #2
 1403 0060 03D1     		bne	.L91
 1404              		.loc 1 1028 5 is_stmt 0 discriminator 2
 1405 0062 BB6B     		ldr	r3, [r7, #56]
 1406 0064 DB6B     		ldr	r3, [r3, #60]
 1407 0066 012B     		cmp	r3, #1
 1408 0068 01D1     		bne	.L92
 1409              	.L91:
 1410              		.loc 1 1028 5 discriminator 3
 1411 006a 0123     		movs	r3, #1
 1412 006c 00E0     		b	.L93
 1413              	.L92:
 1414              		.loc 1 1028 5 discriminator 4
 1415 006e 0023     		movs	r3, #0
 1416              	.L93:
 1417              		.loc 1 1028 5 discriminator 6
 1418 0070 002B     		cmp	r3, #0
 1419 0072 0AD1     		bne	.L94
 1420              	.LBB137:
 1421              	.LBB138:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1422              		.loc 2 198 9 is_stmt 1
 1423              		.syntax unified
 1424              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1425 0074 4FF05003 			mov r3, #80												
 1426 0078 83F31188 		msr basepri, r3											
 1427 007c BFF36F8F 		isb														
 1428 0080 BFF34F8F 		dsb														
 1429              	
 1430              	@ 0 "" 2
 1431              		.thumb
 1432              		.syntax unified
 1433 0084 3B62     		str	r3, [r7, #32]
 1434              		.loc 2 206 5
 1435 0086 00BF     		nop
 1436              	.L95:
 1437              	.LBE138:
 1438              	.LBE137:
 1439              		.loc 1 1028 5 discriminator 3
 1440 0088 FEE7     		b	.L95
 1441              	.L94:
1029:./Drivers/FreeRTOS/queue.c **** 
1030:./Drivers/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1031:./Drivers/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 48


1032:./Drivers/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1033:./Drivers/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1034:./Drivers/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1035:./Drivers/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1036:./Drivers/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1037:./Drivers/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1038:./Drivers/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1039:./Drivers/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1040:./Drivers/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1041:./Drivers/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1042:./Drivers/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1043:./Drivers/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1044:./Drivers/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1442              		.loc 1 1044 5
 1443 008a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1444              	.LBB139:
 1445              	.LBB140:
 207:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 208:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 209:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 210:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 211:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 212:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 213:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1446              		.loc 2 214 9
 1447              		.syntax unified
 1448              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1449 008e EFF31182 			mrs r2, basepri											
 1450 0092 4FF05003 		mov r3, #80												
 1451 0096 83F31188 		msr basepri, r3											
 1452 009a BFF36F8F 		isb														
 1453 009e BFF34F8F 		dsb														
 1454              	
 1455              	@ 0 "" 2
 1456              		.thumb
 1457              		.syntax unified
 1458 00a2 FA61     		str	r2, [r7, #28]
 1459 00a4 BB61     		str	r3, [r7, #24]
 215:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 216:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mrs %0, basepri											\n"\
 217:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	mov %1, %2												\n"\
 218:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %1											\n"\
 219:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	isb														\n"\
 220:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	dsb														\n"\
 221:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 222:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 223:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 224:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 225:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****          * warnings. */
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         return ulOriginalBASEPRI;
 1460              		.loc 2 226 16
 1461 00a6 FB69     		ldr	r3, [r7, #28]
 1462              	.LBE140:
 1463              	.LBE139:
1045:./Drivers/FreeRTOS/queue.c **** 
1046:./Drivers/FreeRTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 49


1047:./Drivers/FreeRTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1048:./Drivers/FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1049:./Drivers/FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1050:./Drivers/FreeRTOS/queue.c ****      * post). */
1051:./Drivers/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1464              		.loc 1 1051 30
 1465 00a8 7B63     		str	r3, [r7, #52]
1052:./Drivers/FreeRTOS/queue.c ****     {
1053:./Drivers/FreeRTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
 1466              		.loc 1 1053 22
 1467 00aa BB6B     		ldr	r3, [r7, #56]
 1468 00ac 9A6B     		ldr	r2, [r3, #56]
 1469              		.loc 1 1053 51
 1470 00ae BB6B     		ldr	r3, [r7, #56]
 1471 00b0 DB6B     		ldr	r3, [r3, #60]
 1472              		.loc 1 1053 11
 1473 00b2 9A42     		cmp	r2, r3
 1474 00b4 02D3     		bcc	.L97
 1475              		.loc 1 1053 64 discriminator 1
 1476 00b6 3B68     		ldr	r3, [r7]
 1477 00b8 022B     		cmp	r3, #2
 1478 00ba 3ED1     		bne	.L98
 1479              	.L97:
 1480              	.LBB141:
1054:./Drivers/FreeRTOS/queue.c ****         {
1055:./Drivers/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1481              		.loc 1 1055 26
 1482 00bc BB6B     		ldr	r3, [r7, #56]
 1483 00be 93F84530 		ldrb	r3, [r3, #69]
 1484 00c2 87F83330 		strb	r3, [r7, #51]
1056:./Drivers/FreeRTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1485              		.loc 1 1056 31
 1486 00c6 BB6B     		ldr	r3, [r7, #56]
 1487 00c8 9B6B     		ldr	r3, [r3, #56]
 1488 00ca FB62     		str	r3, [r7, #44]
1057:./Drivers/FreeRTOS/queue.c **** 
1058:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1059:./Drivers/FreeRTOS/queue.c **** 
1060:./Drivers/FreeRTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1061:./Drivers/FreeRTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1062:./Drivers/FreeRTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1063:./Drivers/FreeRTOS/queue.c ****              *  called here even though the disinherit function does not check if
1064:./Drivers/FreeRTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1065:./Drivers/FreeRTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1489              		.loc 1 1065 22
 1490 00cc 3A68     		ldr	r2, [r7]
 1491 00ce B968     		ldr	r1, [r7, #8]
 1492 00d0 B86B     		ldr	r0, [r7, #56]
 1493 00d2 FFF7FEFF 		bl	prvCopyDataToQueue
1066:./Drivers/FreeRTOS/queue.c **** 
1067:./Drivers/FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1068:./Drivers/FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1069:./Drivers/FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1494              		.loc 1 1069 15
 1495 00d6 97F93330 		ldrsb	r3, [r7, #51]
 1496 00da B3F1FF3F 		cmp	r3, #-1
 1497 00de 12D1     		bne	.L99
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 50


1070:./Drivers/FreeRTOS/queue.c ****             {
1071:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1072:./Drivers/FreeRTOS/queue.c ****                     {
1073:./Drivers/FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1074:./Drivers/FreeRTOS/queue.c ****                         {
1075:./Drivers/FreeRTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1076:./Drivers/FreeRTOS/queue.c ****                             {
1077:./Drivers/FreeRTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1078:./Drivers/FreeRTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1079:./Drivers/FreeRTOS/queue.c ****                                  * in the queue has not changed. */
1080:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1081:./Drivers/FreeRTOS/queue.c ****                             }
1082:./Drivers/FreeRTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1083:./Drivers/FreeRTOS/queue.c ****                             {
1084:./Drivers/FreeRTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1085:./Drivers/FreeRTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1086:./Drivers/FreeRTOS/queue.c ****                                  * unblock.  A context switch is required. */
1087:./Drivers/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1088:./Drivers/FreeRTOS/queue.c ****                                 {
1089:./Drivers/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1090:./Drivers/FreeRTOS/queue.c ****                                 }
1091:./Drivers/FreeRTOS/queue.c ****                                 else
1092:./Drivers/FreeRTOS/queue.c ****                                 {
1093:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1094:./Drivers/FreeRTOS/queue.c ****                                 }
1095:./Drivers/FreeRTOS/queue.c ****                             }
1096:./Drivers/FreeRTOS/queue.c ****                             else
1097:./Drivers/FreeRTOS/queue.c ****                             {
1098:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1099:./Drivers/FreeRTOS/queue.c ****                             }
1100:./Drivers/FreeRTOS/queue.c ****                         }
1101:./Drivers/FreeRTOS/queue.c ****                         else
1102:./Drivers/FreeRTOS/queue.c ****                         {
1103:./Drivers/FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1104:./Drivers/FreeRTOS/queue.c ****                             {
1105:./Drivers/FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1106:./Drivers/FreeRTOS/queue.c ****                                 {
1107:./Drivers/FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1108:./Drivers/FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1109:./Drivers/FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1110:./Drivers/FreeRTOS/queue.c ****                                     {
1111:./Drivers/FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1112:./Drivers/FreeRTOS/queue.c ****                                     }
1113:./Drivers/FreeRTOS/queue.c ****                                     else
1114:./Drivers/FreeRTOS/queue.c ****                                     {
1115:./Drivers/FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1116:./Drivers/FreeRTOS/queue.c ****                                     }
1117:./Drivers/FreeRTOS/queue.c ****                                 }
1118:./Drivers/FreeRTOS/queue.c ****                                 else
1119:./Drivers/FreeRTOS/queue.c ****                                 {
1120:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1121:./Drivers/FreeRTOS/queue.c ****                                 }
1122:./Drivers/FreeRTOS/queue.c ****                             }
1123:./Drivers/FreeRTOS/queue.c ****                             else
1124:./Drivers/FreeRTOS/queue.c ****                             {
1125:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1126:./Drivers/FreeRTOS/queue.c ****                             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 51


1127:./Drivers/FreeRTOS/queue.c ****                         }
1128:./Drivers/FreeRTOS/queue.c ****                     }
1129:./Drivers/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1130:./Drivers/FreeRTOS/queue.c ****                     {
1131:./Drivers/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1498              		.loc 1 1131 29
 1499 00e0 BB6B     		ldr	r3, [r7, #56]
 1500 00e2 5B6A     		ldr	r3, [r3, #36]
 1501              		.loc 1 1131 27
 1502 00e4 002B     		cmp	r3, #0
 1503 00e6 25D0     		beq	.L100
1132:./Drivers/FreeRTOS/queue.c ****                         {
1133:./Drivers/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 1504              		.loc 1 1133 59
 1505 00e8 BB6B     		ldr	r3, [r7, #56]
 1506 00ea 2433     		adds	r3, r3, #36
 1507              		.loc 1 1133 33
 1508 00ec 1846     		mov	r0, r3
 1509 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 1510 00f2 0346     		mov	r3, r0
 1511              		.loc 1 1133 31
 1512 00f4 002B     		cmp	r3, #0
 1513 00f6 1DD0     		beq	.L100
1134:./Drivers/FreeRTOS/queue.c ****                             {
1135:./Drivers/FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1136:./Drivers/FreeRTOS/queue.c ****                                  * context switch is required. */
1137:./Drivers/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1514              		.loc 1 1137 35
 1515 00f8 7B68     		ldr	r3, [r7, #4]
 1516 00fa 002B     		cmp	r3, #0
 1517 00fc 1AD0     		beq	.L100
1138:./Drivers/FreeRTOS/queue.c ****                                 {
1139:./Drivers/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1518              		.loc 1 1139 64
 1519 00fe 7B68     		ldr	r3, [r7, #4]
 1520 0100 0122     		movs	r2, #1
 1521 0102 1A60     		str	r2, [r3]
 1522 0104 16E0     		b	.L100
 1523              	.L99:
1140:./Drivers/FreeRTOS/queue.c ****                                 }
1141:./Drivers/FreeRTOS/queue.c ****                                 else
1142:./Drivers/FreeRTOS/queue.c ****                                 {
1143:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1144:./Drivers/FreeRTOS/queue.c ****                                 }
1145:./Drivers/FreeRTOS/queue.c ****                             }
1146:./Drivers/FreeRTOS/queue.c ****                             else
1147:./Drivers/FreeRTOS/queue.c ****                             {
1148:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1149:./Drivers/FreeRTOS/queue.c ****                             }
1150:./Drivers/FreeRTOS/queue.c ****                         }
1151:./Drivers/FreeRTOS/queue.c ****                         else
1152:./Drivers/FreeRTOS/queue.c ****                         {
1153:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1154:./Drivers/FreeRTOS/queue.c ****                         }
1155:./Drivers/FreeRTOS/queue.c **** 
1156:./Drivers/FreeRTOS/queue.c ****                         /* Not used in this path. */
1157:./Drivers/FreeRTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 52


1158:./Drivers/FreeRTOS/queue.c ****                     }
1159:./Drivers/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1160:./Drivers/FreeRTOS/queue.c ****             }
1161:./Drivers/FreeRTOS/queue.c ****             else
1162:./Drivers/FreeRTOS/queue.c ****             {
1163:./Drivers/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1164:./Drivers/FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1165:./Drivers/FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1524              		.loc 1 1165 17
 1525 0106 97F93330 		ldrsb	r3, [r7, #51]
 1526 010a 7F2B     		cmp	r3, #127
 1527 010c 0AD1     		bne	.L101
 1528              	.LBB142:
 1529              	.LBB143:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1530              		.loc 2 198 9
 1531              		.syntax unified
 1532              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1533 010e 4FF05003 			mov r3, #80												
 1534 0112 83F31188 		msr basepri, r3											
 1535 0116 BFF36F8F 		isb														
 1536 011a BFF34F8F 		dsb														
 1537              	
 1538              	@ 0 "" 2
 1539              		.thumb
 1540              		.syntax unified
 1541 011e 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1542              		.loc 2 206 5
 1543 0120 00BF     		nop
 1544              	.L102:
 1545              	.LBE143:
 1546              	.LBE142:
 1547              		.loc 1 1165 17 discriminator 6
 1548 0122 FEE7     		b	.L102
 1549              	.L101:
1166:./Drivers/FreeRTOS/queue.c **** 
1167:./Drivers/FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1550              		.loc 1 1167 57
 1551 0124 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 1552 0128 0133     		adds	r3, r3, #1
 1553 012a DBB2     		uxtb	r3, r3
 1554              		.loc 1 1167 36
 1555 012c 5AB2     		sxtb	r2, r3
 1556              		.loc 1 1167 34
 1557 012e BB6B     		ldr	r3, [r7, #56]
 1558 0130 83F84520 		strb	r2, [r3, #69]
 1559              	.L100:
1168:./Drivers/FreeRTOS/queue.c ****             }
1169:./Drivers/FreeRTOS/queue.c **** 
1170:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 1560              		.loc 1 1170 21
 1561 0134 0123     		movs	r3, #1
 1562 0136 FB63     		str	r3, [r7, #60]
 1563              	.LBE141:
1054:./Drivers/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1564              		.loc 1 1054 9
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 53


 1565 0138 01E0     		b	.L103
 1566              	.L98:
1171:./Drivers/FreeRTOS/queue.c ****         }
1172:./Drivers/FreeRTOS/queue.c ****         else
1173:./Drivers/FreeRTOS/queue.c ****         {
1174:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1175:./Drivers/FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1567              		.loc 1 1175 21
 1568 013a 0023     		movs	r3, #0
 1569 013c FB63     		str	r3, [r7, #60]
 1570              	.L103:
 1571 013e 7B6B     		ldr	r3, [r7, #52]
 1572 0140 3B61     		str	r3, [r7, #16]
 1573              	.LBB144:
 1574              	.LBB145:
 227:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 228:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 229:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 230:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 231:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     {
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         __asm volatile
 1575              		.loc 2 232 9
 1576 0142 3B69     		ldr	r3, [r7, #16]
 1577              		.syntax unified
 1578              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1579 0144 83F31188 			msr basepri, r3	
 1580              	@ 0 "" 2
 233:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 234:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****             "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
 235:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         );
 236:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1581              		.loc 2 236 5
 1582              		.thumb
 1583              		.syntax unified
 1584 0148 00BF     		nop
 1585              	.LBE145:
 1586              	.LBE144:
1176:./Drivers/FreeRTOS/queue.c ****         }
1177:./Drivers/FreeRTOS/queue.c ****     }
1178:./Drivers/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1179:./Drivers/FreeRTOS/queue.c **** 
1180:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 1587              		.loc 1 1180 12
 1588 014a FB6B     		ldr	r3, [r7, #60]
1181:./Drivers/FreeRTOS/queue.c **** }
 1589              		.loc 1 1181 1
 1590 014c 1846     		mov	r0, r3
 1591 014e 4037     		adds	r7, r7, #64
 1592              	.LCFI48:
 1593              		.cfi_def_cfa_offset 8
 1594 0150 BD46     		mov	sp, r7
 1595              	.LCFI49:
 1596              		.cfi_def_cfa_register 13
 1597              		@ sp needed
 1598 0152 80BD     		pop	{r7, pc}
 1599              		.cfi_endproc
 1600              	.LFE14:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 54


 1602              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1603              		.align	1
 1604              		.global	xQueueGiveFromISR
 1605              		.syntax unified
 1606              		.thumb
 1607              		.thumb_func
 1608              		.fpu fpv4-sp-d16
 1610              	xQueueGiveFromISR:
 1611              	.LFB15:
1182:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1183:./Drivers/FreeRTOS/queue.c **** 
1184:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1185:./Drivers/FreeRTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1186:./Drivers/FreeRTOS/queue.c **** {
 1612              		.loc 1 1186 1
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 56
 1615              		@ frame_needed = 1, uses_anonymous_args = 0
 1616 0000 80B5     		push	{r7, lr}
 1617              	.LCFI50:
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 7, -8
 1620              		.cfi_offset 14, -4
 1621 0002 8EB0     		sub	sp, sp, #56
 1622              	.LCFI51:
 1623              		.cfi_def_cfa_offset 64
 1624 0004 00AF     		add	r7, sp, #0
 1625              	.LCFI52:
 1626              		.cfi_def_cfa_register 7
 1627 0006 7860     		str	r0, [r7, #4]
 1628 0008 3960     		str	r1, [r7]
1187:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
1188:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1189:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1629              		.loc 1 1189 21
 1630 000a 7B68     		ldr	r3, [r7, #4]
 1631 000c 3B63     		str	r3, [r7, #48]
1190:./Drivers/FreeRTOS/queue.c **** 
1191:./Drivers/FreeRTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1192:./Drivers/FreeRTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1193:./Drivers/FreeRTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1194:./Drivers/FreeRTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1195:./Drivers/FreeRTOS/queue.c ****      * post). */
1196:./Drivers/FreeRTOS/queue.c **** 
1197:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 1632              		.loc 1 1197 5
 1633 000e 3B6B     		ldr	r3, [r7, #48]
 1634 0010 002B     		cmp	r3, #0
 1635 0012 0AD1     		bne	.L106
 1636              	.LBB146:
 1637              	.LBB147:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1638              		.loc 2 198 9
 1639              		.syntax unified
 1640              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1641 0014 4FF05003 			mov r3, #80												
 1642 0018 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 55


 1643 001c BFF36F8F 		isb														
 1644 0020 BFF34F8F 		dsb														
 1645              	
 1646              	@ 0 "" 2
 1647              		.thumb
 1648              		.syntax unified
 1649 0024 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1650              		.loc 2 206 5
 1651 0026 00BF     		nop
 1652              	.L107:
 1653              	.LBE147:
 1654              	.LBE146:
 1655              		.loc 1 1197 5 discriminator 1
 1656 0028 FEE7     		b	.L107
 1657              	.L106:
1198:./Drivers/FreeRTOS/queue.c **** 
1199:./Drivers/FreeRTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1200:./Drivers/FreeRTOS/queue.c ****      * if the item size is not 0. */
1201:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 1658              		.loc 1 1201 5
 1659 002a 3B6B     		ldr	r3, [r7, #48]
 1660 002c 1B6C     		ldr	r3, [r3, #64]
 1661 002e 002B     		cmp	r3, #0
 1662 0030 0AD0     		beq	.L108
 1663              	.LBB148:
 1664              	.LBB149:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1665              		.loc 2 198 9
 1666              		.syntax unified
 1667              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1668 0032 4FF05003 			mov r3, #80												
 1669 0036 83F31188 		msr basepri, r3											
 1670 003a BFF36F8F 		isb														
 1671 003e BFF34F8F 		dsb														
 1672              	
 1673              	@ 0 "" 2
 1674              		.thumb
 1675              		.syntax unified
 1676 0042 FB61     		str	r3, [r7, #28]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1677              		.loc 2 206 5
 1678 0044 00BF     		nop
 1679              	.L109:
 1680              	.LBE149:
 1681              	.LBE148:
 1682              		.loc 1 1201 5 discriminator 2
 1683 0046 FEE7     		b	.L109
 1684              	.L108:
1202:./Drivers/FreeRTOS/queue.c **** 
1203:./Drivers/FreeRTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1204:./Drivers/FreeRTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1205:./Drivers/FreeRTOS/queue.c ****      * interrupts, only tasks. */
1206:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
 1685              		.loc 1 1206 5
 1686 0048 3B6B     		ldr	r3, [r7, #48]
 1687 004a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 56


 1688 004c 002B     		cmp	r3, #0
 1689 004e 03D1     		bne	.L110
 1690              		.loc 1 1206 5 is_stmt 0 discriminator 2
 1691 0050 3B6B     		ldr	r3, [r7, #48]
 1692 0052 9B68     		ldr	r3, [r3, #8]
 1693 0054 002B     		cmp	r3, #0
 1694 0056 01D1     		bne	.L111
 1695              	.L110:
 1696              		.loc 1 1206 5 discriminator 3
 1697 0058 0123     		movs	r3, #1
 1698 005a 00E0     		b	.L112
 1699              	.L111:
 1700              		.loc 1 1206 5 discriminator 4
 1701 005c 0023     		movs	r3, #0
 1702              	.L112:
 1703              		.loc 1 1206 5 discriminator 6
 1704 005e 002B     		cmp	r3, #0
 1705 0060 0AD1     		bne	.L113
 1706              	.LBB150:
 1707              	.LBB151:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1708              		.loc 2 198 9 is_stmt 1
 1709              		.syntax unified
 1710              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1711 0062 4FF05003 			mov r3, #80												
 1712 0066 83F31188 		msr basepri, r3											
 1713 006a BFF36F8F 		isb														
 1714 006e BFF34F8F 		dsb														
 1715              	
 1716              	@ 0 "" 2
 1717              		.thumb
 1718              		.syntax unified
 1719 0072 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1720              		.loc 2 206 5
 1721 0074 00BF     		nop
 1722              	.L114:
 1723              	.LBE151:
 1724              	.LBE150:
 1725              		.loc 1 1206 5 discriminator 3
 1726 0076 FEE7     		b	.L114
 1727              	.L113:
1207:./Drivers/FreeRTOS/queue.c **** 
1208:./Drivers/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1209:./Drivers/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1210:./Drivers/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1211:./Drivers/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1212:./Drivers/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1213:./Drivers/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1214:./Drivers/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1215:./Drivers/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1216:./Drivers/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1217:./Drivers/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1218:./Drivers/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1219:./Drivers/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1220:./Drivers/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1221:./Drivers/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 57


1222:./Drivers/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1728              		.loc 1 1222 5
 1729 0078 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1730              	.LBB152:
 1731              	.LBB153:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1732              		.loc 2 214 9
 1733              		.syntax unified
 1734              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1735 007c EFF31182 			mrs r2, basepri											
 1736 0080 4FF05003 		mov r3, #80												
 1737 0084 83F31188 		msr basepri, r3											
 1738 0088 BFF36F8F 		isb														
 1739 008c BFF34F8F 		dsb														
 1740              	
 1741              	@ 0 "" 2
 1742              		.thumb
 1743              		.syntax unified
 1744 0090 7A61     		str	r2, [r7, #20]
 1745 0092 3B61     		str	r3, [r7, #16]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 1746              		.loc 2 226 16
 1747 0094 7B69     		ldr	r3, [r7, #20]
 1748              	.LBE153:
 1749              	.LBE152:
1223:./Drivers/FreeRTOS/queue.c **** 
1224:./Drivers/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1750              		.loc 1 1224 30
 1751 0096 FB62     		str	r3, [r7, #44]
 1752              	.LBB154:
1225:./Drivers/FreeRTOS/queue.c ****     {
1226:./Drivers/FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1753              		.loc 1 1226 27
 1754 0098 3B6B     		ldr	r3, [r7, #48]
 1755 009a 9B6B     		ldr	r3, [r3, #56]
 1756 009c BB62     		str	r3, [r7, #40]
1227:./Drivers/FreeRTOS/queue.c **** 
1228:./Drivers/FreeRTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1229:./Drivers/FreeRTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1230:./Drivers/FreeRTOS/queue.c ****          * space'. */
1231:./Drivers/FreeRTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
 1757              		.loc 1 1231 40
 1758 009e 3B6B     		ldr	r3, [r7, #48]
 1759 00a0 DB6B     		ldr	r3, [r3, #60]
 1760              		.loc 1 1231 11
 1761 00a2 BA6A     		ldr	r2, [r7, #40]
 1762 00a4 9A42     		cmp	r2, r3
 1763 00a6 3AD2     		bcs	.L116
 1764              	.LBB155:
1232:./Drivers/FreeRTOS/queue.c ****         {
1233:./Drivers/FreeRTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1765              		.loc 1 1233 26
 1766 00a8 3B6B     		ldr	r3, [r7, #48]
 1767 00aa 93F84530 		ldrb	r3, [r3, #69]
 1768 00ae 87F82730 		strb	r3, [r7, #39]
1234:./Drivers/FreeRTOS/queue.c **** 
1235:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 58


1236:./Drivers/FreeRTOS/queue.c **** 
1237:./Drivers/FreeRTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1238:./Drivers/FreeRTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1239:./Drivers/FreeRTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1240:./Drivers/FreeRTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1241:./Drivers/FreeRTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1242:./Drivers/FreeRTOS/queue.c ****              * messages (semaphores) available. */
1243:./Drivers/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1769              		.loc 1 1243 60
 1770 00b2 BB6A     		ldr	r3, [r7, #40]
 1771 00b4 5A1C     		adds	r2, r3, #1
 1772              		.loc 1 1243 40
 1773 00b6 3B6B     		ldr	r3, [r7, #48]
 1774 00b8 9A63     		str	r2, [r3, #56]
1244:./Drivers/FreeRTOS/queue.c **** 
1245:./Drivers/FreeRTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1246:./Drivers/FreeRTOS/queue.c ****              * be done when the queue is unlocked later. */
1247:./Drivers/FreeRTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1775              		.loc 1 1247 15
 1776 00ba 97F92730 		ldrsb	r3, [r7, #39]
 1777 00be B3F1FF3F 		cmp	r3, #-1
 1778 00c2 12D1     		bne	.L117
1248:./Drivers/FreeRTOS/queue.c ****             {
1249:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1250:./Drivers/FreeRTOS/queue.c ****                     {
1251:./Drivers/FreeRTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
1252:./Drivers/FreeRTOS/queue.c ****                         {
1253:./Drivers/FreeRTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1254:./Drivers/FreeRTOS/queue.c ****                             {
1255:./Drivers/FreeRTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1256:./Drivers/FreeRTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1257:./Drivers/FreeRTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1258:./Drivers/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1259:./Drivers/FreeRTOS/queue.c ****                                 {
1260:./Drivers/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1261:./Drivers/FreeRTOS/queue.c ****                                 }
1262:./Drivers/FreeRTOS/queue.c ****                                 else
1263:./Drivers/FreeRTOS/queue.c ****                                 {
1264:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1265:./Drivers/FreeRTOS/queue.c ****                                 }
1266:./Drivers/FreeRTOS/queue.c ****                             }
1267:./Drivers/FreeRTOS/queue.c ****                             else
1268:./Drivers/FreeRTOS/queue.c ****                             {
1269:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1270:./Drivers/FreeRTOS/queue.c ****                             }
1271:./Drivers/FreeRTOS/queue.c ****                         }
1272:./Drivers/FreeRTOS/queue.c ****                         else
1273:./Drivers/FreeRTOS/queue.c ****                         {
1274:./Drivers/FreeRTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1275:./Drivers/FreeRTOS/queue.c ****                             {
1276:./Drivers/FreeRTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1277:./Drivers/FreeRTOS/queue.c ****                                 {
1278:./Drivers/FreeRTOS/queue.c ****                                     /* The task waiting has a higher priority so
1279:./Drivers/FreeRTOS/queue.c ****                                      *  record that a context switch is required. */
1280:./Drivers/FreeRTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
1281:./Drivers/FreeRTOS/queue.c ****                                     {
1282:./Drivers/FreeRTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 59


1283:./Drivers/FreeRTOS/queue.c ****                                     }
1284:./Drivers/FreeRTOS/queue.c ****                                     else
1285:./Drivers/FreeRTOS/queue.c ****                                     {
1286:./Drivers/FreeRTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1287:./Drivers/FreeRTOS/queue.c ****                                     }
1288:./Drivers/FreeRTOS/queue.c ****                                 }
1289:./Drivers/FreeRTOS/queue.c ****                                 else
1290:./Drivers/FreeRTOS/queue.c ****                                 {
1291:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1292:./Drivers/FreeRTOS/queue.c ****                                 }
1293:./Drivers/FreeRTOS/queue.c ****                             }
1294:./Drivers/FreeRTOS/queue.c ****                             else
1295:./Drivers/FreeRTOS/queue.c ****                             {
1296:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1297:./Drivers/FreeRTOS/queue.c ****                             }
1298:./Drivers/FreeRTOS/queue.c ****                         }
1299:./Drivers/FreeRTOS/queue.c ****                     }
1300:./Drivers/FreeRTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1301:./Drivers/FreeRTOS/queue.c ****                     {
1302:./Drivers/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1779              		.loc 1 1302 29
 1780 00c4 3B6B     		ldr	r3, [r7, #48]
 1781 00c6 5B6A     		ldr	r3, [r3, #36]
 1782              		.loc 1 1302 27
 1783 00c8 002B     		cmp	r3, #0
 1784 00ca 25D0     		beq	.L118
1303:./Drivers/FreeRTOS/queue.c ****                         {
1304:./Drivers/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 1785              		.loc 1 1304 59
 1786 00cc 3B6B     		ldr	r3, [r7, #48]
 1787 00ce 2433     		adds	r3, r3, #36
 1788              		.loc 1 1304 33
 1789 00d0 1846     		mov	r0, r3
 1790 00d2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1791 00d6 0346     		mov	r3, r0
 1792              		.loc 1 1304 31
 1793 00d8 002B     		cmp	r3, #0
 1794 00da 1DD0     		beq	.L118
1305:./Drivers/FreeRTOS/queue.c ****                             {
1306:./Drivers/FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1307:./Drivers/FreeRTOS/queue.c ****                                  * context switch is required. */
1308:./Drivers/FreeRTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1795              		.loc 1 1308 35
 1796 00dc 3B68     		ldr	r3, [r7]
 1797 00de 002B     		cmp	r3, #0
 1798 00e0 1AD0     		beq	.L118
1309:./Drivers/FreeRTOS/queue.c ****                                 {
1310:./Drivers/FreeRTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1799              		.loc 1 1310 64
 1800 00e2 3B68     		ldr	r3, [r7]
 1801 00e4 0122     		movs	r2, #1
 1802 00e6 1A60     		str	r2, [r3]
 1803 00e8 16E0     		b	.L118
 1804              	.L117:
1311:./Drivers/FreeRTOS/queue.c ****                                 }
1312:./Drivers/FreeRTOS/queue.c ****                                 else
1313:./Drivers/FreeRTOS/queue.c ****                                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 60


1314:./Drivers/FreeRTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1315:./Drivers/FreeRTOS/queue.c ****                                 }
1316:./Drivers/FreeRTOS/queue.c ****                             }
1317:./Drivers/FreeRTOS/queue.c ****                             else
1318:./Drivers/FreeRTOS/queue.c ****                             {
1319:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1320:./Drivers/FreeRTOS/queue.c ****                             }
1321:./Drivers/FreeRTOS/queue.c ****                         }
1322:./Drivers/FreeRTOS/queue.c ****                         else
1323:./Drivers/FreeRTOS/queue.c ****                         {
1324:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1325:./Drivers/FreeRTOS/queue.c ****                         }
1326:./Drivers/FreeRTOS/queue.c ****                     }
1327:./Drivers/FreeRTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1328:./Drivers/FreeRTOS/queue.c ****             }
1329:./Drivers/FreeRTOS/queue.c ****             else
1330:./Drivers/FreeRTOS/queue.c ****             {
1331:./Drivers/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1332:./Drivers/FreeRTOS/queue.c ****                  * knows that data was posted while it was locked. */
1333:./Drivers/FreeRTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1805              		.loc 1 1333 17
 1806 00ea 97F92730 		ldrsb	r3, [r7, #39]
 1807 00ee 7F2B     		cmp	r3, #127
 1808 00f0 0AD1     		bne	.L119
 1809              	.LBB156:
 1810              	.LBB157:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1811              		.loc 2 198 9
 1812              		.syntax unified
 1813              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1814 00f2 4FF05003 			mov r3, #80												
 1815 00f6 83F31188 		msr basepri, r3											
 1816 00fa BFF36F8F 		isb														
 1817 00fe BFF34F8F 		dsb														
 1818              	
 1819              	@ 0 "" 2
 1820              		.thumb
 1821              		.syntax unified
 1822 0102 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1823              		.loc 2 206 5
 1824 0104 00BF     		nop
 1825              	.L120:
 1826              	.LBE157:
 1827              	.LBE156:
 1828              		.loc 1 1333 17 discriminator 6
 1829 0106 FEE7     		b	.L120
 1830              	.L119:
1334:./Drivers/FreeRTOS/queue.c **** 
1335:./Drivers/FreeRTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1831              		.loc 1 1335 57
 1832 0108 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1833 010c 0133     		adds	r3, r3, #1
 1834 010e DBB2     		uxtb	r3, r3
 1835              		.loc 1 1335 36
 1836 0110 5AB2     		sxtb	r2, r3
 1837              		.loc 1 1335 34
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 61


 1838 0112 3B6B     		ldr	r3, [r7, #48]
 1839 0114 83F84520 		strb	r2, [r3, #69]
 1840              	.L118:
1336:./Drivers/FreeRTOS/queue.c ****             }
1337:./Drivers/FreeRTOS/queue.c **** 
1338:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 1841              		.loc 1 1338 21
 1842 0118 0123     		movs	r3, #1
 1843 011a 7B63     		str	r3, [r7, #52]
 1844              	.LBE155:
 1845 011c 01E0     		b	.L121
 1846              	.L116:
1339:./Drivers/FreeRTOS/queue.c ****         }
1340:./Drivers/FreeRTOS/queue.c ****         else
1341:./Drivers/FreeRTOS/queue.c ****         {
1342:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1343:./Drivers/FreeRTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1847              		.loc 1 1343 21
 1848 011e 0023     		movs	r3, #0
 1849 0120 7B63     		str	r3, [r7, #52]
 1850              	.L121:
 1851 0122 FB6A     		ldr	r3, [r7, #44]
 1852 0124 BB60     		str	r3, [r7, #8]
 1853              	.LBE154:
 1854              	.LBB158:
 1855              	.LBB159:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1856              		.loc 2 232 9
 1857 0126 BB68     		ldr	r3, [r7, #8]
 1858              		.syntax unified
 1859              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1860 0128 83F31188 			msr basepri, r3	
 1861              	@ 0 "" 2
 1862              		.loc 2 236 5
 1863              		.thumb
 1864              		.syntax unified
 1865 012c 00BF     		nop
 1866              	.LBE159:
 1867              	.LBE158:
1344:./Drivers/FreeRTOS/queue.c ****         }
1345:./Drivers/FreeRTOS/queue.c ****     }
1346:./Drivers/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1347:./Drivers/FreeRTOS/queue.c **** 
1348:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 1868              		.loc 1 1348 12
 1869 012e 7B6B     		ldr	r3, [r7, #52]
1349:./Drivers/FreeRTOS/queue.c **** }
 1870              		.loc 1 1349 1
 1871 0130 1846     		mov	r0, r3
 1872 0132 3837     		adds	r7, r7, #56
 1873              	.LCFI53:
 1874              		.cfi_def_cfa_offset 8
 1875 0134 BD46     		mov	sp, r7
 1876              	.LCFI54:
 1877              		.cfi_def_cfa_register 13
 1878              		@ sp needed
 1879 0136 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 62


 1880              		.cfi_endproc
 1881              	.LFE15:
 1883              		.section	.text.xQueueReceive,"ax",%progbits
 1884              		.align	1
 1885              		.global	xQueueReceive
 1886              		.syntax unified
 1887              		.thumb
 1888              		.thumb_func
 1889              		.fpu fpv4-sp-d16
 1891              	xQueueReceive:
 1892              	.LFB16:
1350:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1351:./Drivers/FreeRTOS/queue.c **** 
1352:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1353:./Drivers/FreeRTOS/queue.c ****                           void * const pvBuffer,
1354:./Drivers/FreeRTOS/queue.c ****                           TickType_t xTicksToWait )
1355:./Drivers/FreeRTOS/queue.c **** {
 1893              		.loc 1 1355 1
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 48
 1896              		@ frame_needed = 1, uses_anonymous_args = 0
 1897 0000 80B5     		push	{r7, lr}
 1898              	.LCFI55:
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 7, -8
 1901              		.cfi_offset 14, -4
 1902 0002 8CB0     		sub	sp, sp, #48
 1903              	.LCFI56:
 1904              		.cfi_def_cfa_offset 56
 1905 0004 00AF     		add	r7, sp, #0
 1906              	.LCFI57:
 1907              		.cfi_def_cfa_register 7
 1908 0006 F860     		str	r0, [r7, #12]
 1909 0008 B960     		str	r1, [r7, #8]
 1910 000a 7A60     		str	r2, [r7, #4]
1356:./Drivers/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1911              		.loc 1 1356 16
 1912 000c 0023     		movs	r3, #0
 1913 000e FB62     		str	r3, [r7, #44]
1357:./Drivers/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1358:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1914              		.loc 1 1358 21
 1915 0010 FB68     		ldr	r3, [r7, #12]
 1916 0012 BB62     		str	r3, [r7, #40]
1359:./Drivers/FreeRTOS/queue.c **** 
1360:./Drivers/FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1361:./Drivers/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 1917              		.loc 1 1361 5
 1918 0014 BB6A     		ldr	r3, [r7, #40]
 1919 0016 002B     		cmp	r3, #0
 1920 0018 0AD1     		bne	.L124
 1921              	.LBB160:
 1922              	.LBB161:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1923              		.loc 2 198 9
 1924              		.syntax unified
 1925              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 63


 1926 001a 4FF05003 			mov r3, #80												
 1927 001e 83F31188 		msr basepri, r3											
 1928 0022 BFF36F8F 		isb														
 1929 0026 BFF34F8F 		dsb														
 1930              	
 1931              	@ 0 "" 2
 1932              		.thumb
 1933              		.syntax unified
 1934 002a 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1935              		.loc 2 206 5
 1936 002c 00BF     		nop
 1937              	.L125:
 1938              	.LBE161:
 1939              	.LBE160:
 1940              		.loc 1 1361 5 discriminator 1
 1941 002e FEE7     		b	.L125
 1942              	.L124:
1362:./Drivers/FreeRTOS/queue.c **** 
1363:./Drivers/FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1364:./Drivers/FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1365:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 1943              		.loc 1 1365 5
 1944 0030 BB68     		ldr	r3, [r7, #8]
 1945 0032 002B     		cmp	r3, #0
 1946 0034 03D1     		bne	.L126
 1947              		.loc 1 1365 5 is_stmt 0 discriminator 2
 1948 0036 BB6A     		ldr	r3, [r7, #40]
 1949 0038 1B6C     		ldr	r3, [r3, #64]
 1950 003a 002B     		cmp	r3, #0
 1951 003c 01D1     		bne	.L127
 1952              	.L126:
 1953              		.loc 1 1365 5 discriminator 3
 1954 003e 0123     		movs	r3, #1
 1955 0040 00E0     		b	.L128
 1956              	.L127:
 1957              		.loc 1 1365 5 discriminator 4
 1958 0042 0023     		movs	r3, #0
 1959              	.L128:
 1960              		.loc 1 1365 5 discriminator 6
 1961 0044 002B     		cmp	r3, #0
 1962 0046 0AD1     		bne	.L129
 1963              	.LBB162:
 1964              	.LBB163:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 1965              		.loc 2 198 9 is_stmt 1
 1966              		.syntax unified
 1967              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 1968 0048 4FF05003 			mov r3, #80												
 1969 004c 83F31188 		msr basepri, r3											
 1970 0050 BFF36F8F 		isb														
 1971 0054 BFF34F8F 		dsb														
 1972              	
 1973              	@ 0 "" 2
 1974              		.thumb
 1975              		.syntax unified
 1976 0058 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 64


 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 1977              		.loc 2 206 5
 1978 005a 00BF     		nop
 1979              	.L130:
 1980              	.LBE163:
 1981              	.LBE162:
 1982              		.loc 1 1365 5 discriminator 2
 1983 005c FEE7     		b	.L130
 1984              	.L129:
1366:./Drivers/FreeRTOS/queue.c **** 
1367:./Drivers/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1368:./Drivers/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1369:./Drivers/FreeRTOS/queue.c ****         {
1370:./Drivers/FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 1985              		.loc 1 1370 13
 1986 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 1987 0062 0346     		mov	r3, r0
 1988 0064 002B     		cmp	r3, #0
 1989 0066 02D1     		bne	.L131
 1990              		.loc 1 1370 13 is_stmt 0 discriminator 2
 1991 0068 7B68     		ldr	r3, [r7, #4]
 1992 006a 002B     		cmp	r3, #0
 1993 006c 01D1     		bne	.L132
 1994              	.L131:
 1995              		.loc 1 1370 13 discriminator 3
 1996 006e 0123     		movs	r3, #1
 1997 0070 00E0     		b	.L133
 1998              	.L132:
 1999              		.loc 1 1370 13 discriminator 4
 2000 0072 0023     		movs	r3, #0
 2001              	.L133:
 2002              		.loc 1 1370 13 discriminator 6
 2003 0074 002B     		cmp	r3, #0
 2004 0076 0AD1     		bne	.L134
 2005              	.LBB164:
 2006              	.LBB165:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2007              		.loc 2 198 9 is_stmt 1
 2008              		.syntax unified
 2009              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2010 0078 4FF05003 			mov r3, #80												
 2011 007c 83F31188 		msr basepri, r3											
 2012 0080 BFF36F8F 		isb														
 2013 0084 BFF34F8F 		dsb														
 2014              	
 2015              	@ 0 "" 2
 2016              		.thumb
 2017              		.syntax unified
 2018 0088 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2019              		.loc 2 206 5
 2020 008a 00BF     		nop
 2021              	.L135:
 2022              	.LBE165:
 2023              	.LBE164:
 2024              		.loc 1 1370 13 discriminator 3
 2025 008c FEE7     		b	.L135
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 65


 2026              	.L134:
1371:./Drivers/FreeRTOS/queue.c ****         }
1372:./Drivers/FreeRTOS/queue.c ****     #endif
1373:./Drivers/FreeRTOS/queue.c **** 
1374:./Drivers/FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1375:./Drivers/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1376:./Drivers/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1377:./Drivers/FreeRTOS/queue.c ****     for( ; ; )
1378:./Drivers/FreeRTOS/queue.c ****     {
1379:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 2027              		.loc 1 1379 9
 2028 008e FFF7FEFF 		bl	vPortEnterCritical
 2029              	.LBB166:
1380:./Drivers/FreeRTOS/queue.c ****         {
1381:./Drivers/FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2030              		.loc 1 1381 31
 2031 0092 BB6A     		ldr	r3, [r7, #40]
 2032 0094 9B6B     		ldr	r3, [r3, #56]
 2033 0096 7B62     		str	r3, [r7, #36]
1382:./Drivers/FreeRTOS/queue.c **** 
1383:./Drivers/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1384:./Drivers/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1385:./Drivers/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2034              		.loc 1 1385 15
 2035 0098 7B6A     		ldr	r3, [r7, #36]
 2036 009a 002B     		cmp	r3, #0
 2037 009c 1FD0     		beq	.L136
1386:./Drivers/FreeRTOS/queue.c ****             {
1387:./Drivers/FreeRTOS/queue.c ****                 /* Data available, remove one item. */
1388:./Drivers/FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2038              		.loc 1 1388 17
 2039 009e B968     		ldr	r1, [r7, #8]
 2040 00a0 B86A     		ldr	r0, [r7, #40]
 2041 00a2 FFF7FEFF 		bl	prvCopyDataFromQueue
1389:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1390:./Drivers/FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2042              		.loc 1 1390 64
 2043 00a6 7B6A     		ldr	r3, [r7, #36]
 2044 00a8 5A1E     		subs	r2, r3, #1
 2045              		.loc 1 1390 44
 2046 00aa BB6A     		ldr	r3, [r7, #40]
 2047 00ac 9A63     		str	r2, [r3, #56]
1391:./Drivers/FreeRTOS/queue.c **** 
1392:./Drivers/FreeRTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1393:./Drivers/FreeRTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1394:./Drivers/FreeRTOS/queue.c ****                  * task. */
1395:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2048              		.loc 1 1395 21
 2049 00ae BB6A     		ldr	r3, [r7, #40]
 2050 00b0 1B69     		ldr	r3, [r3, #16]
 2051              		.loc 1 1395 19
 2052 00b2 002B     		cmp	r3, #0
 2053 00b4 0FD0     		beq	.L137
1396:./Drivers/FreeRTOS/queue.c ****                 {
1397:./Drivers/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2054              		.loc 1 1397 51
 2055 00b6 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 66


 2056 00b8 1033     		adds	r3, r3, #16
 2057              		.loc 1 1397 25
 2058 00ba 1846     		mov	r0, r3
 2059 00bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 2060 00c0 0346     		mov	r3, r0
 2061              		.loc 1 1397 23
 2062 00c2 002B     		cmp	r3, #0
 2063 00c4 07D0     		beq	.L137
1398:./Drivers/FreeRTOS/queue.c ****                     {
1399:./Drivers/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2064              		.loc 1 1399 25
 2065 00c6 3D4B     		ldr	r3, .L147
 2066 00c8 4FF08052 		mov	r2, #268435456
 2067 00cc 1A60     		str	r2, [r3]
 2068              		.syntax unified
 2069              	@ 1399 "./Drivers/FreeRTOS/queue.c" 1
 2070 00ce BFF34F8F 		dsb
 2071              	@ 0 "" 2
 2072              	@ 1399 "./Drivers/FreeRTOS/queue.c" 1
 2073 00d2 BFF36F8F 		isb
 2074              	@ 0 "" 2
 2075              		.thumb
 2076              		.syntax unified
 2077              	.L137:
1400:./Drivers/FreeRTOS/queue.c ****                     }
1401:./Drivers/FreeRTOS/queue.c ****                     else
1402:./Drivers/FreeRTOS/queue.c ****                     {
1403:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1404:./Drivers/FreeRTOS/queue.c ****                     }
1405:./Drivers/FreeRTOS/queue.c ****                 }
1406:./Drivers/FreeRTOS/queue.c ****                 else
1407:./Drivers/FreeRTOS/queue.c ****                 {
1408:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1409:./Drivers/FreeRTOS/queue.c ****                 }
1410:./Drivers/FreeRTOS/queue.c **** 
1411:./Drivers/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2078              		.loc 1 1411 17
 2079 00d6 FFF7FEFF 		bl	vPortExitCritical
1412:./Drivers/FreeRTOS/queue.c ****                 return pdPASS;
 2080              		.loc 1 1412 24
 2081 00da 0123     		movs	r3, #1
 2082 00dc 69E0     		b	.L146
 2083              	.L136:
1413:./Drivers/FreeRTOS/queue.c ****             }
1414:./Drivers/FreeRTOS/queue.c ****             else
1415:./Drivers/FreeRTOS/queue.c ****             {
1416:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2084              		.loc 1 1416 34
 2085 00de 7B68     		ldr	r3, [r7, #4]
 2086              		.loc 1 1416 19
 2087 00e0 002B     		cmp	r3, #0
 2088 00e2 03D1     		bne	.L139
1417:./Drivers/FreeRTOS/queue.c ****                 {
1418:./Drivers/FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1419:./Drivers/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1420:./Drivers/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2089              		.loc 1 1420 21
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 67


 2090 00e4 FFF7FEFF 		bl	vPortExitCritical
1421:./Drivers/FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1422:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2091              		.loc 1 1422 28
 2092 00e8 0023     		movs	r3, #0
 2093 00ea 62E0     		b	.L146
 2094              	.L139:
1423:./Drivers/FreeRTOS/queue.c ****                 }
1424:./Drivers/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2095              		.loc 1 1424 24
 2096 00ec FB6A     		ldr	r3, [r7, #44]
 2097 00ee 002B     		cmp	r3, #0
 2098 00f0 06D1     		bne	.L140
1425:./Drivers/FreeRTOS/queue.c ****                 {
1426:./Drivers/FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1427:./Drivers/FreeRTOS/queue.c ****                      * configure the timeout structure. */
1428:./Drivers/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2099              		.loc 1 1428 21
 2100 00f2 07F11003 		add	r3, r7, #16
 2101 00f6 1846     		mov	r0, r3
 2102 00f8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1429:./Drivers/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2103              		.loc 1 1429 35
 2104 00fc 0123     		movs	r3, #1
 2105 00fe FB62     		str	r3, [r7, #44]
 2106              	.L140:
 2107              	.LBE166:
1430:./Drivers/FreeRTOS/queue.c ****                 }
1431:./Drivers/FreeRTOS/queue.c ****                 else
1432:./Drivers/FreeRTOS/queue.c ****                 {
1433:./Drivers/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1434:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1435:./Drivers/FreeRTOS/queue.c ****                 }
1436:./Drivers/FreeRTOS/queue.c ****             }
1437:./Drivers/FreeRTOS/queue.c ****         }
1438:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2108              		.loc 1 1438 9
 2109 0100 FFF7FEFF 		bl	vPortExitCritical
1439:./Drivers/FreeRTOS/queue.c **** 
1440:./Drivers/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1441:./Drivers/FreeRTOS/queue.c ****          * now the critical section has been exited. */
1442:./Drivers/FreeRTOS/queue.c **** 
1443:./Drivers/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2110              		.loc 1 1443 9
 2111 0104 FFF7FEFF 		bl	vTaskSuspendAll
1444:./Drivers/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2112              		.loc 1 1444 9
 2113 0108 FFF7FEFF 		bl	vPortEnterCritical
 2114 010c BB6A     		ldr	r3, [r7, #40]
 2115 010e 93F84430 		ldrb	r3, [r3, #68]
 2116 0112 5BB2     		sxtb	r3, r3
 2117 0114 B3F1FF3F 		cmp	r3, #-1
 2118 0118 03D1     		bne	.L141
 2119              		.loc 1 1444 9 is_stmt 0 discriminator 1
 2120 011a BB6A     		ldr	r3, [r7, #40]
 2121 011c 0022     		movs	r2, #0
 2122 011e 83F84420 		strb	r2, [r3, #68]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 68


 2123              	.L141:
 2124              		.loc 1 1444 9 discriminator 3
 2125 0122 BB6A     		ldr	r3, [r7, #40]
 2126 0124 93F84530 		ldrb	r3, [r3, #69]
 2127 0128 5BB2     		sxtb	r3, r3
 2128 012a B3F1FF3F 		cmp	r3, #-1
 2129 012e 03D1     		bne	.L142
 2130              		.loc 1 1444 9 discriminator 4
 2131 0130 BB6A     		ldr	r3, [r7, #40]
 2132 0132 0022     		movs	r2, #0
 2133 0134 83F84520 		strb	r2, [r3, #69]
 2134              	.L142:
 2135              		.loc 1 1444 9 discriminator 6
 2136 0138 FFF7FEFF 		bl	vPortExitCritical
1445:./Drivers/FreeRTOS/queue.c **** 
1446:./Drivers/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1447:./Drivers/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2137              		.loc 1 1447 13 is_stmt 1 discriminator 6
 2138 013c 3A1D     		adds	r2, r7, #4
 2139 013e 07F11003 		add	r3, r7, #16
 2140 0142 1146     		mov	r1, r2
 2141 0144 1846     		mov	r0, r3
 2142 0146 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2143 014a 0346     		mov	r3, r0
 2144              		.loc 1 1447 11 discriminator 6
 2145 014c 002B     		cmp	r3, #0
 2146 014e 23D1     		bne	.L143
1448:./Drivers/FreeRTOS/queue.c ****         {
1449:./Drivers/FreeRTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1450:./Drivers/FreeRTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1451:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2147              		.loc 1 1451 17
 2148 0150 B86A     		ldr	r0, [r7, #40]
 2149 0152 FFF7FEFF 		bl	prvIsQueueEmpty
 2150 0156 0346     		mov	r3, r0
 2151              		.loc 1 1451 15
 2152 0158 002B     		cmp	r3, #0
 2153 015a 17D0     		beq	.L144
1452:./Drivers/FreeRTOS/queue.c ****             {
1453:./Drivers/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1454:./Drivers/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2154              		.loc 1 1454 17
 2155 015c BB6A     		ldr	r3, [r7, #40]
 2156 015e 2433     		adds	r3, r3, #36
 2157 0160 7A68     		ldr	r2, [r7, #4]
 2158 0162 1146     		mov	r1, r2
 2159 0164 1846     		mov	r0, r3
 2160 0166 FFF7FEFF 		bl	vTaskPlaceOnEventList
1455:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2161              		.loc 1 1455 17
 2162 016a B86A     		ldr	r0, [r7, #40]
 2163 016c FFF7FEFF 		bl	prvUnlockQueue
1456:./Drivers/FreeRTOS/queue.c **** 
1457:./Drivers/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2164              		.loc 1 1457 21
 2165 0170 FFF7FEFF 		bl	xTaskResumeAll
 2166 0174 0346     		mov	r3, r0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 69


 2167              		.loc 1 1457 19
 2168 0176 002B     		cmp	r3, #0
 2169 0178 89D1     		bne	.L134
1458:./Drivers/FreeRTOS/queue.c ****                 {
1459:./Drivers/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2170              		.loc 1 1459 21
 2171 017a 104B     		ldr	r3, .L147
 2172 017c 4FF08052 		mov	r2, #268435456
 2173 0180 1A60     		str	r2, [r3]
 2174              		.syntax unified
 2175              	@ 1459 "./Drivers/FreeRTOS/queue.c" 1
 2176 0182 BFF34F8F 		dsb
 2177              	@ 0 "" 2
 2178              	@ 1459 "./Drivers/FreeRTOS/queue.c" 1
 2179 0186 BFF36F8F 		isb
 2180              	@ 0 "" 2
 2181              		.thumb
 2182              		.syntax unified
 2183 018a 80E7     		b	.L134
 2184              	.L144:
1460:./Drivers/FreeRTOS/queue.c ****                 }
1461:./Drivers/FreeRTOS/queue.c ****                 else
1462:./Drivers/FreeRTOS/queue.c ****                 {
1463:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1464:./Drivers/FreeRTOS/queue.c ****                 }
1465:./Drivers/FreeRTOS/queue.c ****             }
1466:./Drivers/FreeRTOS/queue.c ****             else
1467:./Drivers/FreeRTOS/queue.c ****             {
1468:./Drivers/FreeRTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1469:./Drivers/FreeRTOS/queue.c ****                  * data. */
1470:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2185              		.loc 1 1470 17
 2186 018c B86A     		ldr	r0, [r7, #40]
 2187 018e FFF7FEFF 		bl	prvUnlockQueue
1471:./Drivers/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2188              		.loc 1 1471 26
 2189 0192 FFF7FEFF 		bl	xTaskResumeAll
 2190 0196 7AE7     		b	.L134
 2191              	.L143:
1472:./Drivers/FreeRTOS/queue.c ****             }
1473:./Drivers/FreeRTOS/queue.c ****         }
1474:./Drivers/FreeRTOS/queue.c ****         else
1475:./Drivers/FreeRTOS/queue.c ****         {
1476:./Drivers/FreeRTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1477:./Drivers/FreeRTOS/queue.c ****              * back and attempt to read the data. */
1478:./Drivers/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2192              		.loc 1 1478 13
 2193 0198 B86A     		ldr	r0, [r7, #40]
 2194 019a FFF7FEFF 		bl	prvUnlockQueue
1479:./Drivers/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2195              		.loc 1 1479 22
 2196 019e FFF7FEFF 		bl	xTaskResumeAll
1480:./Drivers/FreeRTOS/queue.c **** 
1481:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2197              		.loc 1 1481 17
 2198 01a2 B86A     		ldr	r0, [r7, #40]
 2199 01a4 FFF7FEFF 		bl	prvIsQueueEmpty
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 70


 2200 01a8 0346     		mov	r3, r0
 2201              		.loc 1 1481 15
 2202 01aa 002B     		cmp	r3, #0
 2203 01ac 3FF46FAF 		beq	.L134
1482:./Drivers/FreeRTOS/queue.c ****             {
1483:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1484:./Drivers/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2204              		.loc 1 1484 24
 2205 01b0 0023     		movs	r3, #0
 2206              	.L146:
1485:./Drivers/FreeRTOS/queue.c ****             }
1486:./Drivers/FreeRTOS/queue.c ****             else
1487:./Drivers/FreeRTOS/queue.c ****             {
1488:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1489:./Drivers/FreeRTOS/queue.c ****             }
1490:./Drivers/FreeRTOS/queue.c ****         }
1491:./Drivers/FreeRTOS/queue.c ****     } /*lint -restore */
1492:./Drivers/FreeRTOS/queue.c **** }
 2207              		.loc 1 1492 1 discriminator 6
 2208 01b2 1846     		mov	r0, r3
 2209 01b4 3037     		adds	r7, r7, #48
 2210              	.LCFI58:
 2211              		.cfi_def_cfa_offset 8
 2212 01b6 BD46     		mov	sp, r7
 2213              	.LCFI59:
 2214              		.cfi_def_cfa_register 13
 2215              		@ sp needed
 2216 01b8 80BD     		pop	{r7, pc}
 2217              	.L148:
 2218 01ba 00BF     		.align	2
 2219              	.L147:
 2220 01bc 04ED00E0 		.word	-536810236
 2221              		.cfi_endproc
 2222              	.LFE16:
 2224              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2225              		.align	1
 2226              		.global	xQueueSemaphoreTake
 2227              		.syntax unified
 2228              		.thumb
 2229              		.thumb_func
 2230              		.fpu fpv4-sp-d16
 2232              	xQueueSemaphoreTake:
 2233              	.LFB17:
1493:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1494:./Drivers/FreeRTOS/queue.c **** 
1495:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1496:./Drivers/FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
1497:./Drivers/FreeRTOS/queue.c **** {
 2234              		.loc 1 1497 1
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 56
 2237              		@ frame_needed = 1, uses_anonymous_args = 0
 2238 0000 80B5     		push	{r7, lr}
 2239              	.LCFI60:
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 71


 2243 0002 8EB0     		sub	sp, sp, #56
 2244              	.LCFI61:
 2245              		.cfi_def_cfa_offset 64
 2246 0004 00AF     		add	r7, sp, #0
 2247              	.LCFI62:
 2248              		.cfi_def_cfa_register 7
 2249 0006 7860     		str	r0, [r7, #4]
 2250 0008 3960     		str	r1, [r7]
1498:./Drivers/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2251              		.loc 1 1498 16
 2252 000a 0023     		movs	r3, #0
 2253 000c 7B63     		str	r3, [r7, #52]
1499:./Drivers/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1500:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2254              		.loc 1 1500 21
 2255 000e 7B68     		ldr	r3, [r7, #4]
 2256 0010 FB62     		str	r3, [r7, #44]
1501:./Drivers/FreeRTOS/queue.c **** 
1502:./Drivers/FreeRTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1503:./Drivers/FreeRTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
 2257              		.loc 1 1503 20
 2258 0012 0023     		movs	r3, #0
 2259 0014 3B63     		str	r3, [r7, #48]
1504:./Drivers/FreeRTOS/queue.c ****     #endif
1505:./Drivers/FreeRTOS/queue.c **** 
1506:./Drivers/FreeRTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1507:./Drivers/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2260              		.loc 1 1507 5
 2261 0016 FB6A     		ldr	r3, [r7, #44]
 2262 0018 002B     		cmp	r3, #0
 2263 001a 0AD1     		bne	.L150
 2264              	.LBB167:
 2265              	.LBB168:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2266              		.loc 2 198 9
 2267              		.syntax unified
 2268              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2269 001c 4FF05003 			mov r3, #80												
 2270 0020 83F31188 		msr basepri, r3											
 2271 0024 BFF36F8F 		isb														
 2272 0028 BFF34F8F 		dsb														
 2273              	
 2274              	@ 0 "" 2
 2275              		.thumb
 2276              		.syntax unified
 2277 002c 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2278              		.loc 2 206 5
 2279 002e 00BF     		nop
 2280              	.L151:
 2281              	.LBE168:
 2282              	.LBE167:
 2283              		.loc 1 1507 5 discriminator 1
 2284 0030 FEE7     		b	.L151
 2285              	.L150:
1508:./Drivers/FreeRTOS/queue.c **** 
1509:./Drivers/FreeRTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 72


1510:./Drivers/FreeRTOS/queue.c ****      * 0. */
1511:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 2286              		.loc 1 1511 5
 2287 0032 FB6A     		ldr	r3, [r7, #44]
 2288 0034 1B6C     		ldr	r3, [r3, #64]
 2289 0036 002B     		cmp	r3, #0
 2290 0038 0AD0     		beq	.L152
 2291              	.LBB169:
 2292              	.LBB170:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2293              		.loc 2 198 9
 2294              		.syntax unified
 2295              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2296 003a 4FF05003 			mov r3, #80												
 2297 003e 83F31188 		msr basepri, r3											
 2298 0042 BFF36F8F 		isb														
 2299 0046 BFF34F8F 		dsb														
 2300              	
 2301              	@ 0 "" 2
 2302              		.thumb
 2303              		.syntax unified
 2304 004a FB61     		str	r3, [r7, #28]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2305              		.loc 2 206 5
 2306 004c 00BF     		nop
 2307              	.L153:
 2308              	.LBE170:
 2309              	.LBE169:
 2310              		.loc 1 1511 5 discriminator 2
 2311 004e FEE7     		b	.L153
 2312              	.L152:
1512:./Drivers/FreeRTOS/queue.c **** 
1513:./Drivers/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1514:./Drivers/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1515:./Drivers/FreeRTOS/queue.c ****         {
1516:./Drivers/FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2313              		.loc 1 1516 13
 2314 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 2315 0054 0346     		mov	r3, r0
 2316 0056 002B     		cmp	r3, #0
 2317 0058 02D1     		bne	.L154
 2318              		.loc 1 1516 13 is_stmt 0 discriminator 2
 2319 005a 3B68     		ldr	r3, [r7]
 2320 005c 002B     		cmp	r3, #0
 2321 005e 01D1     		bne	.L155
 2322              	.L154:
 2323              		.loc 1 1516 13 discriminator 3
 2324 0060 0123     		movs	r3, #1
 2325 0062 00E0     		b	.L156
 2326              	.L155:
 2327              		.loc 1 1516 13 discriminator 4
 2328 0064 0023     		movs	r3, #0
 2329              	.L156:
 2330              		.loc 1 1516 13 discriminator 6
 2331 0066 002B     		cmp	r3, #0
 2332 0068 0AD1     		bne	.L157
 2333              	.LBB171:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 73


 2334              	.LBB172:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2335              		.loc 2 198 9 is_stmt 1
 2336              		.syntax unified
 2337              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2338 006a 4FF05003 			mov r3, #80												
 2339 006e 83F31188 		msr basepri, r3											
 2340 0072 BFF36F8F 		isb														
 2341 0076 BFF34F8F 		dsb														
 2342              	
 2343              	@ 0 "" 2
 2344              		.thumb
 2345              		.syntax unified
 2346 007a BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2347              		.loc 2 206 5
 2348 007c 00BF     		nop
 2349              	.L158:
 2350              	.LBE172:
 2351              	.LBE171:
 2352              		.loc 1 1516 13 discriminator 3
 2353 007e FEE7     		b	.L158
 2354              	.L157:
1517:./Drivers/FreeRTOS/queue.c ****         }
1518:./Drivers/FreeRTOS/queue.c ****     #endif
1519:./Drivers/FreeRTOS/queue.c **** 
1520:./Drivers/FreeRTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1521:./Drivers/FreeRTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1522:./Drivers/FreeRTOS/queue.c ****      * of execution time efficiency. */
1523:./Drivers/FreeRTOS/queue.c ****     for( ; ; )
1524:./Drivers/FreeRTOS/queue.c ****     {
1525:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 2355              		.loc 1 1525 9
 2356 0080 FFF7FEFF 		bl	vPortEnterCritical
 2357              	.LBB173:
1526:./Drivers/FreeRTOS/queue.c ****         {
1527:./Drivers/FreeRTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1528:./Drivers/FreeRTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1529:./Drivers/FreeRTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 2358              		.loc 1 1529 31
 2359 0084 FB6A     		ldr	r3, [r7, #44]
 2360 0086 9B6B     		ldr	r3, [r3, #56]
 2361 0088 BB62     		str	r3, [r7, #40]
1530:./Drivers/FreeRTOS/queue.c **** 
1531:./Drivers/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1532:./Drivers/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1533:./Drivers/FreeRTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 2362              		.loc 1 1533 15
 2363 008a BB6A     		ldr	r3, [r7, #40]
 2364 008c 002B     		cmp	r3, #0
 2365 008e 24D0     		beq	.L159
1534:./Drivers/FreeRTOS/queue.c ****             {
1535:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1536:./Drivers/FreeRTOS/queue.c **** 
1537:./Drivers/FreeRTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1538:./Drivers/FreeRTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1539:./Drivers/FreeRTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 74


 2366              		.loc 1 1539 63
 2367 0090 BB6A     		ldr	r3, [r7, #40]
 2368 0092 5A1E     		subs	r2, r3, #1
 2369              		.loc 1 1539 44
 2370 0094 FB6A     		ldr	r3, [r7, #44]
 2371 0096 9A63     		str	r2, [r3, #56]
1540:./Drivers/FreeRTOS/queue.c **** 
1541:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1542:./Drivers/FreeRTOS/queue.c ****                     {
1543:./Drivers/FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2372              		.loc 1 1543 36
 2373 0098 FB6A     		ldr	r3, [r7, #44]
 2374 009a 1B68     		ldr	r3, [r3]
 2375              		.loc 1 1543 27
 2376 009c 002B     		cmp	r3, #0
 2377 009e 04D1     		bne	.L160
1544:./Drivers/FreeRTOS/queue.c ****                         {
1545:./Drivers/FreeRTOS/queue.c ****                             /* Record the information required to implement
1546:./Drivers/FreeRTOS/queue.c ****                              * priority inheritance should it become necessary. */
1547:./Drivers/FreeRTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2378              		.loc 1 1547 66
 2379 00a0 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2380 00a4 0246     		mov	r2, r0
 2381              		.loc 1 1547 64
 2382 00a6 FB6A     		ldr	r3, [r7, #44]
 2383 00a8 9A60     		str	r2, [r3, #8]
 2384              	.L160:
1548:./Drivers/FreeRTOS/queue.c ****                         }
1549:./Drivers/FreeRTOS/queue.c ****                         else
1550:./Drivers/FreeRTOS/queue.c ****                         {
1551:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1552:./Drivers/FreeRTOS/queue.c ****                         }
1553:./Drivers/FreeRTOS/queue.c ****                     }
1554:./Drivers/FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1555:./Drivers/FreeRTOS/queue.c **** 
1556:./Drivers/FreeRTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1557:./Drivers/FreeRTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1558:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2385              		.loc 1 1558 21
 2386 00aa FB6A     		ldr	r3, [r7, #44]
 2387 00ac 1B69     		ldr	r3, [r3, #16]
 2388              		.loc 1 1558 19
 2389 00ae 002B     		cmp	r3, #0
 2390 00b0 0FD0     		beq	.L161
1559:./Drivers/FreeRTOS/queue.c ****                 {
1560:./Drivers/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2391              		.loc 1 1560 51
 2392 00b2 FB6A     		ldr	r3, [r7, #44]
 2393 00b4 1033     		adds	r3, r3, #16
 2394              		.loc 1 1560 25
 2395 00b6 1846     		mov	r0, r3
 2396 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2397 00bc 0346     		mov	r3, r0
 2398              		.loc 1 1560 23
 2399 00be 002B     		cmp	r3, #0
 2400 00c0 07D0     		beq	.L161
1561:./Drivers/FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 75


1562:./Drivers/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2401              		.loc 1 1562 25
 2402 00c2 544B     		ldr	r3, .L175
 2403 00c4 4FF08052 		mov	r2, #268435456
 2404 00c8 1A60     		str	r2, [r3]
 2405              		.syntax unified
 2406              	@ 1562 "./Drivers/FreeRTOS/queue.c" 1
 2407 00ca BFF34F8F 		dsb
 2408              	@ 0 "" 2
 2409              	@ 1562 "./Drivers/FreeRTOS/queue.c" 1
 2410 00ce BFF36F8F 		isb
 2411              	@ 0 "" 2
 2412              		.thumb
 2413              		.syntax unified
 2414              	.L161:
1563:./Drivers/FreeRTOS/queue.c ****                     }
1564:./Drivers/FreeRTOS/queue.c ****                     else
1565:./Drivers/FreeRTOS/queue.c ****                     {
1566:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1567:./Drivers/FreeRTOS/queue.c ****                     }
1568:./Drivers/FreeRTOS/queue.c ****                 }
1569:./Drivers/FreeRTOS/queue.c ****                 else
1570:./Drivers/FreeRTOS/queue.c ****                 {
1571:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1572:./Drivers/FreeRTOS/queue.c ****                 }
1573:./Drivers/FreeRTOS/queue.c **** 
1574:./Drivers/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2415              		.loc 1 1574 17
 2416 00d2 FFF7FEFF 		bl	vPortExitCritical
1575:./Drivers/FreeRTOS/queue.c ****                 return pdPASS;
 2417              		.loc 1 1575 24
 2418 00d6 0123     		movs	r3, #1
 2419 00d8 97E0     		b	.L174
 2420              	.L159:
1576:./Drivers/FreeRTOS/queue.c ****             }
1577:./Drivers/FreeRTOS/queue.c ****             else
1578:./Drivers/FreeRTOS/queue.c ****             {
1579:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2421              		.loc 1 1579 34
 2422 00da 3B68     		ldr	r3, [r7]
 2423              		.loc 1 1579 19
 2424 00dc 002B     		cmp	r3, #0
 2425 00de 11D1     		bne	.L163
1580:./Drivers/FreeRTOS/queue.c ****                 {
1581:./Drivers/FreeRTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1582:./Drivers/FreeRTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1583:./Drivers/FreeRTOS/queue.c ****                      * if it were 0 the function would have exited. */
1584:./Drivers/FreeRTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1585:./Drivers/FreeRTOS/queue.c ****                         {
1586:./Drivers/FreeRTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
 2426              		.loc 1 1586 29
 2427 00e0 3B6B     		ldr	r3, [r7, #48]
 2428 00e2 002B     		cmp	r3, #0
 2429 00e4 0AD0     		beq	.L164
 2430              	.LBB174:
 2431              	.LBB175:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 76


 2432              		.loc 2 198 9
 2433              		.syntax unified
 2434              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2435 00e6 4FF05003 			mov r3, #80												
 2436 00ea 83F31188 		msr basepri, r3											
 2437 00ee BFF36F8F 		isb														
 2438 00f2 BFF34F8F 		dsb														
 2439              	
 2440              	@ 0 "" 2
 2441              		.thumb
 2442              		.syntax unified
 2443 00f6 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2444              		.loc 2 206 5
 2445 00f8 00BF     		nop
 2446              	.L165:
 2447              	.LBE175:
 2448              	.LBE174:
 2449              		.loc 1 1586 29 discriminator 4
 2450 00fa FEE7     		b	.L165
 2451              	.L164:
1587:./Drivers/FreeRTOS/queue.c ****                         }
1588:./Drivers/FreeRTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1589:./Drivers/FreeRTOS/queue.c **** 
1590:./Drivers/FreeRTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1591:./Drivers/FreeRTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1592:./Drivers/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2452              		.loc 1 1592 21
 2453 00fc FFF7FEFF 		bl	vPortExitCritical
1593:./Drivers/FreeRTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1594:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2454              		.loc 1 1594 28
 2455 0100 0023     		movs	r3, #0
 2456 0102 82E0     		b	.L174
 2457              	.L163:
1595:./Drivers/FreeRTOS/queue.c ****                 }
1596:./Drivers/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2458              		.loc 1 1596 24
 2459 0104 7B6B     		ldr	r3, [r7, #52]
 2460 0106 002B     		cmp	r3, #0
 2461 0108 06D1     		bne	.L166
1597:./Drivers/FreeRTOS/queue.c ****                 {
1598:./Drivers/FreeRTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1599:./Drivers/FreeRTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1600:./Drivers/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2462              		.loc 1 1600 21
 2463 010a 07F10C03 		add	r3, r7, #12
 2464 010e 1846     		mov	r0, r3
 2465 0110 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1601:./Drivers/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2466              		.loc 1 1601 35
 2467 0114 0123     		movs	r3, #1
 2468 0116 7B63     		str	r3, [r7, #52]
 2469              	.L166:
 2470              	.LBE173:
1602:./Drivers/FreeRTOS/queue.c ****                 }
1603:./Drivers/FreeRTOS/queue.c ****                 else
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 77


1604:./Drivers/FreeRTOS/queue.c ****                 {
1605:./Drivers/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1606:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1607:./Drivers/FreeRTOS/queue.c ****                 }
1608:./Drivers/FreeRTOS/queue.c ****             }
1609:./Drivers/FreeRTOS/queue.c ****         }
1610:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2471              		.loc 1 1610 9
 2472 0118 FFF7FEFF 		bl	vPortExitCritical
1611:./Drivers/FreeRTOS/queue.c **** 
1612:./Drivers/FreeRTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1613:./Drivers/FreeRTOS/queue.c ****          * now the critical section has been exited. */
1614:./Drivers/FreeRTOS/queue.c **** 
1615:./Drivers/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2473              		.loc 1 1615 9
 2474 011c FFF7FEFF 		bl	vTaskSuspendAll
1616:./Drivers/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2475              		.loc 1 1616 9
 2476 0120 FFF7FEFF 		bl	vPortEnterCritical
 2477 0124 FB6A     		ldr	r3, [r7, #44]
 2478 0126 93F84430 		ldrb	r3, [r3, #68]
 2479 012a 5BB2     		sxtb	r3, r3
 2480 012c B3F1FF3F 		cmp	r3, #-1
 2481 0130 03D1     		bne	.L167
 2482              		.loc 1 1616 9 is_stmt 0 discriminator 1
 2483 0132 FB6A     		ldr	r3, [r7, #44]
 2484 0134 0022     		movs	r2, #0
 2485 0136 83F84420 		strb	r2, [r3, #68]
 2486              	.L167:
 2487              		.loc 1 1616 9 discriminator 3
 2488 013a FB6A     		ldr	r3, [r7, #44]
 2489 013c 93F84530 		ldrb	r3, [r3, #69]
 2490 0140 5BB2     		sxtb	r3, r3
 2491 0142 B3F1FF3F 		cmp	r3, #-1
 2492 0146 03D1     		bne	.L168
 2493              		.loc 1 1616 9 discriminator 4
 2494 0148 FB6A     		ldr	r3, [r7, #44]
 2495 014a 0022     		movs	r2, #0
 2496 014c 83F84520 		strb	r2, [r3, #69]
 2497              	.L168:
 2498              		.loc 1 1616 9 discriminator 6
 2499 0150 FFF7FEFF 		bl	vPortExitCritical
1617:./Drivers/FreeRTOS/queue.c **** 
1618:./Drivers/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1619:./Drivers/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2500              		.loc 1 1619 13 is_stmt 1 discriminator 6
 2501 0154 3A46     		mov	r2, r7
 2502 0156 07F10C03 		add	r3, r7, #12
 2503 015a 1146     		mov	r1, r2
 2504 015c 1846     		mov	r0, r3
 2505 015e FFF7FEFF 		bl	xTaskCheckForTimeOut
 2506 0162 0346     		mov	r3, r0
 2507              		.loc 1 1619 11 discriminator 6
 2508 0164 002B     		cmp	r3, #0
 2509 0166 32D1     		bne	.L169
1620:./Drivers/FreeRTOS/queue.c ****         {
1621:./Drivers/FreeRTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 78


1622:./Drivers/FreeRTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1623:./Drivers/FreeRTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1624:./Drivers/FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1625:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2510              		.loc 1 1625 17
 2511 0168 F86A     		ldr	r0, [r7, #44]
 2512 016a FFF7FEFF 		bl	prvIsQueueEmpty
 2513 016e 0346     		mov	r3, r0
 2514              		.loc 1 1625 15
 2515 0170 002B     		cmp	r3, #0
 2516 0172 26D0     		beq	.L170
1626:./Drivers/FreeRTOS/queue.c ****             {
1627:./Drivers/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1628:./Drivers/FreeRTOS/queue.c **** 
1629:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1630:./Drivers/FreeRTOS/queue.c ****                     {
1631:./Drivers/FreeRTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2517              		.loc 1 1631 36
 2518 0174 FB6A     		ldr	r3, [r7, #44]
 2519 0176 1B68     		ldr	r3, [r3]
 2520              		.loc 1 1631 27
 2521 0178 002B     		cmp	r3, #0
 2522 017a 09D1     		bne	.L171
1632:./Drivers/FreeRTOS/queue.c ****                         {
1633:./Drivers/FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
 2523              		.loc 1 1633 29
 2524 017c FFF7FEFF 		bl	vPortEnterCritical
1634:./Drivers/FreeRTOS/queue.c ****                             {
1635:./Drivers/FreeRTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
 2525              		.loc 1 1635 56
 2526 0180 FB6A     		ldr	r3, [r7, #44]
 2527 0182 9B68     		ldr	r3, [r3, #8]
 2528 0184 1846     		mov	r0, r3
 2529 0186 FFF7FEFF 		bl	xTaskPriorityInherit
 2530 018a 3863     		str	r0, [r7, #48]
1636:./Drivers/FreeRTOS/queue.c ****                             }
1637:./Drivers/FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
 2531              		.loc 1 1637 29
 2532 018c FFF7FEFF 		bl	vPortExitCritical
 2533              	.L171:
1638:./Drivers/FreeRTOS/queue.c ****                         }
1639:./Drivers/FreeRTOS/queue.c ****                         else
1640:./Drivers/FreeRTOS/queue.c ****                         {
1641:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1642:./Drivers/FreeRTOS/queue.c ****                         }
1643:./Drivers/FreeRTOS/queue.c ****                     }
1644:./Drivers/FreeRTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1645:./Drivers/FreeRTOS/queue.c **** 
1646:./Drivers/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2534              		.loc 1 1646 17
 2535 0190 FB6A     		ldr	r3, [r7, #44]
 2536 0192 2433     		adds	r3, r3, #36
 2537 0194 3A68     		ldr	r2, [r7]
 2538 0196 1146     		mov	r1, r2
 2539 0198 1846     		mov	r0, r3
 2540 019a FFF7FEFF 		bl	vTaskPlaceOnEventList
1647:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 79


 2541              		.loc 1 1647 17
 2542 019e F86A     		ldr	r0, [r7, #44]
 2543 01a0 FFF7FEFF 		bl	prvUnlockQueue
1648:./Drivers/FreeRTOS/queue.c **** 
1649:./Drivers/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2544              		.loc 1 1649 21
 2545 01a4 FFF7FEFF 		bl	xTaskResumeAll
 2546 01a8 0346     		mov	r3, r0
 2547              		.loc 1 1649 19
 2548 01aa 002B     		cmp	r3, #0
 2549 01ac 7FF468AF 		bne	.L157
1650:./Drivers/FreeRTOS/queue.c ****                 {
1651:./Drivers/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2550              		.loc 1 1651 21
 2551 01b0 184B     		ldr	r3, .L175
 2552 01b2 4FF08052 		mov	r2, #268435456
 2553 01b6 1A60     		str	r2, [r3]
 2554              		.syntax unified
 2555              	@ 1651 "./Drivers/FreeRTOS/queue.c" 1
 2556 01b8 BFF34F8F 		dsb
 2557              	@ 0 "" 2
 2558              	@ 1651 "./Drivers/FreeRTOS/queue.c" 1
 2559 01bc BFF36F8F 		isb
 2560              	@ 0 "" 2
 2561              		.thumb
 2562              		.syntax unified
 2563 01c0 5EE7     		b	.L157
 2564              	.L170:
1652:./Drivers/FreeRTOS/queue.c ****                 }
1653:./Drivers/FreeRTOS/queue.c ****                 else
1654:./Drivers/FreeRTOS/queue.c ****                 {
1655:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1656:./Drivers/FreeRTOS/queue.c ****                 }
1657:./Drivers/FreeRTOS/queue.c ****             }
1658:./Drivers/FreeRTOS/queue.c ****             else
1659:./Drivers/FreeRTOS/queue.c ****             {
1660:./Drivers/FreeRTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1661:./Drivers/FreeRTOS/queue.c ****                  * attempt to take the semaphore again. */
1662:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2565              		.loc 1 1662 17
 2566 01c2 F86A     		ldr	r0, [r7, #44]
 2567 01c4 FFF7FEFF 		bl	prvUnlockQueue
1663:./Drivers/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2568              		.loc 1 1663 26
 2569 01c8 FFF7FEFF 		bl	xTaskResumeAll
 2570 01cc 58E7     		b	.L157
 2571              	.L169:
1664:./Drivers/FreeRTOS/queue.c ****             }
1665:./Drivers/FreeRTOS/queue.c ****         }
1666:./Drivers/FreeRTOS/queue.c ****         else
1667:./Drivers/FreeRTOS/queue.c ****         {
1668:./Drivers/FreeRTOS/queue.c ****             /* Timed out. */
1669:./Drivers/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2572              		.loc 1 1669 13
 2573 01ce F86A     		ldr	r0, [r7, #44]
 2574 01d0 FFF7FEFF 		bl	prvUnlockQueue
1670:./Drivers/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 80


 2575              		.loc 1 1670 22
 2576 01d4 FFF7FEFF 		bl	xTaskResumeAll
1671:./Drivers/FreeRTOS/queue.c **** 
1672:./Drivers/FreeRTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1673:./Drivers/FreeRTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1674:./Drivers/FreeRTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1675:./Drivers/FreeRTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1676:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2577              		.loc 1 1676 17
 2578 01d8 F86A     		ldr	r0, [r7, #44]
 2579 01da FFF7FEFF 		bl	prvIsQueueEmpty
 2580 01de 0346     		mov	r3, r0
 2581              		.loc 1 1676 15
 2582 01e0 002B     		cmp	r3, #0
 2583 01e2 3FF44DAF 		beq	.L157
1677:./Drivers/FreeRTOS/queue.c ****             {
1678:./Drivers/FreeRTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1679:./Drivers/FreeRTOS/queue.c ****                     {
1680:./Drivers/FreeRTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1681:./Drivers/FreeRTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1682:./Drivers/FreeRTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1683:./Drivers/FreeRTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
 2584              		.loc 1 1683 27
 2585 01e6 3B6B     		ldr	r3, [r7, #48]
 2586 01e8 002B     		cmp	r3, #0
 2587 01ea 0DD0     		beq	.L173
1684:./Drivers/FreeRTOS/queue.c ****                         {
1685:./Drivers/FreeRTOS/queue.c ****                             taskENTER_CRITICAL();
 2588              		.loc 1 1685 29
 2589 01ec FFF7FEFF 		bl	vPortEnterCritical
 2590              	.LBB176:
1686:./Drivers/FreeRTOS/queue.c ****                             {
1687:./Drivers/FreeRTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1688:./Drivers/FreeRTOS/queue.c **** 
1689:./Drivers/FreeRTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1690:./Drivers/FreeRTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1691:./Drivers/FreeRTOS/queue.c ****                                  * has timed out the priority should be disinherited
1692:./Drivers/FreeRTOS/queue.c ****                                  * again, but only as low as the next highest priority
1693:./Drivers/FreeRTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1694:./Drivers/FreeRTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
 2591              		.loc 1 1694 60
 2592 01f0 F86A     		ldr	r0, [r7, #44]
 2593 01f2 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2594 01f6 7862     		str	r0, [r7, #36]
1695:./Drivers/FreeRTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 2595              		.loc 1 1695 33
 2596 01f8 FB6A     		ldr	r3, [r7, #44]
 2597 01fa 9B68     		ldr	r3, [r3, #8]
 2598 01fc 796A     		ldr	r1, [r7, #36]
 2599 01fe 1846     		mov	r0, r3
 2600 0200 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2601              	.LBE176:
1696:./Drivers/FreeRTOS/queue.c ****                             }
1697:./Drivers/FreeRTOS/queue.c ****                             taskEXIT_CRITICAL();
 2602              		.loc 1 1697 29
 2603 0204 FFF7FEFF 		bl	vPortExitCritical
 2604              	.L173:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 81


1698:./Drivers/FreeRTOS/queue.c ****                         }
1699:./Drivers/FreeRTOS/queue.c ****                     }
1700:./Drivers/FreeRTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1701:./Drivers/FreeRTOS/queue.c **** 
1702:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1703:./Drivers/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2605              		.loc 1 1703 24
 2606 0208 0023     		movs	r3, #0
 2607              	.L174:
1704:./Drivers/FreeRTOS/queue.c ****             }
1705:./Drivers/FreeRTOS/queue.c ****             else
1706:./Drivers/FreeRTOS/queue.c ****             {
1707:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1708:./Drivers/FreeRTOS/queue.c ****             }
1709:./Drivers/FreeRTOS/queue.c ****         }
1710:./Drivers/FreeRTOS/queue.c ****     } /*lint -restore */
1711:./Drivers/FreeRTOS/queue.c **** }
 2608              		.loc 1 1711 1 discriminator 7
 2609 020a 1846     		mov	r0, r3
 2610 020c 3837     		adds	r7, r7, #56
 2611              	.LCFI63:
 2612              		.cfi_def_cfa_offset 8
 2613 020e BD46     		mov	sp, r7
 2614              	.LCFI64:
 2615              		.cfi_def_cfa_register 13
 2616              		@ sp needed
 2617 0210 80BD     		pop	{r7, pc}
 2618              	.L176:
 2619 0212 00BF     		.align	2
 2620              	.L175:
 2621 0214 04ED00E0 		.word	-536810236
 2622              		.cfi_endproc
 2623              	.LFE17:
 2625              		.section	.text.xQueuePeek,"ax",%progbits
 2626              		.align	1
 2627              		.global	xQueuePeek
 2628              		.syntax unified
 2629              		.thumb
 2630              		.thumb_func
 2631              		.fpu fpv4-sp-d16
 2633              	xQueuePeek:
 2634              	.LFB18:
1712:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1713:./Drivers/FreeRTOS/queue.c **** 
1714:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1715:./Drivers/FreeRTOS/queue.c ****                        void * const pvBuffer,
1716:./Drivers/FreeRTOS/queue.c ****                        TickType_t xTicksToWait )
1717:./Drivers/FreeRTOS/queue.c **** {
 2635              		.loc 1 1717 1
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 56
 2638              		@ frame_needed = 1, uses_anonymous_args = 0
 2639 0000 80B5     		push	{r7, lr}
 2640              	.LCFI65:
 2641              		.cfi_def_cfa_offset 8
 2642              		.cfi_offset 7, -8
 2643              		.cfi_offset 14, -4
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 82


 2644 0002 8EB0     		sub	sp, sp, #56
 2645              	.LCFI66:
 2646              		.cfi_def_cfa_offset 64
 2647 0004 00AF     		add	r7, sp, #0
 2648              	.LCFI67:
 2649              		.cfi_def_cfa_register 7
 2650 0006 F860     		str	r0, [r7, #12]
 2651 0008 B960     		str	r1, [r7, #8]
 2652 000a 7A60     		str	r2, [r7, #4]
1718:./Drivers/FreeRTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2653              		.loc 1 1718 16
 2654 000c 0023     		movs	r3, #0
 2655 000e 7B63     		str	r3, [r7, #52]
1719:./Drivers/FreeRTOS/queue.c ****     TimeOut_t xTimeOut;
1720:./Drivers/FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1721:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2656              		.loc 1 1721 21
 2657 0010 FB68     		ldr	r3, [r7, #12]
 2658 0012 3B63     		str	r3, [r7, #48]
1722:./Drivers/FreeRTOS/queue.c **** 
1723:./Drivers/FreeRTOS/queue.c ****     /* Check the pointer is not NULL. */
1724:./Drivers/FreeRTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2659              		.loc 1 1724 5
 2660 0014 3B6B     		ldr	r3, [r7, #48]
 2661 0016 002B     		cmp	r3, #0
 2662 0018 0AD1     		bne	.L178
 2663              	.LBB177:
 2664              	.LBB178:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2665              		.loc 2 198 9
 2666              		.syntax unified
 2667              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2668 001a 4FF05003 			mov r3, #80												
 2669 001e 83F31188 		msr basepri, r3											
 2670 0022 BFF36F8F 		isb														
 2671 0026 BFF34F8F 		dsb														
 2672              	
 2673              	@ 0 "" 2
 2674              		.thumb
 2675              		.syntax unified
 2676 002a 7B62     		str	r3, [r7, #36]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2677              		.loc 2 206 5
 2678 002c 00BF     		nop
 2679              	.L179:
 2680              	.LBE178:
 2681              	.LBE177:
 2682              		.loc 1 1724 5 discriminator 1
 2683 002e FEE7     		b	.L179
 2684              	.L178:
1725:./Drivers/FreeRTOS/queue.c **** 
1726:./Drivers/FreeRTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1727:./Drivers/FreeRTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1728:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 2685              		.loc 1 1728 5
 2686 0030 BB68     		ldr	r3, [r7, #8]
 2687 0032 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 83


 2688 0034 03D1     		bne	.L180
 2689              		.loc 1 1728 5 is_stmt 0 discriminator 2
 2690 0036 3B6B     		ldr	r3, [r7, #48]
 2691 0038 1B6C     		ldr	r3, [r3, #64]
 2692 003a 002B     		cmp	r3, #0
 2693 003c 01D1     		bne	.L181
 2694              	.L180:
 2695              		.loc 1 1728 5 discriminator 3
 2696 003e 0123     		movs	r3, #1
 2697 0040 00E0     		b	.L182
 2698              	.L181:
 2699              		.loc 1 1728 5 discriminator 4
 2700 0042 0023     		movs	r3, #0
 2701              	.L182:
 2702              		.loc 1 1728 5 discriminator 6
 2703 0044 002B     		cmp	r3, #0
 2704 0046 0AD1     		bne	.L183
 2705              	.LBB179:
 2706              	.LBB180:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2707              		.loc 2 198 9 is_stmt 1
 2708              		.syntax unified
 2709              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2710 0048 4FF05003 			mov r3, #80												
 2711 004c 83F31188 		msr basepri, r3											
 2712 0050 BFF36F8F 		isb														
 2713 0054 BFF34F8F 		dsb														
 2714              	
 2715              	@ 0 "" 2
 2716              		.thumb
 2717              		.syntax unified
 2718 0058 3B62     		str	r3, [r7, #32]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2719              		.loc 2 206 5
 2720 005a 00BF     		nop
 2721              	.L184:
 2722              	.LBE180:
 2723              	.LBE179:
 2724              		.loc 1 1728 5 discriminator 2
 2725 005c FEE7     		b	.L184
 2726              	.L183:
1729:./Drivers/FreeRTOS/queue.c **** 
1730:./Drivers/FreeRTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1731:./Drivers/FreeRTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1732:./Drivers/FreeRTOS/queue.c ****         {
1733:./Drivers/FreeRTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2727              		.loc 1 1733 13
 2728 005e FFF7FEFF 		bl	xTaskGetSchedulerState
 2729 0062 0346     		mov	r3, r0
 2730 0064 002B     		cmp	r3, #0
 2731 0066 02D1     		bne	.L185
 2732              		.loc 1 1733 13 is_stmt 0 discriminator 2
 2733 0068 7B68     		ldr	r3, [r7, #4]
 2734 006a 002B     		cmp	r3, #0
 2735 006c 01D1     		bne	.L186
 2736              	.L185:
 2737              		.loc 1 1733 13 discriminator 3
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 84


 2738 006e 0123     		movs	r3, #1
 2739 0070 00E0     		b	.L187
 2740              	.L186:
 2741              		.loc 1 1733 13 discriminator 4
 2742 0072 0023     		movs	r3, #0
 2743              	.L187:
 2744              		.loc 1 1733 13 discriminator 6
 2745 0074 002B     		cmp	r3, #0
 2746 0076 0AD1     		bne	.L188
 2747              	.LBB181:
 2748              	.LBB182:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 2749              		.loc 2 198 9 is_stmt 1
 2750              		.syntax unified
 2751              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 2752 0078 4FF05003 			mov r3, #80												
 2753 007c 83F31188 		msr basepri, r3											
 2754 0080 BFF36F8F 		isb														
 2755 0084 BFF34F8F 		dsb														
 2756              	
 2757              	@ 0 "" 2
 2758              		.thumb
 2759              		.syntax unified
 2760 0088 FB61     		str	r3, [r7, #28]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 2761              		.loc 2 206 5
 2762 008a 00BF     		nop
 2763              	.L189:
 2764              	.LBE182:
 2765              	.LBE181:
 2766              		.loc 1 1733 13 discriminator 3
 2767 008c FEE7     		b	.L189
 2768              	.L188:
1734:./Drivers/FreeRTOS/queue.c ****         }
1735:./Drivers/FreeRTOS/queue.c ****     #endif
1736:./Drivers/FreeRTOS/queue.c **** 
1737:./Drivers/FreeRTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1738:./Drivers/FreeRTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1739:./Drivers/FreeRTOS/queue.c ****      * interest of execution time efficiency. */
1740:./Drivers/FreeRTOS/queue.c ****     for( ; ; )
1741:./Drivers/FreeRTOS/queue.c ****     {
1742:./Drivers/FreeRTOS/queue.c ****         taskENTER_CRITICAL();
 2769              		.loc 1 1742 9
 2770 008e FFF7FEFF 		bl	vPortEnterCritical
 2771              	.LBB183:
1743:./Drivers/FreeRTOS/queue.c ****         {
1744:./Drivers/FreeRTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2772              		.loc 1 1744 31
 2773 0092 3B6B     		ldr	r3, [r7, #48]
 2774 0094 9B6B     		ldr	r3, [r3, #56]
 2775 0096 FB62     		str	r3, [r7, #44]
1745:./Drivers/FreeRTOS/queue.c **** 
1746:./Drivers/FreeRTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1747:./Drivers/FreeRTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1748:./Drivers/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2776              		.loc 1 1748 15
 2777 0098 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 85


 2778 009a 002B     		cmp	r3, #0
 2779 009c 21D0     		beq	.L190
1749:./Drivers/FreeRTOS/queue.c ****             {
1750:./Drivers/FreeRTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1751:./Drivers/FreeRTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1752:./Drivers/FreeRTOS/queue.c ****                  * data, not removing it. */
1753:./Drivers/FreeRTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2780              		.loc 1 1753 40
 2781 009e 3B6B     		ldr	r3, [r7, #48]
 2782 00a0 DB68     		ldr	r3, [r3, #12]
 2783 00a2 BB62     		str	r3, [r7, #40]
1754:./Drivers/FreeRTOS/queue.c **** 
1755:./Drivers/FreeRTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2784              		.loc 1 1755 17
 2785 00a4 B968     		ldr	r1, [r7, #8]
 2786 00a6 386B     		ldr	r0, [r7, #48]
 2787 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1756:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1757:./Drivers/FreeRTOS/queue.c **** 
1758:./Drivers/FreeRTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1759:./Drivers/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2788              		.loc 1 1759 46
 2789 00ac 3B6B     		ldr	r3, [r7, #48]
 2790 00ae BA6A     		ldr	r2, [r7, #40]
 2791 00b0 DA60     		str	r2, [r3, #12]
1760:./Drivers/FreeRTOS/queue.c **** 
1761:./Drivers/FreeRTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1762:./Drivers/FreeRTOS/queue.c ****                  * any other tasks waiting for the data. */
1763:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2792              		.loc 1 1763 21
 2793 00b2 3B6B     		ldr	r3, [r7, #48]
 2794 00b4 5B6A     		ldr	r3, [r3, #36]
 2795              		.loc 1 1763 19
 2796 00b6 002B     		cmp	r3, #0
 2797 00b8 0FD0     		beq	.L191
1764:./Drivers/FreeRTOS/queue.c ****                 {
1765:./Drivers/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
 2798              		.loc 1 1765 51
 2799 00ba 3B6B     		ldr	r3, [r7, #48]
 2800 00bc 2433     		adds	r3, r3, #36
 2801              		.loc 1 1765 25
 2802 00be 1846     		mov	r0, r3
 2803 00c0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2804 00c4 0346     		mov	r3, r0
 2805              		.loc 1 1765 23
 2806 00c6 002B     		cmp	r3, #0
 2807 00c8 07D0     		beq	.L191
1766:./Drivers/FreeRTOS/queue.c ****                     {
1767:./Drivers/FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1768:./Drivers/FreeRTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2808              		.loc 1 1768 25
 2809 00ca 3D4B     		ldr	r3, .L201
 2810 00cc 4FF08052 		mov	r2, #268435456
 2811 00d0 1A60     		str	r2, [r3]
 2812              		.syntax unified
 2813              	@ 1768 "./Drivers/FreeRTOS/queue.c" 1
 2814 00d2 BFF34F8F 		dsb
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 86


 2815              	@ 0 "" 2
 2816              	@ 1768 "./Drivers/FreeRTOS/queue.c" 1
 2817 00d6 BFF36F8F 		isb
 2818              	@ 0 "" 2
 2819              		.thumb
 2820              		.syntax unified
 2821              	.L191:
1769:./Drivers/FreeRTOS/queue.c ****                     }
1770:./Drivers/FreeRTOS/queue.c ****                     else
1771:./Drivers/FreeRTOS/queue.c ****                     {
1772:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1773:./Drivers/FreeRTOS/queue.c ****                     }
1774:./Drivers/FreeRTOS/queue.c ****                 }
1775:./Drivers/FreeRTOS/queue.c ****                 else
1776:./Drivers/FreeRTOS/queue.c ****                 {
1777:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1778:./Drivers/FreeRTOS/queue.c ****                 }
1779:./Drivers/FreeRTOS/queue.c **** 
1780:./Drivers/FreeRTOS/queue.c ****                 taskEXIT_CRITICAL();
 2822              		.loc 1 1780 17
 2823 00da FFF7FEFF 		bl	vPortExitCritical
1781:./Drivers/FreeRTOS/queue.c ****                 return pdPASS;
 2824              		.loc 1 1781 24
 2825 00de 0123     		movs	r3, #1
 2826 00e0 69E0     		b	.L200
 2827              	.L190:
1782:./Drivers/FreeRTOS/queue.c ****             }
1783:./Drivers/FreeRTOS/queue.c ****             else
1784:./Drivers/FreeRTOS/queue.c ****             {
1785:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2828              		.loc 1 1785 34
 2829 00e2 7B68     		ldr	r3, [r7, #4]
 2830              		.loc 1 1785 19
 2831 00e4 002B     		cmp	r3, #0
 2832 00e6 03D1     		bne	.L193
1786:./Drivers/FreeRTOS/queue.c ****                 {
1787:./Drivers/FreeRTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1788:./Drivers/FreeRTOS/queue.c ****                      * the block time has expired) so leave now. */
1789:./Drivers/FreeRTOS/queue.c ****                     taskEXIT_CRITICAL();
 2833              		.loc 1 1789 21
 2834 00e8 FFF7FEFF 		bl	vPortExitCritical
1790:./Drivers/FreeRTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1791:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_EMPTY;
 2835              		.loc 1 1791 28
 2836 00ec 0023     		movs	r3, #0
 2837 00ee 62E0     		b	.L200
 2838              	.L193:
1792:./Drivers/FreeRTOS/queue.c ****                 }
1793:./Drivers/FreeRTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2839              		.loc 1 1793 24
 2840 00f0 7B6B     		ldr	r3, [r7, #52]
 2841 00f2 002B     		cmp	r3, #0
 2842 00f4 06D1     		bne	.L194
1794:./Drivers/FreeRTOS/queue.c ****                 {
1795:./Drivers/FreeRTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1796:./Drivers/FreeRTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1797:./Drivers/FreeRTOS/queue.c ****                      * state. */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 87


1798:./Drivers/FreeRTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2843              		.loc 1 1798 21
 2844 00f6 07F11403 		add	r3, r7, #20
 2845 00fa 1846     		mov	r0, r3
 2846 00fc FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1799:./Drivers/FreeRTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2847              		.loc 1 1799 35
 2848 0100 0123     		movs	r3, #1
 2849 0102 7B63     		str	r3, [r7, #52]
 2850              	.L194:
 2851              	.LBE183:
1800:./Drivers/FreeRTOS/queue.c ****                 }
1801:./Drivers/FreeRTOS/queue.c ****                 else
1802:./Drivers/FreeRTOS/queue.c ****                 {
1803:./Drivers/FreeRTOS/queue.c ****                     /* Entry time was already set. */
1804:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1805:./Drivers/FreeRTOS/queue.c ****                 }
1806:./Drivers/FreeRTOS/queue.c ****             }
1807:./Drivers/FreeRTOS/queue.c ****         }
1808:./Drivers/FreeRTOS/queue.c ****         taskEXIT_CRITICAL();
 2852              		.loc 1 1808 9
 2853 0104 FFF7FEFF 		bl	vPortExitCritical
1809:./Drivers/FreeRTOS/queue.c **** 
1810:./Drivers/FreeRTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1811:./Drivers/FreeRTOS/queue.c ****          * now that the critical section has been exited. */
1812:./Drivers/FreeRTOS/queue.c **** 
1813:./Drivers/FreeRTOS/queue.c ****         vTaskSuspendAll();
 2854              		.loc 1 1813 9
 2855 0108 FFF7FEFF 		bl	vTaskSuspendAll
1814:./Drivers/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 2856              		.loc 1 1814 9
 2857 010c FFF7FEFF 		bl	vPortEnterCritical
 2858 0110 3B6B     		ldr	r3, [r7, #48]
 2859 0112 93F84430 		ldrb	r3, [r3, #68]
 2860 0116 5BB2     		sxtb	r3, r3
 2861 0118 B3F1FF3F 		cmp	r3, #-1
 2862 011c 03D1     		bne	.L195
 2863              		.loc 1 1814 9 is_stmt 0 discriminator 1
 2864 011e 3B6B     		ldr	r3, [r7, #48]
 2865 0120 0022     		movs	r2, #0
 2866 0122 83F84420 		strb	r2, [r3, #68]
 2867              	.L195:
 2868              		.loc 1 1814 9 discriminator 3
 2869 0126 3B6B     		ldr	r3, [r7, #48]
 2870 0128 93F84530 		ldrb	r3, [r3, #69]
 2871 012c 5BB2     		sxtb	r3, r3
 2872 012e B3F1FF3F 		cmp	r3, #-1
 2873 0132 03D1     		bne	.L196
 2874              		.loc 1 1814 9 discriminator 4
 2875 0134 3B6B     		ldr	r3, [r7, #48]
 2876 0136 0022     		movs	r2, #0
 2877 0138 83F84520 		strb	r2, [r3, #69]
 2878              	.L196:
 2879              		.loc 1 1814 9 discriminator 6
 2880 013c FFF7FEFF 		bl	vPortExitCritical
1815:./Drivers/FreeRTOS/queue.c **** 
1816:./Drivers/FreeRTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 88


1817:./Drivers/FreeRTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2881              		.loc 1 1817 13 is_stmt 1 discriminator 6
 2882 0140 3A1D     		adds	r2, r7, #4
 2883 0142 07F11403 		add	r3, r7, #20
 2884 0146 1146     		mov	r1, r2
 2885 0148 1846     		mov	r0, r3
 2886 014a FFF7FEFF 		bl	xTaskCheckForTimeOut
 2887 014e 0346     		mov	r3, r0
 2888              		.loc 1 1817 11 discriminator 6
 2889 0150 002B     		cmp	r3, #0
 2890 0152 23D1     		bne	.L197
1818:./Drivers/FreeRTOS/queue.c ****         {
1819:./Drivers/FreeRTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1820:./Drivers/FreeRTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1821:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2891              		.loc 1 1821 17
 2892 0154 386B     		ldr	r0, [r7, #48]
 2893 0156 FFF7FEFF 		bl	prvIsQueueEmpty
 2894 015a 0346     		mov	r3, r0
 2895              		.loc 1 1821 15
 2896 015c 002B     		cmp	r3, #0
 2897 015e 17D0     		beq	.L198
1822:./Drivers/FreeRTOS/queue.c ****             {
1823:./Drivers/FreeRTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1824:./Drivers/FreeRTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2898              		.loc 1 1824 17
 2899 0160 3B6B     		ldr	r3, [r7, #48]
 2900 0162 2433     		adds	r3, r3, #36
 2901 0164 7A68     		ldr	r2, [r7, #4]
 2902 0166 1146     		mov	r1, r2
 2903 0168 1846     		mov	r0, r3
 2904 016a FFF7FEFF 		bl	vTaskPlaceOnEventList
1825:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2905              		.loc 1 1825 17
 2906 016e 386B     		ldr	r0, [r7, #48]
 2907 0170 FFF7FEFF 		bl	prvUnlockQueue
1826:./Drivers/FreeRTOS/queue.c **** 
1827:./Drivers/FreeRTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2908              		.loc 1 1827 21
 2909 0174 FFF7FEFF 		bl	xTaskResumeAll
 2910 0178 0346     		mov	r3, r0
 2911              		.loc 1 1827 19
 2912 017a 002B     		cmp	r3, #0
 2913 017c 87D1     		bne	.L188
1828:./Drivers/FreeRTOS/queue.c ****                 {
1829:./Drivers/FreeRTOS/queue.c ****                     portYIELD_WITHIN_API();
 2914              		.loc 1 1829 21
 2915 017e 104B     		ldr	r3, .L201
 2916 0180 4FF08052 		mov	r2, #268435456
 2917 0184 1A60     		str	r2, [r3]
 2918              		.syntax unified
 2919              	@ 1829 "./Drivers/FreeRTOS/queue.c" 1
 2920 0186 BFF34F8F 		dsb
 2921              	@ 0 "" 2
 2922              	@ 1829 "./Drivers/FreeRTOS/queue.c" 1
 2923 018a BFF36F8F 		isb
 2924              	@ 0 "" 2
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 89


 2925              		.thumb
 2926              		.syntax unified
 2927 018e 7EE7     		b	.L188
 2928              	.L198:
1830:./Drivers/FreeRTOS/queue.c ****                 }
1831:./Drivers/FreeRTOS/queue.c ****                 else
1832:./Drivers/FreeRTOS/queue.c ****                 {
1833:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1834:./Drivers/FreeRTOS/queue.c ****                 }
1835:./Drivers/FreeRTOS/queue.c ****             }
1836:./Drivers/FreeRTOS/queue.c ****             else
1837:./Drivers/FreeRTOS/queue.c ****             {
1838:./Drivers/FreeRTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1839:./Drivers/FreeRTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1840:./Drivers/FreeRTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2929              		.loc 1 1840 17
 2930 0190 386B     		ldr	r0, [r7, #48]
 2931 0192 FFF7FEFF 		bl	prvUnlockQueue
1841:./Drivers/FreeRTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2932              		.loc 1 1841 26
 2933 0196 FFF7FEFF 		bl	xTaskResumeAll
 2934 019a 78E7     		b	.L188
 2935              	.L197:
1842:./Drivers/FreeRTOS/queue.c ****             }
1843:./Drivers/FreeRTOS/queue.c ****         }
1844:./Drivers/FreeRTOS/queue.c ****         else
1845:./Drivers/FreeRTOS/queue.c ****         {
1846:./Drivers/FreeRTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1847:./Drivers/FreeRTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1848:./Drivers/FreeRTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2936              		.loc 1 1848 13
 2937 019c 386B     		ldr	r0, [r7, #48]
 2938 019e FFF7FEFF 		bl	prvUnlockQueue
1849:./Drivers/FreeRTOS/queue.c ****             ( void ) xTaskResumeAll();
 2939              		.loc 1 1849 22
 2940 01a2 FFF7FEFF 		bl	xTaskResumeAll
1850:./Drivers/FreeRTOS/queue.c **** 
1851:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2941              		.loc 1 1851 17
 2942 01a6 386B     		ldr	r0, [r7, #48]
 2943 01a8 FFF7FEFF 		bl	prvIsQueueEmpty
 2944 01ac 0346     		mov	r3, r0
 2945              		.loc 1 1851 15
 2946 01ae 002B     		cmp	r3, #0
 2947 01b0 3FF46DAF 		beq	.L188
1852:./Drivers/FreeRTOS/queue.c ****             {
1853:./Drivers/FreeRTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1854:./Drivers/FreeRTOS/queue.c ****                 return errQUEUE_EMPTY;
 2948              		.loc 1 1854 24
 2949 01b4 0023     		movs	r3, #0
 2950              	.L200:
1855:./Drivers/FreeRTOS/queue.c ****             }
1856:./Drivers/FreeRTOS/queue.c ****             else
1857:./Drivers/FreeRTOS/queue.c ****             {
1858:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1859:./Drivers/FreeRTOS/queue.c ****             }
1860:./Drivers/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 90


1861:./Drivers/FreeRTOS/queue.c ****     } /*lint -restore */
1862:./Drivers/FreeRTOS/queue.c **** }
 2951              		.loc 1 1862 1 discriminator 6
 2952 01b6 1846     		mov	r0, r3
 2953 01b8 3837     		adds	r7, r7, #56
 2954              	.LCFI68:
 2955              		.cfi_def_cfa_offset 8
 2956 01ba BD46     		mov	sp, r7
 2957              	.LCFI69:
 2958              		.cfi_def_cfa_register 13
 2959              		@ sp needed
 2960 01bc 80BD     		pop	{r7, pc}
 2961              	.L202:
 2962 01be 00BF     		.align	2
 2963              	.L201:
 2964 01c0 04ED00E0 		.word	-536810236
 2965              		.cfi_endproc
 2966              	.LFE18:
 2968              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2969              		.align	1
 2970              		.global	xQueueReceiveFromISR
 2971              		.syntax unified
 2972              		.thumb
 2973              		.thumb_func
 2974              		.fpu fpv4-sp-d16
 2976              	xQueueReceiveFromISR:
 2977              	.LFB19:
1863:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1864:./Drivers/FreeRTOS/queue.c **** 
1865:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1866:./Drivers/FreeRTOS/queue.c ****                                  void * const pvBuffer,
1867:./Drivers/FreeRTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1868:./Drivers/FreeRTOS/queue.c **** {
 2978              		.loc 1 1868 1
 2979              		.cfi_startproc
 2980              		@ args = 0, pretend = 0, frame = 64
 2981              		@ frame_needed = 1, uses_anonymous_args = 0
 2982 0000 80B5     		push	{r7, lr}
 2983              	.LCFI70:
 2984              		.cfi_def_cfa_offset 8
 2985              		.cfi_offset 7, -8
 2986              		.cfi_offset 14, -4
 2987 0002 90B0     		sub	sp, sp, #64
 2988              	.LCFI71:
 2989              		.cfi_def_cfa_offset 72
 2990 0004 00AF     		add	r7, sp, #0
 2991              	.LCFI72:
 2992              		.cfi_def_cfa_register 7
 2993 0006 F860     		str	r0, [r7, #12]
 2994 0008 B960     		str	r1, [r7, #8]
 2995 000a 7A60     		str	r2, [r7, #4]
1869:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
1870:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1871:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2996              		.loc 1 1871 21
 2997 000c FB68     		ldr	r3, [r7, #12]
 2998 000e BB63     		str	r3, [r7, #56]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 91


1872:./Drivers/FreeRTOS/queue.c **** 
1873:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 2999              		.loc 1 1873 5
 3000 0010 BB6B     		ldr	r3, [r7, #56]
 3001 0012 002B     		cmp	r3, #0
 3002 0014 0AD1     		bne	.L204
 3003              	.LBB184:
 3004              	.LBB185:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3005              		.loc 2 198 9
 3006              		.syntax unified
 3007              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3008 0016 4FF05003 			mov r3, #80												
 3009 001a 83F31188 		msr basepri, r3											
 3010 001e BFF36F8F 		isb														
 3011 0022 BFF34F8F 		dsb														
 3012              	
 3013              	@ 0 "" 2
 3014              		.thumb
 3015              		.syntax unified
 3016 0026 BB62     		str	r3, [r7, #40]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3017              		.loc 2 206 5
 3018 0028 00BF     		nop
 3019              	.L205:
 3020              	.LBE185:
 3021              	.LBE184:
 3022              		.loc 1 1873 5 discriminator 1
 3023 002a FEE7     		b	.L205
 3024              	.L204:
1874:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3025              		.loc 1 1874 5
 3026 002c BB68     		ldr	r3, [r7, #8]
 3027 002e 002B     		cmp	r3, #0
 3028 0030 03D1     		bne	.L206
 3029              		.loc 1 1874 5 is_stmt 0 discriminator 2
 3030 0032 BB6B     		ldr	r3, [r7, #56]
 3031 0034 1B6C     		ldr	r3, [r3, #64]
 3032 0036 002B     		cmp	r3, #0
 3033 0038 01D1     		bne	.L207
 3034              	.L206:
 3035              		.loc 1 1874 5 discriminator 3
 3036 003a 0123     		movs	r3, #1
 3037 003c 00E0     		b	.L208
 3038              	.L207:
 3039              		.loc 1 1874 5 discriminator 4
 3040 003e 0023     		movs	r3, #0
 3041              	.L208:
 3042              		.loc 1 1874 5 discriminator 6
 3043 0040 002B     		cmp	r3, #0
 3044 0042 0AD1     		bne	.L209
 3045              	.LBB186:
 3046              	.LBB187:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3047              		.loc 2 198 9 is_stmt 1
 3048              		.syntax unified
 3049              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 92


 3050 0044 4FF05003 			mov r3, #80												
 3051 0048 83F31188 		msr basepri, r3											
 3052 004c BFF36F8F 		isb														
 3053 0050 BFF34F8F 		dsb														
 3054              	
 3055              	@ 0 "" 2
 3056              		.thumb
 3057              		.syntax unified
 3058 0054 7B62     		str	r3, [r7, #36]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3059              		.loc 2 206 5
 3060 0056 00BF     		nop
 3061              	.L210:
 3062              	.LBE187:
 3063              	.LBE186:
 3064              		.loc 1 1874 5 discriminator 2
 3065 0058 FEE7     		b	.L210
 3066              	.L209:
1875:./Drivers/FreeRTOS/queue.c **** 
1876:./Drivers/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1877:./Drivers/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1878:./Drivers/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1879:./Drivers/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1880:./Drivers/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1881:./Drivers/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1882:./Drivers/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1883:./Drivers/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1884:./Drivers/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1885:./Drivers/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1886:./Drivers/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1887:./Drivers/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1888:./Drivers/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1889:./Drivers/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1890:./Drivers/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3067              		.loc 1 1890 5
 3068 005a FFF7FEFF 		bl	vPortValidateInterruptPriority
 3069              	.LBB188:
 3070              	.LBB189:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3071              		.loc 2 214 9
 3072              		.syntax unified
 3073              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3074 005e EFF31182 			mrs r2, basepri											
 3075 0062 4FF05003 		mov r3, #80												
 3076 0066 83F31188 		msr basepri, r3											
 3077 006a BFF36F8F 		isb														
 3078 006e BFF34F8F 		dsb														
 3079              	
 3080              	@ 0 "" 2
 3081              		.thumb
 3082              		.syntax unified
 3083 0072 3A62     		str	r2, [r7, #32]
 3084 0074 FB61     		str	r3, [r7, #28]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3085              		.loc 2 226 16
 3086 0076 3B6A     		ldr	r3, [r7, #32]
 3087              	.LBE189:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 93


 3088              	.LBE188:
1891:./Drivers/FreeRTOS/queue.c **** 
1892:./Drivers/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3089              		.loc 1 1892 30
 3090 0078 7B63     		str	r3, [r7, #52]
 3091              	.LBB190:
1893:./Drivers/FreeRTOS/queue.c ****     {
1894:./Drivers/FreeRTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3092              		.loc 1 1894 27
 3093 007a BB6B     		ldr	r3, [r7, #56]
 3094 007c 9B6B     		ldr	r3, [r3, #56]
 3095 007e 3B63     		str	r3, [r7, #48]
1895:./Drivers/FreeRTOS/queue.c **** 
1896:./Drivers/FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1897:./Drivers/FreeRTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3096              		.loc 1 1897 11
 3097 0080 3B6B     		ldr	r3, [r7, #48]
 3098 0082 002B     		cmp	r3, #0
 3099 0084 3ED0     		beq	.L212
 3100              	.LBB191:
1898:./Drivers/FreeRTOS/queue.c ****         {
1899:./Drivers/FreeRTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
 3101              		.loc 1 1899 26
 3102 0086 BB6B     		ldr	r3, [r7, #56]
 3103 0088 93F84430 		ldrb	r3, [r3, #68]
 3104 008c 87F82F30 		strb	r3, [r7, #47]
1900:./Drivers/FreeRTOS/queue.c **** 
1901:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1902:./Drivers/FreeRTOS/queue.c **** 
1903:./Drivers/FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3105              		.loc 1 1903 13
 3106 0090 B968     		ldr	r1, [r7, #8]
 3107 0092 B86B     		ldr	r0, [r7, #56]
 3108 0094 FFF7FEFF 		bl	prvCopyDataFromQueue
1904:./Drivers/FreeRTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3109              		.loc 1 1904 60
 3110 0098 3B6B     		ldr	r3, [r7, #48]
 3111 009a 5A1E     		subs	r2, r3, #1
 3112              		.loc 1 1904 40
 3113 009c BB6B     		ldr	r3, [r7, #56]
 3114 009e 9A63     		str	r2, [r3, #56]
1905:./Drivers/FreeRTOS/queue.c **** 
1906:./Drivers/FreeRTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1907:./Drivers/FreeRTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1908:./Drivers/FreeRTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1909:./Drivers/FreeRTOS/queue.c ****              * locked. */
1910:./Drivers/FreeRTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
 3115              		.loc 1 1910 15
 3116 00a0 97F92F30 		ldrsb	r3, [r7, #47]
 3117 00a4 B3F1FF3F 		cmp	r3, #-1
 3118 00a8 12D1     		bne	.L213
1911:./Drivers/FreeRTOS/queue.c ****             {
1912:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3119              		.loc 1 1912 21
 3120 00aa BB6B     		ldr	r3, [r7, #56]
 3121 00ac 1B69     		ldr	r3, [r3, #16]
 3122              		.loc 1 1912 19
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 94


 3123 00ae 002B     		cmp	r3, #0
 3124 00b0 25D0     		beq	.L214
1913:./Drivers/FreeRTOS/queue.c ****                 {
1914:./Drivers/FreeRTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3125              		.loc 1 1914 51
 3126 00b2 BB6B     		ldr	r3, [r7, #56]
 3127 00b4 1033     		adds	r3, r3, #16
 3128              		.loc 1 1914 25
 3129 00b6 1846     		mov	r0, r3
 3130 00b8 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3131 00bc 0346     		mov	r3, r0
 3132              		.loc 1 1914 23
 3133 00be 002B     		cmp	r3, #0
 3134 00c0 1DD0     		beq	.L214
1915:./Drivers/FreeRTOS/queue.c ****                     {
1916:./Drivers/FreeRTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1917:./Drivers/FreeRTOS/queue.c ****                          * force a context switch. */
1918:./Drivers/FreeRTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
 3135              		.loc 1 1918 27
 3136 00c2 7B68     		ldr	r3, [r7, #4]
 3137 00c4 002B     		cmp	r3, #0
 3138 00c6 1AD0     		beq	.L214
1919:./Drivers/FreeRTOS/queue.c ****                         {
1920:./Drivers/FreeRTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
 3139              		.loc 1 1920 56
 3140 00c8 7B68     		ldr	r3, [r7, #4]
 3141 00ca 0122     		movs	r2, #1
 3142 00cc 1A60     		str	r2, [r3]
 3143 00ce 16E0     		b	.L214
 3144              	.L213:
1921:./Drivers/FreeRTOS/queue.c ****                         }
1922:./Drivers/FreeRTOS/queue.c ****                         else
1923:./Drivers/FreeRTOS/queue.c ****                         {
1924:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1925:./Drivers/FreeRTOS/queue.c ****                         }
1926:./Drivers/FreeRTOS/queue.c ****                     }
1927:./Drivers/FreeRTOS/queue.c ****                     else
1928:./Drivers/FreeRTOS/queue.c ****                     {
1929:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1930:./Drivers/FreeRTOS/queue.c ****                     }
1931:./Drivers/FreeRTOS/queue.c ****                 }
1932:./Drivers/FreeRTOS/queue.c ****                 else
1933:./Drivers/FreeRTOS/queue.c ****                 {
1934:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1935:./Drivers/FreeRTOS/queue.c ****                 }
1936:./Drivers/FreeRTOS/queue.c ****             }
1937:./Drivers/FreeRTOS/queue.c ****             else
1938:./Drivers/FreeRTOS/queue.c ****             {
1939:./Drivers/FreeRTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1940:./Drivers/FreeRTOS/queue.c ****                  * knows that data was removed while it was locked. */
1941:./Drivers/FreeRTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
 3145              		.loc 1 1941 17
 3146 00d0 97F92F30 		ldrsb	r3, [r7, #47]
 3147 00d4 7F2B     		cmp	r3, #127
 3148 00d6 0AD1     		bne	.L215
 3149              	.LBB192:
 3150              	.LBB193:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 95


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3151              		.loc 2 198 9
 3152              		.syntax unified
 3153              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3154 00d8 4FF05003 			mov r3, #80												
 3155 00dc 83F31188 		msr basepri, r3											
 3156 00e0 BFF36F8F 		isb														
 3157 00e4 BFF34F8F 		dsb														
 3158              	
 3159              	@ 0 "" 2
 3160              		.thumb
 3161              		.syntax unified
 3162 00e8 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3163              		.loc 2 206 5
 3164 00ea 00BF     		nop
 3165              	.L216:
 3166              	.LBE193:
 3167              	.LBE192:
 3168              		.loc 1 1941 17 discriminator 5
 3169 00ec FEE7     		b	.L216
 3170              	.L215:
1942:./Drivers/FreeRTOS/queue.c **** 
1943:./Drivers/FreeRTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 3171              		.loc 1 1943 57
 3172 00ee 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3173 00f2 0133     		adds	r3, r3, #1
 3174 00f4 DBB2     		uxtb	r3, r3
 3175              		.loc 1 1943 36
 3176 00f6 5AB2     		sxtb	r2, r3
 3177              		.loc 1 1943 34
 3178 00f8 BB6B     		ldr	r3, [r7, #56]
 3179 00fa 83F84420 		strb	r2, [r3, #68]
 3180              	.L214:
1944:./Drivers/FreeRTOS/queue.c ****             }
1945:./Drivers/FreeRTOS/queue.c **** 
1946:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 3181              		.loc 1 1946 21
 3182 00fe 0123     		movs	r3, #1
 3183 0100 FB63     		str	r3, [r7, #60]
 3184              	.LBE191:
 3185 0102 01E0     		b	.L217
 3186              	.L212:
1947:./Drivers/FreeRTOS/queue.c ****         }
1948:./Drivers/FreeRTOS/queue.c ****         else
1949:./Drivers/FreeRTOS/queue.c ****         {
1950:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 3187              		.loc 1 1950 21
 3188 0104 0023     		movs	r3, #0
 3189 0106 FB63     		str	r3, [r7, #60]
 3190              	.L217:
 3191 0108 7B6B     		ldr	r3, [r7, #52]
 3192 010a 7B61     		str	r3, [r7, #20]
 3193              	.LBE190:
 3194              	.LBB194:
 3195              	.LBB195:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 96


 3196              		.loc 2 232 9
 3197 010c 7B69     		ldr	r3, [r7, #20]
 3198              		.syntax unified
 3199              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3200 010e 83F31188 			msr basepri, r3	
 3201              	@ 0 "" 2
 3202              		.loc 2 236 5
 3203              		.thumb
 3204              		.syntax unified
 3205 0112 00BF     		nop
 3206              	.LBE195:
 3207              	.LBE194:
1951:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1952:./Drivers/FreeRTOS/queue.c ****         }
1953:./Drivers/FreeRTOS/queue.c ****     }
1954:./Drivers/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1955:./Drivers/FreeRTOS/queue.c **** 
1956:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 3208              		.loc 1 1956 12
 3209 0114 FB6B     		ldr	r3, [r7, #60]
1957:./Drivers/FreeRTOS/queue.c **** }
 3210              		.loc 1 1957 1
 3211 0116 1846     		mov	r0, r3
 3212 0118 4037     		adds	r7, r7, #64
 3213              	.LCFI73:
 3214              		.cfi_def_cfa_offset 8
 3215 011a BD46     		mov	sp, r7
 3216              	.LCFI74:
 3217              		.cfi_def_cfa_register 13
 3218              		@ sp needed
 3219 011c 80BD     		pop	{r7, pc}
 3220              		.cfi_endproc
 3221              	.LFE19:
 3223              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3224              		.align	1
 3225              		.global	xQueuePeekFromISR
 3226              		.syntax unified
 3227              		.thumb
 3228              		.thumb_func
 3229              		.fpu fpv4-sp-d16
 3231              	xQueuePeekFromISR:
 3232              	.LFB20:
1958:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1959:./Drivers/FreeRTOS/queue.c **** 
1960:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1961:./Drivers/FreeRTOS/queue.c ****                               void * const pvBuffer )
1962:./Drivers/FreeRTOS/queue.c **** {
 3233              		.loc 1 1962 1
 3234              		.cfi_startproc
 3235              		@ args = 0, pretend = 0, frame = 48
 3236              		@ frame_needed = 1, uses_anonymous_args = 0
 3237 0000 80B5     		push	{r7, lr}
 3238              	.LCFI75:
 3239              		.cfi_def_cfa_offset 8
 3240              		.cfi_offset 7, -8
 3241              		.cfi_offset 14, -4
 3242 0002 8CB0     		sub	sp, sp, #48
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 97


 3243              	.LCFI76:
 3244              		.cfi_def_cfa_offset 56
 3245 0004 00AF     		add	r7, sp, #0
 3246              	.LCFI77:
 3247              		.cfi_def_cfa_register 7
 3248 0006 7860     		str	r0, [r7, #4]
 3249 0008 3960     		str	r1, [r7]
1963:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
1964:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1965:./Drivers/FreeRTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1966:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3250              		.loc 1 1966 21
 3251 000a 7B68     		ldr	r3, [r7, #4]
 3252 000c BB62     		str	r3, [r7, #40]
1967:./Drivers/FreeRTOS/queue.c **** 
1968:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3253              		.loc 1 1968 5
 3254 000e BB6A     		ldr	r3, [r7, #40]
 3255 0010 002B     		cmp	r3, #0
 3256 0012 0AD1     		bne	.L220
 3257              	.LBB196:
 3258              	.LBB197:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3259              		.loc 2 198 9
 3260              		.syntax unified
 3261              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3262 0014 4FF05003 			mov r3, #80												
 3263 0018 83F31188 		msr basepri, r3											
 3264 001c BFF36F8F 		isb														
 3265 0020 BFF34F8F 		dsb														
 3266              	
 3267              	@ 0 "" 2
 3268              		.thumb
 3269              		.syntax unified
 3270 0024 FB61     		str	r3, [r7, #28]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3271              		.loc 2 206 5
 3272 0026 00BF     		nop
 3273              	.L221:
 3274              	.LBE197:
 3275              	.LBE196:
 3276              		.loc 1 1968 5 discriminator 1
 3277 0028 FEE7     		b	.L221
 3278              	.L220:
1969:./Drivers/FreeRTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3279              		.loc 1 1969 5
 3280 002a 3B68     		ldr	r3, [r7]
 3281 002c 002B     		cmp	r3, #0
 3282 002e 03D1     		bne	.L222
 3283              		.loc 1 1969 5 is_stmt 0 discriminator 2
 3284 0030 BB6A     		ldr	r3, [r7, #40]
 3285 0032 1B6C     		ldr	r3, [r3, #64]
 3286 0034 002B     		cmp	r3, #0
 3287 0036 01D1     		bne	.L223
 3288              	.L222:
 3289              		.loc 1 1969 5 discriminator 3
 3290 0038 0123     		movs	r3, #1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 98


 3291 003a 00E0     		b	.L224
 3292              	.L223:
 3293              		.loc 1 1969 5 discriminator 4
 3294 003c 0023     		movs	r3, #0
 3295              	.L224:
 3296              		.loc 1 1969 5 discriminator 6
 3297 003e 002B     		cmp	r3, #0
 3298 0040 0AD1     		bne	.L225
 3299              	.LBB198:
 3300              	.LBB199:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3301              		.loc 2 198 9 is_stmt 1
 3302              		.syntax unified
 3303              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3304 0042 4FF05003 			mov r3, #80												
 3305 0046 83F31188 		msr basepri, r3											
 3306 004a BFF36F8F 		isb														
 3307 004e BFF34F8F 		dsb														
 3308              	
 3309              	@ 0 "" 2
 3310              		.thumb
 3311              		.syntax unified
 3312 0052 BB61     		str	r3, [r7, #24]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3313              		.loc 2 206 5
 3314 0054 00BF     		nop
 3315              	.L226:
 3316              	.LBE199:
 3317              	.LBE198:
 3318              		.loc 1 1969 5 discriminator 2
 3319 0056 FEE7     		b	.L226
 3320              	.L225:
1970:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3321              		.loc 1 1970 5
 3322 0058 BB6A     		ldr	r3, [r7, #40]
 3323 005a 1B6C     		ldr	r3, [r3, #64]
 3324 005c 002B     		cmp	r3, #0
 3325 005e 0AD1     		bne	.L227
 3326              	.LBB200:
 3327              	.LBB201:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3328              		.loc 2 198 9
 3329              		.syntax unified
 3330              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3331 0060 4FF05003 			mov r3, #80												
 3332 0064 83F31188 		msr basepri, r3											
 3333 0068 BFF36F8F 		isb														
 3334 006c BFF34F8F 		dsb														
 3335              	
 3336              	@ 0 "" 2
 3337              		.thumb
 3338              		.syntax unified
 3339 0070 7B61     		str	r3, [r7, #20]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3340              		.loc 2 206 5
 3341 0072 00BF     		nop
 3342              	.L228:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 99


 3343              	.LBE201:
 3344              	.LBE200:
 3345              		.loc 1 1970 5 discriminator 3
 3346 0074 FEE7     		b	.L228
 3347              	.L227:
1971:./Drivers/FreeRTOS/queue.c **** 
1972:./Drivers/FreeRTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1973:./Drivers/FreeRTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1974:./Drivers/FreeRTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1975:./Drivers/FreeRTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1976:./Drivers/FreeRTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1977:./Drivers/FreeRTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1978:./Drivers/FreeRTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1979:./Drivers/FreeRTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1980:./Drivers/FreeRTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1981:./Drivers/FreeRTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1982:./Drivers/FreeRTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1983:./Drivers/FreeRTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1984:./Drivers/FreeRTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1985:./Drivers/FreeRTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1986:./Drivers/FreeRTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3348              		.loc 1 1986 5
 3349 0076 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3350              	.LBB202:
 3351              	.LBB203:
 214:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3352              		.loc 2 214 9
 3353              		.syntax unified
 3354              	@ 214 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3355 007a EFF31182 			mrs r2, basepri											
 3356 007e 4FF05003 		mov r3, #80												
 3357 0082 83F31188 		msr basepri, r3											
 3358 0086 BFF36F8F 		isb														
 3359 008a BFF34F8F 		dsb														
 3360              	
 3361              	@ 0 "" 2
 3362              		.thumb
 3363              		.syntax unified
 3364 008e 3A61     		str	r2, [r7, #16]
 3365 0090 FB60     		str	r3, [r7, #12]
 226:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     }
 3366              		.loc 2 226 16
 3367 0092 3B69     		ldr	r3, [r7, #16]
 3368              	.LBE203:
 3369              	.LBE202:
1987:./Drivers/FreeRTOS/queue.c **** 
1988:./Drivers/FreeRTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3370              		.loc 1 1988 30
 3371 0094 7B62     		str	r3, [r7, #36]
1989:./Drivers/FreeRTOS/queue.c ****     {
1990:./Drivers/FreeRTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1991:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 3372              		.loc 1 1991 20
 3373 0096 BB6A     		ldr	r3, [r7, #40]
 3374 0098 9B6B     		ldr	r3, [r3, #56]
 3375              		.loc 1 1991 11
 3376 009a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 100


 3377 009c 0CD0     		beq	.L230
1992:./Drivers/FreeRTOS/queue.c ****         {
1993:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1994:./Drivers/FreeRTOS/queue.c **** 
1995:./Drivers/FreeRTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1996:./Drivers/FreeRTOS/queue.c ****              * actually being removed from the queue. */
1997:./Drivers/FreeRTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 3378              		.loc 1 1997 36
 3379 009e BB6A     		ldr	r3, [r7, #40]
 3380 00a0 DB68     		ldr	r3, [r3, #12]
 3381 00a2 3B62     		str	r3, [r7, #32]
1998:./Drivers/FreeRTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 3382              		.loc 1 1998 13
 3383 00a4 3968     		ldr	r1, [r7]
 3384 00a6 B86A     		ldr	r0, [r7, #40]
 3385 00a8 FFF7FEFF 		bl	prvCopyDataFromQueue
1999:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3386              		.loc 1 1999 42
 3387 00ac BB6A     		ldr	r3, [r7, #40]
 3388 00ae 3A6A     		ldr	r2, [r7, #32]
 3389 00b0 DA60     		str	r2, [r3, #12]
2000:./Drivers/FreeRTOS/queue.c **** 
2001:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
 3390              		.loc 1 2001 21
 3391 00b2 0123     		movs	r3, #1
 3392 00b4 FB62     		str	r3, [r7, #44]
 3393 00b6 01E0     		b	.L231
 3394              	.L230:
2002:./Drivers/FreeRTOS/queue.c ****         }
2003:./Drivers/FreeRTOS/queue.c ****         else
2004:./Drivers/FreeRTOS/queue.c ****         {
2005:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFAIL;
 3395              		.loc 1 2005 21
 3396 00b8 0023     		movs	r3, #0
 3397 00ba FB62     		str	r3, [r7, #44]
 3398              	.L231:
 3399 00bc 7B6A     		ldr	r3, [r7, #36]
 3400 00be BB60     		str	r3, [r7, #8]
 3401              	.LBB204:
 3402              	.LBB205:
 232:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3403              		.loc 2 232 9
 3404 00c0 BB68     		ldr	r3, [r7, #8]
 3405              		.syntax unified
 3406              	@ 232 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3407 00c2 83F31188 			msr basepri, r3	
 3408              	@ 0 "" 2
 3409              		.loc 2 236 5
 3410              		.thumb
 3411              		.syntax unified
 3412 00c6 00BF     		nop
 3413              	.LBE205:
 3414              	.LBE204:
2006:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2007:./Drivers/FreeRTOS/queue.c ****         }
2008:./Drivers/FreeRTOS/queue.c ****     }
2009:./Drivers/FreeRTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 101


2010:./Drivers/FreeRTOS/queue.c **** 
2011:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 3415              		.loc 1 2011 12
 3416 00c8 FB6A     		ldr	r3, [r7, #44]
2012:./Drivers/FreeRTOS/queue.c **** }
 3417              		.loc 1 2012 1
 3418 00ca 1846     		mov	r0, r3
 3419 00cc 3037     		adds	r7, r7, #48
 3420              	.LCFI78:
 3421              		.cfi_def_cfa_offset 8
 3422 00ce BD46     		mov	sp, r7
 3423              	.LCFI79:
 3424              		.cfi_def_cfa_register 13
 3425              		@ sp needed
 3426 00d0 80BD     		pop	{r7, pc}
 3427              		.cfi_endproc
 3428              	.LFE20:
 3430              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3431              		.align	1
 3432              		.global	uxQueueMessagesWaiting
 3433              		.syntax unified
 3434              		.thumb
 3435              		.thumb_func
 3436              		.fpu fpv4-sp-d16
 3438              	uxQueueMessagesWaiting:
 3439              	.LFB21:
2013:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2014:./Drivers/FreeRTOS/queue.c **** 
2015:./Drivers/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2016:./Drivers/FreeRTOS/queue.c **** {
 3440              		.loc 1 2016 1
 3441              		.cfi_startproc
 3442              		@ args = 0, pretend = 0, frame = 16
 3443              		@ frame_needed = 1, uses_anonymous_args = 0
 3444 0000 80B5     		push	{r7, lr}
 3445              	.LCFI80:
 3446              		.cfi_def_cfa_offset 8
 3447              		.cfi_offset 7, -8
 3448              		.cfi_offset 14, -4
 3449 0002 84B0     		sub	sp, sp, #16
 3450              	.LCFI81:
 3451              		.cfi_def_cfa_offset 24
 3452 0004 00AF     		add	r7, sp, #0
 3453              	.LCFI82:
 3454              		.cfi_def_cfa_register 7
 3455 0006 7860     		str	r0, [r7, #4]
2017:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2018:./Drivers/FreeRTOS/queue.c **** 
2019:./Drivers/FreeRTOS/queue.c ****     configASSERT( xQueue );
 3456              		.loc 1 2019 5
 3457 0008 7B68     		ldr	r3, [r7, #4]
 3458 000a 002B     		cmp	r3, #0
 3459 000c 0AD1     		bne	.L234
 3460              	.LBB206:
 3461              	.LBB207:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3462              		.loc 2 198 9
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 102


 3463              		.syntax unified
 3464              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3465 000e 4FF05003 			mov r3, #80												
 3466 0012 83F31188 		msr basepri, r3											
 3467 0016 BFF36F8F 		isb														
 3468 001a BFF34F8F 		dsb														
 3469              	
 3470              	@ 0 "" 2
 3471              		.thumb
 3472              		.syntax unified
 3473 001e BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3474              		.loc 2 206 5
 3475 0020 00BF     		nop
 3476              	.L235:
 3477              	.LBE207:
 3478              	.LBE206:
 3479              		.loc 1 2019 5 discriminator 1
 3480 0022 FEE7     		b	.L235
 3481              	.L234:
2020:./Drivers/FreeRTOS/queue.c **** 
2021:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 3482              		.loc 1 2021 5
 3483 0024 FFF7FEFF 		bl	vPortEnterCritical
2022:./Drivers/FreeRTOS/queue.c ****     {
2023:./Drivers/FreeRTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 3484              		.loc 1 2023 18
 3485 0028 7B68     		ldr	r3, [r7, #4]
 3486 002a 9B6B     		ldr	r3, [r3, #56]
 3487 002c FB60     		str	r3, [r7, #12]
2024:./Drivers/FreeRTOS/queue.c ****     }
2025:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 3488              		.loc 1 2025 5
 3489 002e FFF7FEFF 		bl	vPortExitCritical
2026:./Drivers/FreeRTOS/queue.c **** 
2027:./Drivers/FreeRTOS/queue.c ****     return uxReturn;
 3490              		.loc 1 2027 12
 3491 0032 FB68     		ldr	r3, [r7, #12]
2028:./Drivers/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3492              		.loc 1 2028 1
 3493 0034 1846     		mov	r0, r3
 3494 0036 1037     		adds	r7, r7, #16
 3495              	.LCFI83:
 3496              		.cfi_def_cfa_offset 8
 3497 0038 BD46     		mov	sp, r7
 3498              	.LCFI84:
 3499              		.cfi_def_cfa_register 13
 3500              		@ sp needed
 3501 003a 80BD     		pop	{r7, pc}
 3502              		.cfi_endproc
 3503              	.LFE21:
 3505              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3506              		.align	1
 3507              		.global	uxQueueSpacesAvailable
 3508              		.syntax unified
 3509              		.thumb
 3510              		.thumb_func
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 103


 3511              		.fpu fpv4-sp-d16
 3513              	uxQueueSpacesAvailable:
 3514              	.LFB22:
2029:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2030:./Drivers/FreeRTOS/queue.c **** 
2031:./Drivers/FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2032:./Drivers/FreeRTOS/queue.c **** {
 3515              		.loc 1 2032 1
 3516              		.cfi_startproc
 3517              		@ args = 0, pretend = 0, frame = 24
 3518              		@ frame_needed = 1, uses_anonymous_args = 0
 3519 0000 80B5     		push	{r7, lr}
 3520              	.LCFI85:
 3521              		.cfi_def_cfa_offset 8
 3522              		.cfi_offset 7, -8
 3523              		.cfi_offset 14, -4
 3524 0002 86B0     		sub	sp, sp, #24
 3525              	.LCFI86:
 3526              		.cfi_def_cfa_offset 32
 3527 0004 00AF     		add	r7, sp, #0
 3528              	.LCFI87:
 3529              		.cfi_def_cfa_register 7
 3530 0006 7860     		str	r0, [r7, #4]
2033:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2034:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3531              		.loc 1 2034 21
 3532 0008 7B68     		ldr	r3, [r7, #4]
 3533 000a 7B61     		str	r3, [r7, #20]
2035:./Drivers/FreeRTOS/queue.c **** 
2036:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3534              		.loc 1 2036 5
 3535 000c 7B69     		ldr	r3, [r7, #20]
 3536 000e 002B     		cmp	r3, #0
 3537 0010 0AD1     		bne	.L238
 3538              	.LBB208:
 3539              	.LBB209:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3540              		.loc 2 198 9
 3541              		.syntax unified
 3542              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3543 0012 4FF05003 			mov r3, #80												
 3544 0016 83F31188 		msr basepri, r3											
 3545 001a BFF36F8F 		isb														
 3546 001e BFF34F8F 		dsb														
 3547              	
 3548              	@ 0 "" 2
 3549              		.thumb
 3550              		.syntax unified
 3551 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3552              		.loc 2 206 5
 3553 0024 00BF     		nop
 3554              	.L239:
 3555              	.LBE209:
 3556              	.LBE208:
 3557              		.loc 1 2036 5 discriminator 1
 3558 0026 FEE7     		b	.L239
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 104


 3559              	.L238:
2037:./Drivers/FreeRTOS/queue.c **** 
2038:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 3560              		.loc 1 2038 5
 3561 0028 FFF7FEFF 		bl	vPortEnterCritical
2039:./Drivers/FreeRTOS/queue.c ****     {
2040:./Drivers/FreeRTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 3562              		.loc 1 2040 27
 3563 002c 7B69     		ldr	r3, [r7, #20]
 3564 002e DA6B     		ldr	r2, [r3, #60]
 3565              		.loc 1 2040 47
 3566 0030 7B69     		ldr	r3, [r7, #20]
 3567 0032 9B6B     		ldr	r3, [r3, #56]
 3568              		.loc 1 2040 18
 3569 0034 D31A     		subs	r3, r2, r3
 3570 0036 3B61     		str	r3, [r7, #16]
2041:./Drivers/FreeRTOS/queue.c ****     }
2042:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 3571              		.loc 1 2042 5
 3572 0038 FFF7FEFF 		bl	vPortExitCritical
2043:./Drivers/FreeRTOS/queue.c **** 
2044:./Drivers/FreeRTOS/queue.c ****     return uxReturn;
 3573              		.loc 1 2044 12
 3574 003c 3B69     		ldr	r3, [r7, #16]
2045:./Drivers/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3575              		.loc 1 2045 1
 3576 003e 1846     		mov	r0, r3
 3577 0040 1837     		adds	r7, r7, #24
 3578              	.LCFI88:
 3579              		.cfi_def_cfa_offset 8
 3580 0042 BD46     		mov	sp, r7
 3581              	.LCFI89:
 3582              		.cfi_def_cfa_register 13
 3583              		@ sp needed
 3584 0044 80BD     		pop	{r7, pc}
 3585              		.cfi_endproc
 3586              	.LFE22:
 3588              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3589              		.align	1
 3590              		.global	uxQueueMessagesWaitingFromISR
 3591              		.syntax unified
 3592              		.thumb
 3593              		.thumb_func
 3594              		.fpu fpv4-sp-d16
 3596              	uxQueueMessagesWaitingFromISR:
 3597              	.LFB23:
2046:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2047:./Drivers/FreeRTOS/queue.c **** 
2048:./Drivers/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2049:./Drivers/FreeRTOS/queue.c **** {
 3598              		.loc 1 2049 1
 3599              		.cfi_startproc
 3600              		@ args = 0, pretend = 0, frame = 24
 3601              		@ frame_needed = 1, uses_anonymous_args = 0
 3602              		@ link register save eliminated.
 3603 0000 80B4     		push	{r7}
 3604              	.LCFI90:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 105


 3605              		.cfi_def_cfa_offset 4
 3606              		.cfi_offset 7, -4
 3607 0002 87B0     		sub	sp, sp, #28
 3608              	.LCFI91:
 3609              		.cfi_def_cfa_offset 32
 3610 0004 00AF     		add	r7, sp, #0
 3611              	.LCFI92:
 3612              		.cfi_def_cfa_register 7
 3613 0006 7860     		str	r0, [r7, #4]
2050:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxReturn;
2051:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3614              		.loc 1 2051 21
 3615 0008 7B68     		ldr	r3, [r7, #4]
 3616 000a 7B61     		str	r3, [r7, #20]
2052:./Drivers/FreeRTOS/queue.c **** 
2053:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3617              		.loc 1 2053 5
 3618 000c 7B69     		ldr	r3, [r7, #20]
 3619 000e 002B     		cmp	r3, #0
 3620 0010 0AD1     		bne	.L242
 3621              	.LBB210:
 3622              	.LBB211:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3623              		.loc 2 198 9
 3624              		.syntax unified
 3625              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3626 0012 4FF05003 			mov r3, #80												
 3627 0016 83F31188 		msr basepri, r3											
 3628 001a BFF36F8F 		isb														
 3629 001e BFF34F8F 		dsb														
 3630              	
 3631              	@ 0 "" 2
 3632              		.thumb
 3633              		.syntax unified
 3634 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3635              		.loc 2 206 5
 3636 0024 00BF     		nop
 3637              	.L243:
 3638              	.LBE211:
 3639              	.LBE210:
 3640              		.loc 1 2053 5 discriminator 1
 3641 0026 FEE7     		b	.L243
 3642              	.L242:
2054:./Drivers/FreeRTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 3643              		.loc 1 2054 14
 3644 0028 7B69     		ldr	r3, [r7, #20]
 3645 002a 9B6B     		ldr	r3, [r3, #56]
 3646 002c 3B61     		str	r3, [r7, #16]
2055:./Drivers/FreeRTOS/queue.c **** 
2056:./Drivers/FreeRTOS/queue.c ****     return uxReturn;
 3647              		.loc 1 2056 12
 3648 002e 3B69     		ldr	r3, [r7, #16]
2057:./Drivers/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3649              		.loc 1 2057 1
 3650 0030 1846     		mov	r0, r3
 3651 0032 1C37     		adds	r7, r7, #28
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 106


 3652              	.LCFI93:
 3653              		.cfi_def_cfa_offset 4
 3654 0034 BD46     		mov	sp, r7
 3655              	.LCFI94:
 3656              		.cfi_def_cfa_register 13
 3657              		@ sp needed
 3658 0036 5DF8047B 		ldr	r7, [sp], #4
 3659              	.LCFI95:
 3660              		.cfi_restore 7
 3661              		.cfi_def_cfa_offset 0
 3662 003a 7047     		bx	lr
 3663              		.cfi_endproc
 3664              	.LFE23:
 3666              		.section	.text.vQueueDelete,"ax",%progbits
 3667              		.align	1
 3668              		.global	vQueueDelete
 3669              		.syntax unified
 3670              		.thumb
 3671              		.thumb_func
 3672              		.fpu fpv4-sp-d16
 3674              	vQueueDelete:
 3675              	.LFB24:
2058:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2059:./Drivers/FreeRTOS/queue.c **** 
2060:./Drivers/FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2061:./Drivers/FreeRTOS/queue.c **** {
 3676              		.loc 1 2061 1
 3677              		.cfi_startproc
 3678              		@ args = 0, pretend = 0, frame = 16
 3679              		@ frame_needed = 1, uses_anonymous_args = 0
 3680 0000 80B5     		push	{r7, lr}
 3681              	.LCFI96:
 3682              		.cfi_def_cfa_offset 8
 3683              		.cfi_offset 7, -8
 3684              		.cfi_offset 14, -4
 3685 0002 84B0     		sub	sp, sp, #16
 3686              	.LCFI97:
 3687              		.cfi_def_cfa_offset 24
 3688 0004 00AF     		add	r7, sp, #0
 3689              	.LCFI98:
 3690              		.cfi_def_cfa_register 7
 3691 0006 7860     		str	r0, [r7, #4]
2062:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3692              		.loc 1 2062 21
 3693 0008 7B68     		ldr	r3, [r7, #4]
 3694 000a FB60     		str	r3, [r7, #12]
2063:./Drivers/FreeRTOS/queue.c **** 
2064:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 3695              		.loc 1 2064 5
 3696 000c FB68     		ldr	r3, [r7, #12]
 3697 000e 002B     		cmp	r3, #0
 3698 0010 0AD1     		bne	.L246
 3699              	.LBB212:
 3700              	.LBB213:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 3701              		.loc 2 198 9
 3702              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 107


 3703              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 3704 0012 4FF05003 			mov r3, #80												
 3705 0016 83F31188 		msr basepri, r3											
 3706 001a BFF36F8F 		isb														
 3707 001e BFF34F8F 		dsb														
 3708              	
 3709              	@ 0 "" 2
 3710              		.thumb
 3711              		.syntax unified
 3712 0022 BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 3713              		.loc 2 206 5
 3714 0024 00BF     		nop
 3715              	.L247:
 3716              	.LBE213:
 3717              	.LBE212:
 3718              		.loc 1 2064 5 discriminator 1
 3719 0026 FEE7     		b	.L247
 3720              	.L246:
2065:./Drivers/FreeRTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2066:./Drivers/FreeRTOS/queue.c **** 
2067:./Drivers/FreeRTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2068:./Drivers/FreeRTOS/queue.c ****         {
2069:./Drivers/FreeRTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
 3721              		.loc 1 2069 13
 3722 0028 F868     		ldr	r0, [r7, #12]
 3723 002a FFF7FEFF 		bl	vQueueUnregisterQueue
2070:./Drivers/FreeRTOS/queue.c ****         }
2071:./Drivers/FreeRTOS/queue.c ****     #endif
2072:./Drivers/FreeRTOS/queue.c **** 
2073:./Drivers/FreeRTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2074:./Drivers/FreeRTOS/queue.c ****         {
2075:./Drivers/FreeRTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2076:./Drivers/FreeRTOS/queue.c ****              * again. */
2077:./Drivers/FreeRTOS/queue.c ****             vPortFree( pxQueue );
 3724              		.loc 1 2077 13
 3725 002e F868     		ldr	r0, [r7, #12]
 3726 0030 FFF7FEFF 		bl	vPortFree
2078:./Drivers/FreeRTOS/queue.c ****         }
2079:./Drivers/FreeRTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2080:./Drivers/FreeRTOS/queue.c ****         {
2081:./Drivers/FreeRTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2082:./Drivers/FreeRTOS/queue.c ****              * check before attempting to free the memory. */
2083:./Drivers/FreeRTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2084:./Drivers/FreeRTOS/queue.c ****             {
2085:./Drivers/FreeRTOS/queue.c ****                 vPortFree( pxQueue );
2086:./Drivers/FreeRTOS/queue.c ****             }
2087:./Drivers/FreeRTOS/queue.c ****             else
2088:./Drivers/FreeRTOS/queue.c ****             {
2089:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2090:./Drivers/FreeRTOS/queue.c ****             }
2091:./Drivers/FreeRTOS/queue.c ****         }
2092:./Drivers/FreeRTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2093:./Drivers/FreeRTOS/queue.c ****         {
2094:./Drivers/FreeRTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2095:./Drivers/FreeRTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2096:./Drivers/FreeRTOS/queue.c ****             ( void ) pxQueue;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 108


2097:./Drivers/FreeRTOS/queue.c ****         }
2098:./Drivers/FreeRTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2099:./Drivers/FreeRTOS/queue.c **** }
 3727              		.loc 1 2099 1
 3728 0034 00BF     		nop
 3729 0036 1037     		adds	r7, r7, #16
 3730              	.LCFI99:
 3731              		.cfi_def_cfa_offset 8
 3732 0038 BD46     		mov	sp, r7
 3733              	.LCFI100:
 3734              		.cfi_def_cfa_register 13
 3735              		@ sp needed
 3736 003a 80BD     		pop	{r7, pc}
 3737              		.cfi_endproc
 3738              	.LFE24:
 3740              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3741              		.align	1
 3742              		.global	uxQueueGetQueueNumber
 3743              		.syntax unified
 3744              		.thumb
 3745              		.thumb_func
 3746              		.fpu fpv4-sp-d16
 3748              	uxQueueGetQueueNumber:
 3749              	.LFB25:
2100:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2101:./Drivers/FreeRTOS/queue.c **** 
2102:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2103:./Drivers/FreeRTOS/queue.c **** 
2104:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2105:./Drivers/FreeRTOS/queue.c ****     {
 3750              		.loc 1 2105 5
 3751              		.cfi_startproc
 3752              		@ args = 0, pretend = 0, frame = 8
 3753              		@ frame_needed = 1, uses_anonymous_args = 0
 3754              		@ link register save eliminated.
 3755 0000 80B4     		push	{r7}
 3756              	.LCFI101:
 3757              		.cfi_def_cfa_offset 4
 3758              		.cfi_offset 7, -4
 3759 0002 83B0     		sub	sp, sp, #12
 3760              	.LCFI102:
 3761              		.cfi_def_cfa_offset 16
 3762 0004 00AF     		add	r7, sp, #0
 3763              	.LCFI103:
 3764              		.cfi_def_cfa_register 7
 3765 0006 7860     		str	r0, [r7, #4]
2106:./Drivers/FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3766              		.loc 1 2106 40
 3767 0008 7B68     		ldr	r3, [r7, #4]
 3768 000a 9B6C     		ldr	r3, [r3, #72]
2107:./Drivers/FreeRTOS/queue.c ****     }
 3769              		.loc 1 2107 5
 3770 000c 1846     		mov	r0, r3
 3771 000e 0C37     		adds	r7, r7, #12
 3772              	.LCFI104:
 3773              		.cfi_def_cfa_offset 4
 3774 0010 BD46     		mov	sp, r7
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 109


 3775              	.LCFI105:
 3776              		.cfi_def_cfa_register 13
 3777              		@ sp needed
 3778 0012 5DF8047B 		ldr	r7, [sp], #4
 3779              	.LCFI106:
 3780              		.cfi_restore 7
 3781              		.cfi_def_cfa_offset 0
 3782 0016 7047     		bx	lr
 3783              		.cfi_endproc
 3784              	.LFE25:
 3786              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3787              		.align	1
 3788              		.global	vQueueSetQueueNumber
 3789              		.syntax unified
 3790              		.thumb
 3791              		.thumb_func
 3792              		.fpu fpv4-sp-d16
 3794              	vQueueSetQueueNumber:
 3795              	.LFB26:
2108:./Drivers/FreeRTOS/queue.c **** 
2109:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2110:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2111:./Drivers/FreeRTOS/queue.c **** 
2112:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2113:./Drivers/FreeRTOS/queue.c **** 
2114:./Drivers/FreeRTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2115:./Drivers/FreeRTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2116:./Drivers/FreeRTOS/queue.c ****     {
 3796              		.loc 1 2116 5
 3797              		.cfi_startproc
 3798              		@ args = 0, pretend = 0, frame = 8
 3799              		@ frame_needed = 1, uses_anonymous_args = 0
 3800              		@ link register save eliminated.
 3801 0000 80B4     		push	{r7}
 3802              	.LCFI107:
 3803              		.cfi_def_cfa_offset 4
 3804              		.cfi_offset 7, -4
 3805 0002 83B0     		sub	sp, sp, #12
 3806              	.LCFI108:
 3807              		.cfi_def_cfa_offset 16
 3808 0004 00AF     		add	r7, sp, #0
 3809              	.LCFI109:
 3810              		.cfi_def_cfa_register 7
 3811 0006 7860     		str	r0, [r7, #4]
 3812 0008 3960     		str	r1, [r7]
2117:./Drivers/FreeRTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3813              		.loc 1 2117 49
 3814 000a 7B68     		ldr	r3, [r7, #4]
 3815 000c 3A68     		ldr	r2, [r7]
 3816 000e 9A64     		str	r2, [r3, #72]
2118:./Drivers/FreeRTOS/queue.c ****     }
 3817              		.loc 1 2118 5
 3818 0010 00BF     		nop
 3819 0012 0C37     		adds	r7, r7, #12
 3820              	.LCFI110:
 3821              		.cfi_def_cfa_offset 4
 3822 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 110


 3823              	.LCFI111:
 3824              		.cfi_def_cfa_register 13
 3825              		@ sp needed
 3826 0016 5DF8047B 		ldr	r7, [sp], #4
 3827              	.LCFI112:
 3828              		.cfi_restore 7
 3829              		.cfi_def_cfa_offset 0
 3830 001a 7047     		bx	lr
 3831              		.cfi_endproc
 3832              	.LFE26:
 3834              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3835              		.align	1
 3836              		.global	ucQueueGetQueueType
 3837              		.syntax unified
 3838              		.thumb
 3839              		.thumb_func
 3840              		.fpu fpv4-sp-d16
 3842              	ucQueueGetQueueType:
 3843              	.LFB27:
2119:./Drivers/FreeRTOS/queue.c **** 
2120:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2121:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2122:./Drivers/FreeRTOS/queue.c **** 
2123:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2124:./Drivers/FreeRTOS/queue.c **** 
2125:./Drivers/FreeRTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2126:./Drivers/FreeRTOS/queue.c ****     {
 3844              		.loc 1 2126 5
 3845              		.cfi_startproc
 3846              		@ args = 0, pretend = 0, frame = 8
 3847              		@ frame_needed = 1, uses_anonymous_args = 0
 3848              		@ link register save eliminated.
 3849 0000 80B4     		push	{r7}
 3850              	.LCFI113:
 3851              		.cfi_def_cfa_offset 4
 3852              		.cfi_offset 7, -4
 3853 0002 83B0     		sub	sp, sp, #12
 3854              	.LCFI114:
 3855              		.cfi_def_cfa_offset 16
 3856 0004 00AF     		add	r7, sp, #0
 3857              	.LCFI115:
 3858              		.cfi_def_cfa_register 7
 3859 0006 7860     		str	r0, [r7, #4]
2127:./Drivers/FreeRTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 3860              		.loc 1 2127 40
 3861 0008 7B68     		ldr	r3, [r7, #4]
 3862 000a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
2128:./Drivers/FreeRTOS/queue.c ****     }
 3863              		.loc 1 2128 5
 3864 000e 1846     		mov	r0, r3
 3865 0010 0C37     		adds	r7, r7, #12
 3866              	.LCFI116:
 3867              		.cfi_def_cfa_offset 4
 3868 0012 BD46     		mov	sp, r7
 3869              	.LCFI117:
 3870              		.cfi_def_cfa_register 13
 3871              		@ sp needed
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 111


 3872 0014 5DF8047B 		ldr	r7, [sp], #4
 3873              	.LCFI118:
 3874              		.cfi_restore 7
 3875              		.cfi_def_cfa_offset 0
 3876 0018 7047     		bx	lr
 3877              		.cfi_endproc
 3878              	.LFE27:
 3880              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 3881              		.align	1
 3882              		.syntax unified
 3883              		.thumb
 3884              		.thumb_func
 3885              		.fpu fpv4-sp-d16
 3887              	prvGetDisinheritPriorityAfterTimeout:
 3888              	.LFB28:
2129:./Drivers/FreeRTOS/queue.c **** 
2130:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2131:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2132:./Drivers/FreeRTOS/queue.c **** 
2133:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2134:./Drivers/FreeRTOS/queue.c **** 
2135:./Drivers/FreeRTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2136:./Drivers/FreeRTOS/queue.c ****     {
 3889              		.loc 1 2136 5
 3890              		.cfi_startproc
 3891              		@ args = 0, pretend = 0, frame = 16
 3892              		@ frame_needed = 1, uses_anonymous_args = 0
 3893              		@ link register save eliminated.
 3894 0000 80B4     		push	{r7}
 3895              	.LCFI119:
 3896              		.cfi_def_cfa_offset 4
 3897              		.cfi_offset 7, -4
 3898 0002 85B0     		sub	sp, sp, #20
 3899              	.LCFI120:
 3900              		.cfi_def_cfa_offset 24
 3901 0004 00AF     		add	r7, sp, #0
 3902              	.LCFI121:
 3903              		.cfi_def_cfa_register 7
 3904 0006 7860     		str	r0, [r7, #4]
2137:./Drivers/FreeRTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2138:./Drivers/FreeRTOS/queue.c **** 
2139:./Drivers/FreeRTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2140:./Drivers/FreeRTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2141:./Drivers/FreeRTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2142:./Drivers/FreeRTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2143:./Drivers/FreeRTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2144:./Drivers/FreeRTOS/queue.c ****          * mutex. */
2145:./Drivers/FreeRTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 3905              		.loc 1 2145 13
 3906 0008 7B68     		ldr	r3, [r7, #4]
 3907 000a 5B6A     		ldr	r3, [r3, #36]
 3908              		.loc 1 2145 11
 3909 000c 002B     		cmp	r3, #0
 3910 000e 06D0     		beq	.L254
2146:./Drivers/FreeRTOS/queue.c ****         {
2147:./Drivers/FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
 3911              		.loc 1 2147 102
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 112


 3912 0010 7B68     		ldr	r3, [r7, #4]
 3913 0012 1B6B     		ldr	r3, [r3, #48]
 3914 0014 1B68     		ldr	r3, [r3]
 3915              		.loc 1 2147 45
 3916 0016 C3F10503 		rsb	r3, r3, #5
 3917 001a FB60     		str	r3, [r7, #12]
 3918 001c 01E0     		b	.L255
 3919              	.L254:
2148:./Drivers/FreeRTOS/queue.c ****         }
2149:./Drivers/FreeRTOS/queue.c ****         else
2150:./Drivers/FreeRTOS/queue.c ****         {
2151:./Drivers/FreeRTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 3920              		.loc 1 2151 45
 3921 001e 0023     		movs	r3, #0
 3922 0020 FB60     		str	r3, [r7, #12]
 3923              	.L255:
2152:./Drivers/FreeRTOS/queue.c ****         }
2153:./Drivers/FreeRTOS/queue.c **** 
2154:./Drivers/FreeRTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
 3924              		.loc 1 2154 16
 3925 0022 FB68     		ldr	r3, [r7, #12]
2155:./Drivers/FreeRTOS/queue.c ****     }
 3926              		.loc 1 2155 5
 3927 0024 1846     		mov	r0, r3
 3928 0026 1437     		adds	r7, r7, #20
 3929              	.LCFI122:
 3930              		.cfi_def_cfa_offset 4
 3931 0028 BD46     		mov	sp, r7
 3932              	.LCFI123:
 3933              		.cfi_def_cfa_register 13
 3934              		@ sp needed
 3935 002a 5DF8047B 		ldr	r7, [sp], #4
 3936              	.LCFI124:
 3937              		.cfi_restore 7
 3938              		.cfi_def_cfa_offset 0
 3939 002e 7047     		bx	lr
 3940              		.cfi_endproc
 3941              	.LFE28:
 3943              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 3944              		.align	1
 3945              		.syntax unified
 3946              		.thumb
 3947              		.thumb_func
 3948              		.fpu fpv4-sp-d16
 3950              	prvCopyDataToQueue:
 3951              	.LFB29:
2156:./Drivers/FreeRTOS/queue.c **** 
2157:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2158:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2159:./Drivers/FreeRTOS/queue.c **** 
2160:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2161:./Drivers/FreeRTOS/queue.c ****                                       const void * pvItemToQueue,
2162:./Drivers/FreeRTOS/queue.c ****                                       const BaseType_t xPosition )
2163:./Drivers/FreeRTOS/queue.c **** {
 3952              		.loc 1 2163 1
 3953              		.cfi_startproc
 3954              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 113


 3955              		@ frame_needed = 1, uses_anonymous_args = 0
 3956 0000 80B5     		push	{r7, lr}
 3957              	.LCFI125:
 3958              		.cfi_def_cfa_offset 8
 3959              		.cfi_offset 7, -8
 3960              		.cfi_offset 14, -4
 3961 0002 86B0     		sub	sp, sp, #24
 3962              	.LCFI126:
 3963              		.cfi_def_cfa_offset 32
 3964 0004 00AF     		add	r7, sp, #0
 3965              	.LCFI127:
 3966              		.cfi_def_cfa_register 7
 3967 0006 F860     		str	r0, [r7, #12]
 3968 0008 B960     		str	r1, [r7, #8]
 3969 000a 7A60     		str	r2, [r7, #4]
2164:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 3970              		.loc 1 2164 16
 3971 000c 0023     		movs	r3, #0
 3972 000e 7B61     		str	r3, [r7, #20]
2165:./Drivers/FreeRTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2166:./Drivers/FreeRTOS/queue.c **** 
2167:./Drivers/FreeRTOS/queue.c ****     /* This function is called from a critical section. */
2168:./Drivers/FreeRTOS/queue.c **** 
2169:./Drivers/FreeRTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3973              		.loc 1 2169 23
 3974 0010 FB68     		ldr	r3, [r7, #12]
 3975 0012 9B6B     		ldr	r3, [r3, #56]
 3976 0014 3B61     		str	r3, [r7, #16]
2170:./Drivers/FreeRTOS/queue.c **** 
2171:./Drivers/FreeRTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3977              		.loc 1 2171 16
 3978 0016 FB68     		ldr	r3, [r7, #12]
 3979 0018 1B6C     		ldr	r3, [r3, #64]
 3980              		.loc 1 2171 7
 3981 001a 002B     		cmp	r3, #0
 3982 001c 0DD1     		bne	.L258
2172:./Drivers/FreeRTOS/queue.c ****     {
2173:./Drivers/FreeRTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2174:./Drivers/FreeRTOS/queue.c ****             {
2175:./Drivers/FreeRTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3983              		.loc 1 2175 28
 3984 001e FB68     		ldr	r3, [r7, #12]
 3985 0020 1B68     		ldr	r3, [r3]
 3986              		.loc 1 2175 19
 3987 0022 002B     		cmp	r3, #0
 3988 0024 4DD1     		bne	.L259
2176:./Drivers/FreeRTOS/queue.c ****                 {
2177:./Drivers/FreeRTOS/queue.c ****                     /* The mutex is no longer being held. */
2178:./Drivers/FreeRTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 3989              		.loc 1 2178 31
 3990 0026 FB68     		ldr	r3, [r7, #12]
 3991 0028 9B68     		ldr	r3, [r3, #8]
 3992 002a 1846     		mov	r0, r3
 3993 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 3994 0030 7861     		str	r0, [r7, #20]
2179:./Drivers/FreeRTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 3995              		.loc 1 2179 56
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 114


 3996 0032 FB68     		ldr	r3, [r7, #12]
 3997 0034 0022     		movs	r2, #0
 3998 0036 9A60     		str	r2, [r3, #8]
 3999 0038 43E0     		b	.L259
 4000              	.L258:
2180:./Drivers/FreeRTOS/queue.c ****                 }
2181:./Drivers/FreeRTOS/queue.c ****                 else
2182:./Drivers/FreeRTOS/queue.c ****                 {
2183:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2184:./Drivers/FreeRTOS/queue.c ****                 }
2185:./Drivers/FreeRTOS/queue.c ****             }
2186:./Drivers/FreeRTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2187:./Drivers/FreeRTOS/queue.c ****     }
2188:./Drivers/FreeRTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
 4001              		.loc 1 2188 12
 4002 003a 7B68     		ldr	r3, [r7, #4]
 4003 003c 002B     		cmp	r3, #0
 4004 003e 19D1     		bne	.L260
2189:./Drivers/FreeRTOS/queue.c ****     {
2190:./Drivers/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
 4005              		.loc 1 2190 44
 4006 0040 FB68     		ldr	r3, [r7, #12]
 4007 0042 5868     		ldr	r0, [r3, #4]
 4008              		.loc 1 2190 90
 4009 0044 FB68     		ldr	r3, [r7, #12]
 4010 0046 1B6C     		ldr	r3, [r3, #64]
 4011              		.loc 1 2190 18
 4012 0048 1A46     		mov	r2, r3
 4013 004a B968     		ldr	r1, [r7, #8]
 4014 004c FFF7FEFF 		bl	memcpy
2191:./Drivers/FreeRTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 4015              		.loc 1 2191 28
 4016 0050 FB68     		ldr	r3, [r7, #12]
 4017 0052 5A68     		ldr	r2, [r3, #4]
 4018              		.loc 1 2191 38
 4019 0054 FB68     		ldr	r3, [r7, #12]
 4020 0056 1B6C     		ldr	r3, [r3, #64]
 4021              		.loc 1 2191 28
 4022 0058 1A44     		add	r2, r2, r3
 4023 005a FB68     		ldr	r3, [r7, #12]
 4024 005c 5A60     		str	r2, [r3, #4]
2192:./Drivers/FreeRTOS/queue.c **** 
2193:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
 4025              		.loc 1 2193 20
 4026 005e FB68     		ldr	r3, [r7, #12]
 4027 0060 5A68     		ldr	r2, [r3, #4]
 4028              		.loc 1 2193 52
 4029 0062 FB68     		ldr	r3, [r7, #12]
 4030 0064 9B68     		ldr	r3, [r3, #8]
 4031              		.loc 1 2193 11
 4032 0066 9A42     		cmp	r2, r3
 4033 0068 2BD3     		bcc	.L259
2194:./Drivers/FreeRTOS/queue.c ****         {
2195:./Drivers/FreeRTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 4034              		.loc 1 2195 41
 4035 006a FB68     		ldr	r3, [r7, #12]
 4036 006c 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 115


 4037              		.loc 1 2195 32
 4038 006e FB68     		ldr	r3, [r7, #12]
 4039 0070 5A60     		str	r2, [r3, #4]
 4040 0072 26E0     		b	.L259
 4041              	.L260:
2196:./Drivers/FreeRTOS/queue.c ****         }
2197:./Drivers/FreeRTOS/queue.c ****         else
2198:./Drivers/FreeRTOS/queue.c ****         {
2199:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:./Drivers/FreeRTOS/queue.c ****         }
2201:./Drivers/FreeRTOS/queue.c ****     }
2202:./Drivers/FreeRTOS/queue.c ****     else
2203:./Drivers/FreeRTOS/queue.c ****     {
2204:./Drivers/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
 4042              		.loc 1 2204 54
 4043 0074 FB68     		ldr	r3, [r7, #12]
 4044 0076 D868     		ldr	r0, [r3, #12]
 4045              		.loc 1 2204 100
 4046 0078 FB68     		ldr	r3, [r7, #12]
 4047 007a 1B6C     		ldr	r3, [r3, #64]
 4048              		.loc 1 2204 18
 4049 007c 1A46     		mov	r2, r3
 4050 007e B968     		ldr	r1, [r7, #8]
 4051 0080 FFF7FEFF 		bl	memcpy
2205:./Drivers/FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 4052              		.loc 1 2205 38
 4053 0084 FB68     		ldr	r3, [r7, #12]
 4054 0086 DA68     		ldr	r2, [r3, #12]
 4055              		.loc 1 2205 48
 4056 0088 FB68     		ldr	r3, [r7, #12]
 4057 008a 1B6C     		ldr	r3, [r3, #64]
 4058              		.loc 1 2205 38
 4059 008c 5B42     		rsbs	r3, r3, #0
 4060 008e 1A44     		add	r2, r2, r3
 4061 0090 FB68     		ldr	r3, [r7, #12]
 4062 0092 DA60     		str	r2, [r3, #12]
2206:./Drivers/FreeRTOS/queue.c **** 
2207:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
 4063              		.loc 1 2207 30
 4064 0094 FB68     		ldr	r3, [r7, #12]
 4065 0096 DA68     		ldr	r2, [r3, #12]
 4066              		.loc 1 2207 51
 4067 0098 FB68     		ldr	r3, [r7, #12]
 4068 009a 1B68     		ldr	r3, [r3]
 4069              		.loc 1 2207 11
 4070 009c 9A42     		cmp	r2, r3
 4071 009e 07D2     		bcs	.L261
2208:./Drivers/FreeRTOS/queue.c ****         {
2209:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 4072              		.loc 1 2209 63
 4073 00a0 FB68     		ldr	r3, [r7, #12]
 4074 00a2 9A68     		ldr	r2, [r3, #8]
 4075              		.loc 1 2209 80
 4076 00a4 FB68     		ldr	r3, [r7, #12]
 4077 00a6 1B6C     		ldr	r3, [r3, #64]
 4078              		.loc 1 2209 71
 4079 00a8 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 116


 4080 00aa 1A44     		add	r2, r2, r3
 4081              		.loc 1 2209 42
 4082 00ac FB68     		ldr	r3, [r7, #12]
 4083 00ae DA60     		str	r2, [r3, #12]
 4084              	.L261:
2210:./Drivers/FreeRTOS/queue.c ****         }
2211:./Drivers/FreeRTOS/queue.c ****         else
2212:./Drivers/FreeRTOS/queue.c ****         {
2213:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2214:./Drivers/FreeRTOS/queue.c ****         }
2215:./Drivers/FreeRTOS/queue.c **** 
2216:./Drivers/FreeRTOS/queue.c ****         if( xPosition == queueOVERWRITE )
 4085              		.loc 1 2216 11
 4086 00b0 7B68     		ldr	r3, [r7, #4]
 4087 00b2 022B     		cmp	r3, #2
 4088 00b4 05D1     		bne	.L259
2217:./Drivers/FreeRTOS/queue.c ****         {
2218:./Drivers/FreeRTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 4089              		.loc 1 2218 15
 4090 00b6 3B69     		ldr	r3, [r7, #16]
 4091 00b8 002B     		cmp	r3, #0
 4092 00ba 02D0     		beq	.L259
2219:./Drivers/FreeRTOS/queue.c ****             {
2220:./Drivers/FreeRTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2221:./Drivers/FreeRTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2222:./Drivers/FreeRTOS/queue.c ****                  * one is added again below the number of recorded items remains
2223:./Drivers/FreeRTOS/queue.c ****                  * correct. */
2224:./Drivers/FreeRTOS/queue.c ****                 --uxMessagesWaiting;
 4093              		.loc 1 2224 17
 4094 00bc 3B69     		ldr	r3, [r7, #16]
 4095 00be 013B     		subs	r3, r3, #1
 4096 00c0 3B61     		str	r3, [r7, #16]
 4097              	.L259:
2225:./Drivers/FreeRTOS/queue.c ****             }
2226:./Drivers/FreeRTOS/queue.c ****             else
2227:./Drivers/FreeRTOS/queue.c ****             {
2228:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2229:./Drivers/FreeRTOS/queue.c ****             }
2230:./Drivers/FreeRTOS/queue.c ****         }
2231:./Drivers/FreeRTOS/queue.c ****         else
2232:./Drivers/FreeRTOS/queue.c ****         {
2233:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2234:./Drivers/FreeRTOS/queue.c ****         }
2235:./Drivers/FreeRTOS/queue.c ****     }
2236:./Drivers/FreeRTOS/queue.c **** 
2237:./Drivers/FreeRTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 4098              		.loc 1 2237 52
 4099 00c2 3B69     		ldr	r3, [r7, #16]
 4100 00c4 5A1C     		adds	r2, r3, #1
 4101              		.loc 1 2237 32
 4102 00c6 FB68     		ldr	r3, [r7, #12]
 4103 00c8 9A63     		str	r2, [r3, #56]
2238:./Drivers/FreeRTOS/queue.c **** 
2239:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 4104              		.loc 1 2239 12
 4105 00ca 7B69     		ldr	r3, [r7, #20]
2240:./Drivers/FreeRTOS/queue.c **** }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 117


 4106              		.loc 1 2240 1
 4107 00cc 1846     		mov	r0, r3
 4108 00ce 1837     		adds	r7, r7, #24
 4109              	.LCFI128:
 4110              		.cfi_def_cfa_offset 8
 4111 00d0 BD46     		mov	sp, r7
 4112              	.LCFI129:
 4113              		.cfi_def_cfa_register 13
 4114              		@ sp needed
 4115 00d2 80BD     		pop	{r7, pc}
 4116              		.cfi_endproc
 4117              	.LFE29:
 4119              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 4120              		.align	1
 4121              		.syntax unified
 4122              		.thumb
 4123              		.thumb_func
 4124              		.fpu fpv4-sp-d16
 4126              	prvCopyDataFromQueue:
 4127              	.LFB30:
2241:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2242:./Drivers/FreeRTOS/queue.c **** 
2243:./Drivers/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2244:./Drivers/FreeRTOS/queue.c ****                                   void * const pvBuffer )
2245:./Drivers/FreeRTOS/queue.c **** {
 4128              		.loc 1 2245 1
 4129              		.cfi_startproc
 4130              		@ args = 0, pretend = 0, frame = 8
 4131              		@ frame_needed = 1, uses_anonymous_args = 0
 4132 0000 80B5     		push	{r7, lr}
 4133              	.LCFI130:
 4134              		.cfi_def_cfa_offset 8
 4135              		.cfi_offset 7, -8
 4136              		.cfi_offset 14, -4
 4137 0002 82B0     		sub	sp, sp, #8
 4138              	.LCFI131:
 4139              		.cfi_def_cfa_offset 16
 4140 0004 00AF     		add	r7, sp, #0
 4141              	.LCFI132:
 4142              		.cfi_def_cfa_register 7
 4143 0006 7860     		str	r0, [r7, #4]
 4144 0008 3960     		str	r1, [r7]
2246:./Drivers/FreeRTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 4145              		.loc 1 2246 16
 4146 000a 7B68     		ldr	r3, [r7, #4]
 4147 000c 1B6C     		ldr	r3, [r3, #64]
 4148              		.loc 1 2246 7
 4149 000e 002B     		cmp	r3, #0
 4150 0010 18D0     		beq	.L266
2247:./Drivers/FreeRTOS/queue.c ****     {
2248:./Drivers/FreeRTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
 4151              		.loc 1 2248 38
 4152 0012 7B68     		ldr	r3, [r7, #4]
 4153 0014 DA68     		ldr	r2, [r3, #12]
 4154              		.loc 1 2248 48
 4155 0016 7B68     		ldr	r3, [r7, #4]
 4156 0018 1B6C     		ldr	r3, [r3, #64]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 118


 4157              		.loc 1 2248 38
 4158 001a 1A44     		add	r2, r2, r3
 4159 001c 7B68     		ldr	r3, [r7, #4]
 4160 001e DA60     		str	r2, [r3, #12]
2249:./Drivers/FreeRTOS/queue.c **** 
2250:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
 4161              		.loc 1 2250 30
 4162 0020 7B68     		ldr	r3, [r7, #4]
 4163 0022 DA68     		ldr	r2, [r3, #12]
 4164              		.loc 1 2250 62
 4165 0024 7B68     		ldr	r3, [r7, #4]
 4166 0026 9B68     		ldr	r3, [r3, #8]
 4167              		.loc 1 2250 11
 4168 0028 9A42     		cmp	r2, r3
 4169 002a 03D3     		bcc	.L265
2251:./Drivers/FreeRTOS/queue.c ****         {
2252:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 4170              		.loc 1 2252 51
 4171 002c 7B68     		ldr	r3, [r7, #4]
 4172 002e 1A68     		ldr	r2, [r3]
 4173              		.loc 1 2252 42
 4174 0030 7B68     		ldr	r3, [r7, #4]
 4175 0032 DA60     		str	r2, [r3, #12]
 4176              	.L265:
2253:./Drivers/FreeRTOS/queue.c ****         }
2254:./Drivers/FreeRTOS/queue.c ****         else
2255:./Drivers/FreeRTOS/queue.c ****         {
2256:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2257:./Drivers/FreeRTOS/queue.c ****         }
2258:./Drivers/FreeRTOS/queue.c **** 
2259:./Drivers/FreeRTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
 4177              		.loc 1 2259 75
 4178 0034 7B68     		ldr	r3, [r7, #4]
 4179 0036 D968     		ldr	r1, [r3, #12]
 4180              		.loc 1 2259 106
 4181 0038 7B68     		ldr	r3, [r7, #4]
 4182 003a 1B6C     		ldr	r3, [r3, #64]
 4183              		.loc 1 2259 18
 4184 003c 1A46     		mov	r2, r3
 4185 003e 3868     		ldr	r0, [r7]
 4186 0040 FFF7FEFF 		bl	memcpy
 4187              	.L266:
2260:./Drivers/FreeRTOS/queue.c ****     }
2261:./Drivers/FreeRTOS/queue.c **** }
 4188              		.loc 1 2261 1
 4189 0044 00BF     		nop
 4190 0046 0837     		adds	r7, r7, #8
 4191              	.LCFI133:
 4192              		.cfi_def_cfa_offset 8
 4193 0048 BD46     		mov	sp, r7
 4194              	.LCFI134:
 4195              		.cfi_def_cfa_register 13
 4196              		@ sp needed
 4197 004a 80BD     		pop	{r7, pc}
 4198              		.cfi_endproc
 4199              	.LFE30:
 4201              		.section	.text.prvUnlockQueue,"ax",%progbits
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 119


 4202              		.align	1
 4203              		.syntax unified
 4204              		.thumb
 4205              		.thumb_func
 4206              		.fpu fpv4-sp-d16
 4208              	prvUnlockQueue:
 4209              	.LFB31:
2262:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2263:./Drivers/FreeRTOS/queue.c **** 
2264:./Drivers/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2265:./Drivers/FreeRTOS/queue.c **** {
 4210              		.loc 1 2265 1
 4211              		.cfi_startproc
 4212              		@ args = 0, pretend = 0, frame = 16
 4213              		@ frame_needed = 1, uses_anonymous_args = 0
 4214 0000 80B5     		push	{r7, lr}
 4215              	.LCFI135:
 4216              		.cfi_def_cfa_offset 8
 4217              		.cfi_offset 7, -8
 4218              		.cfi_offset 14, -4
 4219 0002 84B0     		sub	sp, sp, #16
 4220              	.LCFI136:
 4221              		.cfi_def_cfa_offset 24
 4222 0004 00AF     		add	r7, sp, #0
 4223              	.LCFI137:
 4224              		.cfi_def_cfa_register 7
 4225 0006 7860     		str	r0, [r7, #4]
2266:./Drivers/FreeRTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2267:./Drivers/FreeRTOS/queue.c **** 
2268:./Drivers/FreeRTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2269:./Drivers/FreeRTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2270:./Drivers/FreeRTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2271:./Drivers/FreeRTOS/queue.c ****      * updated. */
2272:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4226              		.loc 1 2272 5
 4227 0008 FFF7FEFF 		bl	vPortEnterCritical
 4228              	.LBB214:
2273:./Drivers/FreeRTOS/queue.c ****     {
2274:./Drivers/FreeRTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
 4229              		.loc 1 2274 16
 4230 000c 7B68     		ldr	r3, [r7, #4]
 4231 000e 93F84530 		ldrb	r3, [r3, #69]
 4232 0012 FB73     		strb	r3, [r7, #15]
2275:./Drivers/FreeRTOS/queue.c **** 
2276:./Drivers/FreeRTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2277:./Drivers/FreeRTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
 4233              		.loc 1 2277 14
 4234 0014 11E0     		b	.L268
 4235              	.L272:
2278:./Drivers/FreeRTOS/queue.c ****         {
2279:./Drivers/FreeRTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2280:./Drivers/FreeRTOS/queue.c ****              * blocked waiting for data to become available? */
2281:./Drivers/FreeRTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2282:./Drivers/FreeRTOS/queue.c ****                 {
2283:./Drivers/FreeRTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
2284:./Drivers/FreeRTOS/queue.c ****                     {
2285:./Drivers/FreeRTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 120


2286:./Drivers/FreeRTOS/queue.c ****                         {
2287:./Drivers/FreeRTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
2288:./Drivers/FreeRTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2289:./Drivers/FreeRTOS/queue.c ****                              * A context switch is required. */
2290:./Drivers/FreeRTOS/queue.c ****                             vTaskMissedYield();
2291:./Drivers/FreeRTOS/queue.c ****                         }
2292:./Drivers/FreeRTOS/queue.c ****                         else
2293:./Drivers/FreeRTOS/queue.c ****                         {
2294:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2295:./Drivers/FreeRTOS/queue.c ****                         }
2296:./Drivers/FreeRTOS/queue.c ****                     }
2297:./Drivers/FreeRTOS/queue.c ****                     else
2298:./Drivers/FreeRTOS/queue.c ****                     {
2299:./Drivers/FreeRTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2300:./Drivers/FreeRTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2301:./Drivers/FreeRTOS/queue.c ****                          * suspended. */
2302:./Drivers/FreeRTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2303:./Drivers/FreeRTOS/queue.c ****                         {
2304:./Drivers/FreeRTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2305:./Drivers/FreeRTOS/queue.c ****                             {
2306:./Drivers/FreeRTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2307:./Drivers/FreeRTOS/queue.c ****                                  * context switch is required. */
2308:./Drivers/FreeRTOS/queue.c ****                                 vTaskMissedYield();
2309:./Drivers/FreeRTOS/queue.c ****                             }
2310:./Drivers/FreeRTOS/queue.c ****                             else
2311:./Drivers/FreeRTOS/queue.c ****                             {
2312:./Drivers/FreeRTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2313:./Drivers/FreeRTOS/queue.c ****                             }
2314:./Drivers/FreeRTOS/queue.c ****                         }
2315:./Drivers/FreeRTOS/queue.c ****                         else
2316:./Drivers/FreeRTOS/queue.c ****                         {
2317:./Drivers/FreeRTOS/queue.c ****                             break;
2318:./Drivers/FreeRTOS/queue.c ****                         }
2319:./Drivers/FreeRTOS/queue.c ****                     }
2320:./Drivers/FreeRTOS/queue.c ****                 }
2321:./Drivers/FreeRTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2322:./Drivers/FreeRTOS/queue.c ****                 {
2323:./Drivers/FreeRTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2324:./Drivers/FreeRTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2325:./Drivers/FreeRTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 4236              		.loc 1 2325 25
 4237 0016 7B68     		ldr	r3, [r7, #4]
 4238 0018 5B6A     		ldr	r3, [r3, #36]
 4239              		.loc 1 2325 23
 4240 001a 002B     		cmp	r3, #0
 4241 001c 12D0     		beq	.L278
2326:./Drivers/FreeRTOS/queue.c ****                     {
2327:./Drivers/FreeRTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 4242              		.loc 1 2327 55
 4243 001e 7B68     		ldr	r3, [r7, #4]
 4244 0020 2433     		adds	r3, r3, #36
 4245              		.loc 1 2327 29
 4246 0022 1846     		mov	r0, r3
 4247 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 4248 0028 0346     		mov	r3, r0
 4249              		.loc 1 2327 27
 4250 002a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 121


 4251 002c 01D0     		beq	.L270
2328:./Drivers/FreeRTOS/queue.c ****                         {
2329:./Drivers/FreeRTOS/queue.c ****                             /* The task waiting has a higher priority so record that
2330:./Drivers/FreeRTOS/queue.c ****                              * a context switch is required. */
2331:./Drivers/FreeRTOS/queue.c ****                             vTaskMissedYield();
 4252              		.loc 1 2331 29
 4253 002e FFF7FEFF 		bl	vTaskMissedYield
 4254              	.L270:
2332:./Drivers/FreeRTOS/queue.c ****                         }
2333:./Drivers/FreeRTOS/queue.c ****                         else
2334:./Drivers/FreeRTOS/queue.c ****                         {
2335:./Drivers/FreeRTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2336:./Drivers/FreeRTOS/queue.c ****                         }
2337:./Drivers/FreeRTOS/queue.c ****                     }
2338:./Drivers/FreeRTOS/queue.c ****                     else
2339:./Drivers/FreeRTOS/queue.c ****                     {
2340:./Drivers/FreeRTOS/queue.c ****                         break;
2341:./Drivers/FreeRTOS/queue.c ****                     }
2342:./Drivers/FreeRTOS/queue.c ****                 }
2343:./Drivers/FreeRTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2344:./Drivers/FreeRTOS/queue.c **** 
2345:./Drivers/FreeRTOS/queue.c ****             --cTxLock;
 4255              		.loc 1 2345 13
 4256 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4257 0034 013B     		subs	r3, r3, #1
 4258 0036 DBB2     		uxtb	r3, r3
 4259 0038 FB73     		strb	r3, [r7, #15]
 4260              	.L268:
2277:./Drivers/FreeRTOS/queue.c ****         {
 4261              		.loc 1 2277 14
 4262 003a 97F90F30 		ldrsb	r3, [r7, #15]
 4263 003e 002B     		cmp	r3, #0
 4264 0040 E9DC     		bgt	.L272
 4265 0042 00E0     		b	.L271
 4266              	.L278:
2340:./Drivers/FreeRTOS/queue.c ****                     }
 4267              		.loc 1 2340 25
 4268 0044 00BF     		nop
 4269              	.L271:
2346:./Drivers/FreeRTOS/queue.c ****         }
2347:./Drivers/FreeRTOS/queue.c **** 
2348:./Drivers/FreeRTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 4270              		.loc 1 2348 26
 4271 0046 7B68     		ldr	r3, [r7, #4]
 4272 0048 FF22     		movs	r2, #255
 4273 004a 83F84520 		strb	r2, [r3, #69]
 4274              	.LBE214:
2349:./Drivers/FreeRTOS/queue.c ****     }
2350:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4275              		.loc 1 2350 5
 4276 004e FFF7FEFF 		bl	vPortExitCritical
2351:./Drivers/FreeRTOS/queue.c **** 
2352:./Drivers/FreeRTOS/queue.c ****     /* Do the same for the Rx lock. */
2353:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4277              		.loc 1 2353 5
 4278 0052 FFF7FEFF 		bl	vPortEnterCritical
 4279              	.LBB215:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 122


2354:./Drivers/FreeRTOS/queue.c ****     {
2355:./Drivers/FreeRTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
 4280              		.loc 1 2355 16
 4281 0056 7B68     		ldr	r3, [r7, #4]
 4282 0058 93F84430 		ldrb	r3, [r3, #68]
 4283 005c BB73     		strb	r3, [r7, #14]
2356:./Drivers/FreeRTOS/queue.c **** 
2357:./Drivers/FreeRTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
 4284              		.loc 1 2357 14
 4285 005e 11E0     		b	.L273
 4286              	.L277:
2358:./Drivers/FreeRTOS/queue.c ****         {
2359:./Drivers/FreeRTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4287              		.loc 1 2359 17
 4288 0060 7B68     		ldr	r3, [r7, #4]
 4289 0062 1B69     		ldr	r3, [r3, #16]
 4290              		.loc 1 2359 15
 4291 0064 002B     		cmp	r3, #0
 4292 0066 12D0     		beq	.L279
2360:./Drivers/FreeRTOS/queue.c ****             {
2361:./Drivers/FreeRTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4293              		.loc 1 2361 47
 4294 0068 7B68     		ldr	r3, [r7, #4]
 4295 006a 1033     		adds	r3, r3, #16
 4296              		.loc 1 2361 21
 4297 006c 1846     		mov	r0, r3
 4298 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 4299 0072 0346     		mov	r3, r0
 4300              		.loc 1 2361 19
 4301 0074 002B     		cmp	r3, #0
 4302 0076 01D0     		beq	.L275
2362:./Drivers/FreeRTOS/queue.c ****                 {
2363:./Drivers/FreeRTOS/queue.c ****                     vTaskMissedYield();
 4303              		.loc 1 2363 21
 4304 0078 FFF7FEFF 		bl	vTaskMissedYield
 4305              	.L275:
2364:./Drivers/FreeRTOS/queue.c ****                 }
2365:./Drivers/FreeRTOS/queue.c ****                 else
2366:./Drivers/FreeRTOS/queue.c ****                 {
2367:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2368:./Drivers/FreeRTOS/queue.c ****                 }
2369:./Drivers/FreeRTOS/queue.c **** 
2370:./Drivers/FreeRTOS/queue.c ****                 --cRxLock;
 4306              		.loc 1 2370 17
 4307 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 4308 007e 013B     		subs	r3, r3, #1
 4309 0080 DBB2     		uxtb	r3, r3
 4310 0082 BB73     		strb	r3, [r7, #14]
 4311              	.L273:
2357:./Drivers/FreeRTOS/queue.c ****         {
 4312              		.loc 1 2357 14
 4313 0084 97F90E30 		ldrsb	r3, [r7, #14]
 4314 0088 002B     		cmp	r3, #0
 4315 008a E9DC     		bgt	.L277
 4316 008c 00E0     		b	.L276
 4317              	.L279:
2371:./Drivers/FreeRTOS/queue.c ****             }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 123


2372:./Drivers/FreeRTOS/queue.c ****             else
2373:./Drivers/FreeRTOS/queue.c ****             {
2374:./Drivers/FreeRTOS/queue.c ****                 break;
 4318              		.loc 1 2374 17
 4319 008e 00BF     		nop
 4320              	.L276:
2375:./Drivers/FreeRTOS/queue.c ****             }
2376:./Drivers/FreeRTOS/queue.c ****         }
2377:./Drivers/FreeRTOS/queue.c **** 
2378:./Drivers/FreeRTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 4321              		.loc 1 2378 26
 4322 0090 7B68     		ldr	r3, [r7, #4]
 4323 0092 FF22     		movs	r2, #255
 4324 0094 83F84420 		strb	r2, [r3, #68]
 4325              	.LBE215:
2379:./Drivers/FreeRTOS/queue.c ****     }
2380:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4326              		.loc 1 2380 5
 4327 0098 FFF7FEFF 		bl	vPortExitCritical
2381:./Drivers/FreeRTOS/queue.c **** }
 4328              		.loc 1 2381 1
 4329 009c 00BF     		nop
 4330 009e 1037     		adds	r7, r7, #16
 4331              	.LCFI138:
 4332              		.cfi_def_cfa_offset 8
 4333 00a0 BD46     		mov	sp, r7
 4334              	.LCFI139:
 4335              		.cfi_def_cfa_register 13
 4336              		@ sp needed
 4337 00a2 80BD     		pop	{r7, pc}
 4338              		.cfi_endproc
 4339              	.LFE31:
 4341              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 4342              		.align	1
 4343              		.syntax unified
 4344              		.thumb
 4345              		.thumb_func
 4346              		.fpu fpv4-sp-d16
 4348              	prvIsQueueEmpty:
 4349              	.LFB32:
2382:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2383:./Drivers/FreeRTOS/queue.c **** 
2384:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2385:./Drivers/FreeRTOS/queue.c **** {
 4350              		.loc 1 2385 1
 4351              		.cfi_startproc
 4352              		@ args = 0, pretend = 0, frame = 16
 4353              		@ frame_needed = 1, uses_anonymous_args = 0
 4354 0000 80B5     		push	{r7, lr}
 4355              	.LCFI140:
 4356              		.cfi_def_cfa_offset 8
 4357              		.cfi_offset 7, -8
 4358              		.cfi_offset 14, -4
 4359 0002 84B0     		sub	sp, sp, #16
 4360              	.LCFI141:
 4361              		.cfi_def_cfa_offset 24
 4362 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 124


 4363              	.LCFI142:
 4364              		.cfi_def_cfa_register 7
 4365 0006 7860     		str	r0, [r7, #4]
2386:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
2387:./Drivers/FreeRTOS/queue.c **** 
2388:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4366              		.loc 1 2388 5
 4367 0008 FFF7FEFF 		bl	vPortEnterCritical
2389:./Drivers/FreeRTOS/queue.c ****     {
2390:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4368              		.loc 1 2390 20
 4369 000c 7B68     		ldr	r3, [r7, #4]
 4370 000e 9B6B     		ldr	r3, [r3, #56]
 4371              		.loc 1 2390 11
 4372 0010 002B     		cmp	r3, #0
 4373 0012 02D1     		bne	.L281
2391:./Drivers/FreeRTOS/queue.c ****         {
2392:./Drivers/FreeRTOS/queue.c ****             xReturn = pdTRUE;
 4374              		.loc 1 2392 21
 4375 0014 0123     		movs	r3, #1
 4376 0016 FB60     		str	r3, [r7, #12]
 4377 0018 01E0     		b	.L282
 4378              	.L281:
2393:./Drivers/FreeRTOS/queue.c ****         }
2394:./Drivers/FreeRTOS/queue.c ****         else
2395:./Drivers/FreeRTOS/queue.c ****         {
2396:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFALSE;
 4379              		.loc 1 2396 21
 4380 001a 0023     		movs	r3, #0
 4381 001c FB60     		str	r3, [r7, #12]
 4382              	.L282:
2397:./Drivers/FreeRTOS/queue.c ****         }
2398:./Drivers/FreeRTOS/queue.c ****     }
2399:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4383              		.loc 1 2399 5
 4384 001e FFF7FEFF 		bl	vPortExitCritical
2400:./Drivers/FreeRTOS/queue.c **** 
2401:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 4385              		.loc 1 2401 12
 4386 0022 FB68     		ldr	r3, [r7, #12]
2402:./Drivers/FreeRTOS/queue.c **** }
 4387              		.loc 1 2402 1
 4388 0024 1846     		mov	r0, r3
 4389 0026 1037     		adds	r7, r7, #16
 4390              	.LCFI143:
 4391              		.cfi_def_cfa_offset 8
 4392 0028 BD46     		mov	sp, r7
 4393              	.LCFI144:
 4394              		.cfi_def_cfa_register 13
 4395              		@ sp needed
 4396 002a 80BD     		pop	{r7, pc}
 4397              		.cfi_endproc
 4398              	.LFE32:
 4400              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 4401              		.align	1
 4402              		.global	xQueueIsQueueEmptyFromISR
 4403              		.syntax unified
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 125


 4404              		.thumb
 4405              		.thumb_func
 4406              		.fpu fpv4-sp-d16
 4408              	xQueueIsQueueEmptyFromISR:
 4409              	.LFB33:
2403:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2404:./Drivers/FreeRTOS/queue.c **** 
2405:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2406:./Drivers/FreeRTOS/queue.c **** {
 4410              		.loc 1 2406 1
 4411              		.cfi_startproc
 4412              		@ args = 0, pretend = 0, frame = 24
 4413              		@ frame_needed = 1, uses_anonymous_args = 0
 4414              		@ link register save eliminated.
 4415 0000 80B4     		push	{r7}
 4416              	.LCFI145:
 4417              		.cfi_def_cfa_offset 4
 4418              		.cfi_offset 7, -4
 4419 0002 87B0     		sub	sp, sp, #28
 4420              	.LCFI146:
 4421              		.cfi_def_cfa_offset 32
 4422 0004 00AF     		add	r7, sp, #0
 4423              	.LCFI147:
 4424              		.cfi_def_cfa_register 7
 4425 0006 7860     		str	r0, [r7, #4]
2407:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
2408:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4426              		.loc 1 2408 21
 4427 0008 7B68     		ldr	r3, [r7, #4]
 4428 000a 3B61     		str	r3, [r7, #16]
2409:./Drivers/FreeRTOS/queue.c **** 
2410:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 4429              		.loc 1 2410 5
 4430 000c 3B69     		ldr	r3, [r7, #16]
 4431 000e 002B     		cmp	r3, #0
 4432 0010 0AD1     		bne	.L285
 4433              	.LBB216:
 4434              	.LBB217:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4435              		.loc 2 198 9
 4436              		.syntax unified
 4437              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4438 0012 4FF05003 			mov r3, #80												
 4439 0016 83F31188 		msr basepri, r3											
 4440 001a BFF36F8F 		isb														
 4441 001e BFF34F8F 		dsb														
 4442              	
 4443              	@ 0 "" 2
 4444              		.thumb
 4445              		.syntax unified
 4446 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4447              		.loc 2 206 5
 4448 0024 00BF     		nop
 4449              	.L286:
 4450              	.LBE217:
 4451              	.LBE216:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 126


 4452              		.loc 1 2410 5 discriminator 1
 4453 0026 FEE7     		b	.L286
 4454              	.L285:
2411:./Drivers/FreeRTOS/queue.c **** 
2412:./Drivers/FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 4455              		.loc 1 2412 16
 4456 0028 3B69     		ldr	r3, [r7, #16]
 4457 002a 9B6B     		ldr	r3, [r3, #56]
 4458              		.loc 1 2412 7
 4459 002c 002B     		cmp	r3, #0
 4460 002e 02D1     		bne	.L287
2413:./Drivers/FreeRTOS/queue.c ****     {
2414:./Drivers/FreeRTOS/queue.c ****         xReturn = pdTRUE;
 4461              		.loc 1 2414 17
 4462 0030 0123     		movs	r3, #1
 4463 0032 7B61     		str	r3, [r7, #20]
 4464 0034 01E0     		b	.L288
 4465              	.L287:
2415:./Drivers/FreeRTOS/queue.c ****     }
2416:./Drivers/FreeRTOS/queue.c ****     else
2417:./Drivers/FreeRTOS/queue.c ****     {
2418:./Drivers/FreeRTOS/queue.c ****         xReturn = pdFALSE;
 4466              		.loc 1 2418 17
 4467 0036 0023     		movs	r3, #0
 4468 0038 7B61     		str	r3, [r7, #20]
 4469              	.L288:
2419:./Drivers/FreeRTOS/queue.c ****     }
2420:./Drivers/FreeRTOS/queue.c **** 
2421:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 4470              		.loc 1 2421 12
 4471 003a 7B69     		ldr	r3, [r7, #20]
2422:./Drivers/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4472              		.loc 1 2422 1
 4473 003c 1846     		mov	r0, r3
 4474 003e 1C37     		adds	r7, r7, #28
 4475              	.LCFI148:
 4476              		.cfi_def_cfa_offset 4
 4477 0040 BD46     		mov	sp, r7
 4478              	.LCFI149:
 4479              		.cfi_def_cfa_register 13
 4480              		@ sp needed
 4481 0042 5DF8047B 		ldr	r7, [sp], #4
 4482              	.LCFI150:
 4483              		.cfi_restore 7
 4484              		.cfi_def_cfa_offset 0
 4485 0046 7047     		bx	lr
 4486              		.cfi_endproc
 4487              	.LFE33:
 4489              		.section	.text.prvIsQueueFull,"ax",%progbits
 4490              		.align	1
 4491              		.syntax unified
 4492              		.thumb
 4493              		.thumb_func
 4494              		.fpu fpv4-sp-d16
 4496              	prvIsQueueFull:
 4497              	.LFB34:
2423:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 127


2424:./Drivers/FreeRTOS/queue.c **** 
2425:./Drivers/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2426:./Drivers/FreeRTOS/queue.c **** {
 4498              		.loc 1 2426 1
 4499              		.cfi_startproc
 4500              		@ args = 0, pretend = 0, frame = 16
 4501              		@ frame_needed = 1, uses_anonymous_args = 0
 4502 0000 80B5     		push	{r7, lr}
 4503              	.LCFI151:
 4504              		.cfi_def_cfa_offset 8
 4505              		.cfi_offset 7, -8
 4506              		.cfi_offset 14, -4
 4507 0002 84B0     		sub	sp, sp, #16
 4508              	.LCFI152:
 4509              		.cfi_def_cfa_offset 24
 4510 0004 00AF     		add	r7, sp, #0
 4511              	.LCFI153:
 4512              		.cfi_def_cfa_register 7
 4513 0006 7860     		str	r0, [r7, #4]
2427:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
2428:./Drivers/FreeRTOS/queue.c **** 
2429:./Drivers/FreeRTOS/queue.c ****     taskENTER_CRITICAL();
 4514              		.loc 1 2429 5
 4515 0008 FFF7FEFF 		bl	vPortEnterCritical
2430:./Drivers/FreeRTOS/queue.c ****     {
2431:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4516              		.loc 1 2431 20
 4517 000c 7B68     		ldr	r3, [r7, #4]
 4518 000e 9A6B     		ldr	r2, [r3, #56]
 4519              		.loc 1 2431 50
 4520 0010 7B68     		ldr	r3, [r7, #4]
 4521 0012 DB6B     		ldr	r3, [r3, #60]
 4522              		.loc 1 2431 11
 4523 0014 9A42     		cmp	r2, r3
 4524 0016 02D1     		bne	.L291
2432:./Drivers/FreeRTOS/queue.c ****         {
2433:./Drivers/FreeRTOS/queue.c ****             xReturn = pdTRUE;
 4525              		.loc 1 2433 21
 4526 0018 0123     		movs	r3, #1
 4527 001a FB60     		str	r3, [r7, #12]
 4528 001c 01E0     		b	.L292
 4529              	.L291:
2434:./Drivers/FreeRTOS/queue.c ****         }
2435:./Drivers/FreeRTOS/queue.c ****         else
2436:./Drivers/FreeRTOS/queue.c ****         {
2437:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFALSE;
 4530              		.loc 1 2437 21
 4531 001e 0023     		movs	r3, #0
 4532 0020 FB60     		str	r3, [r7, #12]
 4533              	.L292:
2438:./Drivers/FreeRTOS/queue.c ****         }
2439:./Drivers/FreeRTOS/queue.c ****     }
2440:./Drivers/FreeRTOS/queue.c ****     taskEXIT_CRITICAL();
 4534              		.loc 1 2440 5
 4535 0022 FFF7FEFF 		bl	vPortExitCritical
2441:./Drivers/FreeRTOS/queue.c **** 
2442:./Drivers/FreeRTOS/queue.c ****     return xReturn;
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 128


 4536              		.loc 1 2442 12
 4537 0026 FB68     		ldr	r3, [r7, #12]
2443:./Drivers/FreeRTOS/queue.c **** }
 4538              		.loc 1 2443 1
 4539 0028 1846     		mov	r0, r3
 4540 002a 1037     		adds	r7, r7, #16
 4541              	.LCFI154:
 4542              		.cfi_def_cfa_offset 8
 4543 002c BD46     		mov	sp, r7
 4544              	.LCFI155:
 4545              		.cfi_def_cfa_register 13
 4546              		@ sp needed
 4547 002e 80BD     		pop	{r7, pc}
 4548              		.cfi_endproc
 4549              	.LFE34:
 4551              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 4552              		.align	1
 4553              		.global	xQueueIsQueueFullFromISR
 4554              		.syntax unified
 4555              		.thumb
 4556              		.thumb_func
 4557              		.fpu fpv4-sp-d16
 4559              	xQueueIsQueueFullFromISR:
 4560              	.LFB35:
2444:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2445:./Drivers/FreeRTOS/queue.c **** 
2446:./Drivers/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2447:./Drivers/FreeRTOS/queue.c **** {
 4561              		.loc 1 2447 1
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 24
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565              		@ link register save eliminated.
 4566 0000 80B4     		push	{r7}
 4567              	.LCFI156:
 4568              		.cfi_def_cfa_offset 4
 4569              		.cfi_offset 7, -4
 4570 0002 87B0     		sub	sp, sp, #28
 4571              	.LCFI157:
 4572              		.cfi_def_cfa_offset 32
 4573 0004 00AF     		add	r7, sp, #0
 4574              	.LCFI158:
 4575              		.cfi_def_cfa_register 7
 4576 0006 7860     		str	r0, [r7, #4]
2448:./Drivers/FreeRTOS/queue.c ****     BaseType_t xReturn;
2449:./Drivers/FreeRTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 4577              		.loc 1 2449 21
 4578 0008 7B68     		ldr	r3, [r7, #4]
 4579 000a 3B61     		str	r3, [r7, #16]
2450:./Drivers/FreeRTOS/queue.c **** 
2451:./Drivers/FreeRTOS/queue.c ****     configASSERT( pxQueue );
 4580              		.loc 1 2451 5
 4581 000c 3B69     		ldr	r3, [r7, #16]
 4582 000e 002B     		cmp	r3, #0
 4583 0010 0AD1     		bne	.L295
 4584              	.LBB218:
 4585              	.LBB219:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 129


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4586              		.loc 2 198 9
 4587              		.syntax unified
 4588              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4589 0012 4FF05003 			mov r3, #80												
 4590 0016 83F31188 		msr basepri, r3											
 4591 001a BFF36F8F 		isb														
 4592 001e BFF34F8F 		dsb														
 4593              	
 4594              	@ 0 "" 2
 4595              		.thumb
 4596              		.syntax unified
 4597 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4598              		.loc 2 206 5
 4599 0024 00BF     		nop
 4600              	.L296:
 4601              	.LBE219:
 4602              	.LBE218:
 4603              		.loc 1 2451 5 discriminator 1
 4604 0026 FEE7     		b	.L296
 4605              	.L295:
2452:./Drivers/FreeRTOS/queue.c **** 
2453:./Drivers/FreeRTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 4606              		.loc 1 2453 16
 4607 0028 3B69     		ldr	r3, [r7, #16]
 4608 002a 9A6B     		ldr	r2, [r3, #56]
 4609              		.loc 1 2453 46
 4610 002c 3B69     		ldr	r3, [r7, #16]
 4611 002e DB6B     		ldr	r3, [r3, #60]
 4612              		.loc 1 2453 7
 4613 0030 9A42     		cmp	r2, r3
 4614 0032 02D1     		bne	.L297
2454:./Drivers/FreeRTOS/queue.c ****     {
2455:./Drivers/FreeRTOS/queue.c ****         xReturn = pdTRUE;
 4615              		.loc 1 2455 17
 4616 0034 0123     		movs	r3, #1
 4617 0036 7B61     		str	r3, [r7, #20]
 4618 0038 01E0     		b	.L298
 4619              	.L297:
2456:./Drivers/FreeRTOS/queue.c ****     }
2457:./Drivers/FreeRTOS/queue.c ****     else
2458:./Drivers/FreeRTOS/queue.c ****     {
2459:./Drivers/FreeRTOS/queue.c ****         xReturn = pdFALSE;
 4620              		.loc 1 2459 17
 4621 003a 0023     		movs	r3, #0
 4622 003c 7B61     		str	r3, [r7, #20]
 4623              	.L298:
2460:./Drivers/FreeRTOS/queue.c ****     }
2461:./Drivers/FreeRTOS/queue.c **** 
2462:./Drivers/FreeRTOS/queue.c ****     return xReturn;
 4624              		.loc 1 2462 12
 4625 003e 7B69     		ldr	r3, [r7, #20]
2463:./Drivers/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4626              		.loc 1 2463 1
 4627 0040 1846     		mov	r0, r3
 4628 0042 1C37     		adds	r7, r7, #28
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 130


 4629              	.LCFI159:
 4630              		.cfi_def_cfa_offset 4
 4631 0044 BD46     		mov	sp, r7
 4632              	.LCFI160:
 4633              		.cfi_def_cfa_register 13
 4634              		@ sp needed
 4635 0046 5DF8047B 		ldr	r7, [sp], #4
 4636              	.LCFI161:
 4637              		.cfi_restore 7
 4638              		.cfi_def_cfa_offset 0
 4639 004a 7047     		bx	lr
 4640              		.cfi_endproc
 4641              	.LFE35:
 4643              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 4644              		.align	1
 4645              		.global	vQueueAddToRegistry
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	vQueueAddToRegistry:
 4652              	.LFB36:
2464:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2465:./Drivers/FreeRTOS/queue.c **** 
2466:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2467:./Drivers/FreeRTOS/queue.c **** 
2468:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2469:./Drivers/FreeRTOS/queue.c ****                              const void * pvItemToQueue,
2470:./Drivers/FreeRTOS/queue.c ****                              TickType_t xTicksToWait )
2471:./Drivers/FreeRTOS/queue.c ****     {
2472:./Drivers/FreeRTOS/queue.c ****         BaseType_t xReturn;
2473:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2474:./Drivers/FreeRTOS/queue.c **** 
2475:./Drivers/FreeRTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2476:./Drivers/FreeRTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2477:./Drivers/FreeRTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2478:./Drivers/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2479:./Drivers/FreeRTOS/queue.c ****         {
2480:./Drivers/FreeRTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2481:./Drivers/FreeRTOS/queue.c ****             {
2482:./Drivers/FreeRTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2483:./Drivers/FreeRTOS/queue.c ****                  * posting? */
2484:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2485:./Drivers/FreeRTOS/queue.c ****                 {
2486:./Drivers/FreeRTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2487:./Drivers/FreeRTOS/queue.c ****                      * return indicating that we need to block. */
2488:./Drivers/FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2489:./Drivers/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2490:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2491:./Drivers/FreeRTOS/queue.c ****                 }
2492:./Drivers/FreeRTOS/queue.c ****                 else
2493:./Drivers/FreeRTOS/queue.c ****                 {
2494:./Drivers/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2495:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2496:./Drivers/FreeRTOS/queue.c ****                 }
2497:./Drivers/FreeRTOS/queue.c ****             }
2498:./Drivers/FreeRTOS/queue.c ****         }
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 131


2499:./Drivers/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2500:./Drivers/FreeRTOS/queue.c **** 
2501:./Drivers/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2502:./Drivers/FreeRTOS/queue.c ****         {
2503:./Drivers/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2504:./Drivers/FreeRTOS/queue.c ****             {
2505:./Drivers/FreeRTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2506:./Drivers/FreeRTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2507:./Drivers/FreeRTOS/queue.c ****                 xReturn = pdPASS;
2508:./Drivers/FreeRTOS/queue.c **** 
2509:./Drivers/FreeRTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2510:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2511:./Drivers/FreeRTOS/queue.c ****                 {
2512:./Drivers/FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2513:./Drivers/FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2514:./Drivers/FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2515:./Drivers/FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2516:./Drivers/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2517:./Drivers/FreeRTOS/queue.c ****                     {
2518:./Drivers/FreeRTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2519:./Drivers/FreeRTOS/queue.c ****                          * that a yield might be appropriate. */
2520:./Drivers/FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2521:./Drivers/FreeRTOS/queue.c ****                     }
2522:./Drivers/FreeRTOS/queue.c ****                     else
2523:./Drivers/FreeRTOS/queue.c ****                     {
2524:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2525:./Drivers/FreeRTOS/queue.c ****                     }
2526:./Drivers/FreeRTOS/queue.c ****                 }
2527:./Drivers/FreeRTOS/queue.c ****                 else
2528:./Drivers/FreeRTOS/queue.c ****                 {
2529:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2530:./Drivers/FreeRTOS/queue.c ****                 }
2531:./Drivers/FreeRTOS/queue.c ****             }
2532:./Drivers/FreeRTOS/queue.c ****             else
2533:./Drivers/FreeRTOS/queue.c ****             {
2534:./Drivers/FreeRTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2535:./Drivers/FreeRTOS/queue.c ****             }
2536:./Drivers/FreeRTOS/queue.c ****         }
2537:./Drivers/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2538:./Drivers/FreeRTOS/queue.c **** 
2539:./Drivers/FreeRTOS/queue.c ****         return xReturn;
2540:./Drivers/FreeRTOS/queue.c ****     }
2541:./Drivers/FreeRTOS/queue.c **** 
2542:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2543:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2544:./Drivers/FreeRTOS/queue.c **** 
2545:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2546:./Drivers/FreeRTOS/queue.c **** 
2547:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2548:./Drivers/FreeRTOS/queue.c ****                                 void * pvBuffer,
2549:./Drivers/FreeRTOS/queue.c ****                                 TickType_t xTicksToWait )
2550:./Drivers/FreeRTOS/queue.c ****     {
2551:./Drivers/FreeRTOS/queue.c ****         BaseType_t xReturn;
2552:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2553:./Drivers/FreeRTOS/queue.c **** 
2554:./Drivers/FreeRTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2555:./Drivers/FreeRTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 132


2556:./Drivers/FreeRTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2557:./Drivers/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2558:./Drivers/FreeRTOS/queue.c ****         {
2559:./Drivers/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2560:./Drivers/FreeRTOS/queue.c ****             {
2561:./Drivers/FreeRTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2562:./Drivers/FreeRTOS/queue.c ****                  * leave with nothing? */
2563:./Drivers/FreeRTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2564:./Drivers/FreeRTOS/queue.c ****                 {
2565:./Drivers/FreeRTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2566:./Drivers/FreeRTOS/queue.c ****                      * indicating that we need to block. */
2567:./Drivers/FreeRTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2568:./Drivers/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2569:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_BLOCKED;
2570:./Drivers/FreeRTOS/queue.c ****                 }
2571:./Drivers/FreeRTOS/queue.c ****                 else
2572:./Drivers/FreeRTOS/queue.c ****                 {
2573:./Drivers/FreeRTOS/queue.c ****                     portENABLE_INTERRUPTS();
2574:./Drivers/FreeRTOS/queue.c ****                     return errQUEUE_FULL;
2575:./Drivers/FreeRTOS/queue.c ****                 }
2576:./Drivers/FreeRTOS/queue.c ****             }
2577:./Drivers/FreeRTOS/queue.c ****             else
2578:./Drivers/FreeRTOS/queue.c ****             {
2579:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2580:./Drivers/FreeRTOS/queue.c ****             }
2581:./Drivers/FreeRTOS/queue.c ****         }
2582:./Drivers/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2583:./Drivers/FreeRTOS/queue.c **** 
2584:./Drivers/FreeRTOS/queue.c ****         portDISABLE_INTERRUPTS();
2585:./Drivers/FreeRTOS/queue.c ****         {
2586:./Drivers/FreeRTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2587:./Drivers/FreeRTOS/queue.c ****             {
2588:./Drivers/FreeRTOS/queue.c ****                 /* Data is available from the queue. */
2589:./Drivers/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2590:./Drivers/FreeRTOS/queue.c **** 
2591:./Drivers/FreeRTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2592:./Drivers/FreeRTOS/queue.c ****                 {
2593:./Drivers/FreeRTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2594:./Drivers/FreeRTOS/queue.c ****                 }
2595:./Drivers/FreeRTOS/queue.c ****                 else
2596:./Drivers/FreeRTOS/queue.c ****                 {
2597:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2598:./Drivers/FreeRTOS/queue.c ****                 }
2599:./Drivers/FreeRTOS/queue.c **** 
2600:./Drivers/FreeRTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2601:./Drivers/FreeRTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2602:./Drivers/FreeRTOS/queue.c **** 
2603:./Drivers/FreeRTOS/queue.c ****                 xReturn = pdPASS;
2604:./Drivers/FreeRTOS/queue.c **** 
2605:./Drivers/FreeRTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2606:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2607:./Drivers/FreeRTOS/queue.c ****                 {
2608:./Drivers/FreeRTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2609:./Drivers/FreeRTOS/queue.c ****                      * into the ready list as we are within a critical section.
2610:./Drivers/FreeRTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2611:./Drivers/FreeRTOS/queue.c ****                      * the event were caused from within an interrupt. */
2612:./Drivers/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 133


2613:./Drivers/FreeRTOS/queue.c ****                     {
2614:./Drivers/FreeRTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2615:./Drivers/FreeRTOS/queue.c ****                     }
2616:./Drivers/FreeRTOS/queue.c ****                     else
2617:./Drivers/FreeRTOS/queue.c ****                     {
2618:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2619:./Drivers/FreeRTOS/queue.c ****                     }
2620:./Drivers/FreeRTOS/queue.c ****                 }
2621:./Drivers/FreeRTOS/queue.c ****                 else
2622:./Drivers/FreeRTOS/queue.c ****                 {
2623:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2624:./Drivers/FreeRTOS/queue.c ****                 }
2625:./Drivers/FreeRTOS/queue.c ****             }
2626:./Drivers/FreeRTOS/queue.c ****             else
2627:./Drivers/FreeRTOS/queue.c ****             {
2628:./Drivers/FreeRTOS/queue.c ****                 xReturn = pdFAIL;
2629:./Drivers/FreeRTOS/queue.c ****             }
2630:./Drivers/FreeRTOS/queue.c ****         }
2631:./Drivers/FreeRTOS/queue.c ****         portENABLE_INTERRUPTS();
2632:./Drivers/FreeRTOS/queue.c **** 
2633:./Drivers/FreeRTOS/queue.c ****         return xReturn;
2634:./Drivers/FreeRTOS/queue.c ****     }
2635:./Drivers/FreeRTOS/queue.c **** 
2636:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2637:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2638:./Drivers/FreeRTOS/queue.c **** 
2639:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2640:./Drivers/FreeRTOS/queue.c **** 
2641:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2642:./Drivers/FreeRTOS/queue.c ****                                     const void * pvItemToQueue,
2643:./Drivers/FreeRTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2644:./Drivers/FreeRTOS/queue.c ****     {
2645:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2646:./Drivers/FreeRTOS/queue.c **** 
2647:./Drivers/FreeRTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2648:./Drivers/FreeRTOS/queue.c ****          * exit without doing anything. */
2649:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2650:./Drivers/FreeRTOS/queue.c ****         {
2651:./Drivers/FreeRTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2652:./Drivers/FreeRTOS/queue.c **** 
2653:./Drivers/FreeRTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2654:./Drivers/FreeRTOS/queue.c ****              * co-routine has not already been woken. */
2655:./Drivers/FreeRTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2656:./Drivers/FreeRTOS/queue.c ****             {
2657:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2658:./Drivers/FreeRTOS/queue.c ****                 {
2659:./Drivers/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2660:./Drivers/FreeRTOS/queue.c ****                     {
2661:./Drivers/FreeRTOS/queue.c ****                         return pdTRUE;
2662:./Drivers/FreeRTOS/queue.c ****                     }
2663:./Drivers/FreeRTOS/queue.c ****                     else
2664:./Drivers/FreeRTOS/queue.c ****                     {
2665:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2666:./Drivers/FreeRTOS/queue.c ****                     }
2667:./Drivers/FreeRTOS/queue.c ****                 }
2668:./Drivers/FreeRTOS/queue.c ****                 else
2669:./Drivers/FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 134


2670:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2671:./Drivers/FreeRTOS/queue.c ****                 }
2672:./Drivers/FreeRTOS/queue.c ****             }
2673:./Drivers/FreeRTOS/queue.c ****             else
2674:./Drivers/FreeRTOS/queue.c ****             {
2675:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2676:./Drivers/FreeRTOS/queue.c ****             }
2677:./Drivers/FreeRTOS/queue.c ****         }
2678:./Drivers/FreeRTOS/queue.c ****         else
2679:./Drivers/FreeRTOS/queue.c ****         {
2680:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2681:./Drivers/FreeRTOS/queue.c ****         }
2682:./Drivers/FreeRTOS/queue.c **** 
2683:./Drivers/FreeRTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2684:./Drivers/FreeRTOS/queue.c ****     }
2685:./Drivers/FreeRTOS/queue.c **** 
2686:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2687:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2688:./Drivers/FreeRTOS/queue.c **** 
2689:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2690:./Drivers/FreeRTOS/queue.c **** 
2691:./Drivers/FreeRTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2692:./Drivers/FreeRTOS/queue.c ****                                        void * pvBuffer,
2693:./Drivers/FreeRTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2694:./Drivers/FreeRTOS/queue.c ****     {
2695:./Drivers/FreeRTOS/queue.c ****         BaseType_t xReturn;
2696:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2697:./Drivers/FreeRTOS/queue.c **** 
2698:./Drivers/FreeRTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2699:./Drivers/FreeRTOS/queue.c ****          * not then just leave without doing anything. */
2700:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2701:./Drivers/FreeRTOS/queue.c ****         {
2702:./Drivers/FreeRTOS/queue.c ****             /* Copy the data from the queue. */
2703:./Drivers/FreeRTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2704:./Drivers/FreeRTOS/queue.c **** 
2705:./Drivers/FreeRTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2706:./Drivers/FreeRTOS/queue.c ****             {
2707:./Drivers/FreeRTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2708:./Drivers/FreeRTOS/queue.c ****             }
2709:./Drivers/FreeRTOS/queue.c ****             else
2710:./Drivers/FreeRTOS/queue.c ****             {
2711:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2712:./Drivers/FreeRTOS/queue.c ****             }
2713:./Drivers/FreeRTOS/queue.c **** 
2714:./Drivers/FreeRTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2715:./Drivers/FreeRTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2716:./Drivers/FreeRTOS/queue.c **** 
2717:./Drivers/FreeRTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2718:./Drivers/FreeRTOS/queue.c ****             {
2719:./Drivers/FreeRTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2720:./Drivers/FreeRTOS/queue.c ****                 {
2721:./Drivers/FreeRTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2722:./Drivers/FreeRTOS/queue.c ****                     {
2723:./Drivers/FreeRTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2724:./Drivers/FreeRTOS/queue.c ****                     }
2725:./Drivers/FreeRTOS/queue.c ****                     else
2726:./Drivers/FreeRTOS/queue.c ****                     {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 135


2727:./Drivers/FreeRTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2728:./Drivers/FreeRTOS/queue.c ****                     }
2729:./Drivers/FreeRTOS/queue.c ****                 }
2730:./Drivers/FreeRTOS/queue.c ****                 else
2731:./Drivers/FreeRTOS/queue.c ****                 {
2732:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2733:./Drivers/FreeRTOS/queue.c ****                 }
2734:./Drivers/FreeRTOS/queue.c ****             }
2735:./Drivers/FreeRTOS/queue.c ****             else
2736:./Drivers/FreeRTOS/queue.c ****             {
2737:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2738:./Drivers/FreeRTOS/queue.c ****             }
2739:./Drivers/FreeRTOS/queue.c **** 
2740:./Drivers/FreeRTOS/queue.c ****             xReturn = pdPASS;
2741:./Drivers/FreeRTOS/queue.c ****         }
2742:./Drivers/FreeRTOS/queue.c ****         else
2743:./Drivers/FreeRTOS/queue.c ****         {
2744:./Drivers/FreeRTOS/queue.c ****             xReturn = pdFAIL;
2745:./Drivers/FreeRTOS/queue.c ****         }
2746:./Drivers/FreeRTOS/queue.c **** 
2747:./Drivers/FreeRTOS/queue.c ****         return xReturn;
2748:./Drivers/FreeRTOS/queue.c ****     }
2749:./Drivers/FreeRTOS/queue.c **** 
2750:./Drivers/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2751:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2752:./Drivers/FreeRTOS/queue.c **** 
2753:./Drivers/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2754:./Drivers/FreeRTOS/queue.c **** 
2755:./Drivers/FreeRTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2756:./Drivers/FreeRTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2757:./Drivers/FreeRTOS/queue.c ****     {
 4653              		.loc 1 2757 5
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 24
 4656              		@ frame_needed = 1, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 4658 0000 80B4     		push	{r7}
 4659              	.LCFI162:
 4660              		.cfi_def_cfa_offset 4
 4661              		.cfi_offset 7, -4
 4662 0002 87B0     		sub	sp, sp, #28
 4663              	.LCFI163:
 4664              		.cfi_def_cfa_offset 32
 4665 0004 00AF     		add	r7, sp, #0
 4666              	.LCFI164:
 4667              		.cfi_def_cfa_register 7
 4668 0006 7860     		str	r0, [r7, #4]
 4669 0008 3960     		str	r1, [r7]
2758:./Drivers/FreeRTOS/queue.c ****         UBaseType_t ux;
2759:./Drivers/FreeRTOS/queue.c **** 
2760:./Drivers/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4670              		.loc 1 2760 9
 4671 000a 7B68     		ldr	r3, [r7, #4]
 4672 000c 002B     		cmp	r3, #0
 4673 000e 0AD1     		bne	.L301
 4674              	.LBB220:
 4675              	.LBB221:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 136


 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4676              		.loc 2 198 9
 4677              		.syntax unified
 4678              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4679 0010 4FF05003 			mov r3, #80												
 4680 0014 83F31188 		msr basepri, r3											
 4681 0018 BFF36F8F 		isb														
 4682 001c BFF34F8F 		dsb														
 4683              	
 4684              	@ 0 "" 2
 4685              		.thumb
 4686              		.syntax unified
 4687 0020 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4688              		.loc 2 206 5
 4689 0022 00BF     		nop
 4690              	.L302:
 4691              	.LBE221:
 4692              	.LBE220:
 4693              		.loc 1 2760 9 discriminator 1
 4694 0024 FEE7     		b	.L302
 4695              	.L301:
2761:./Drivers/FreeRTOS/queue.c **** 
2762:./Drivers/FreeRTOS/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
 4696              		.loc 1 2762 31
 4697 0026 0023     		movs	r3, #0
 4698 0028 3B61     		str	r3, [r7, #16]
2763:./Drivers/FreeRTOS/queue.c **** 
2764:./Drivers/FreeRTOS/queue.c ****         if( pcQueueName != NULL )
 4699              		.loc 1 2764 11
 4700 002a 3B68     		ldr	r3, [r7]
 4701 002c 002B     		cmp	r3, #0
 4702 002e 24D0     		beq	.L303
2765:./Drivers/FreeRTOS/queue.c ****         {
2766:./Drivers/FreeRTOS/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2767:./Drivers/FreeRTOS/queue.c ****              * a free slot. */
2768:./Drivers/FreeRTOS/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4703              		.loc 1 2768 21
 4704 0030 0023     		movs	r3, #0
 4705 0032 7B61     		str	r3, [r7, #20]
 4706              		.loc 1 2768 13
 4707 0034 1EE0     		b	.L304
 4708              	.L307:
2769:./Drivers/FreeRTOS/queue.c ****             {
2770:./Drivers/FreeRTOS/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2771:./Drivers/FreeRTOS/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 4709              		.loc 1 2771 51
 4710 0036 184A     		ldr	r2, .L310
 4711 0038 7B69     		ldr	r3, [r7, #20]
 4712 003a DB00     		lsls	r3, r3, #3
 4713 003c 1344     		add	r3, r3, r2
 4714 003e 5B68     		ldr	r3, [r3, #4]
 4715              		.loc 1 2771 19
 4716 0040 7A68     		ldr	r2, [r7, #4]
 4717 0042 9A42     		cmp	r2, r3
 4718 0044 05D1     		bne	.L305
2772:./Drivers/FreeRTOS/queue.c ****                 {
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 137


2773:./Drivers/FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 4719              		.loc 1 2773 36
 4720 0046 7B69     		ldr	r3, [r7, #20]
 4721 0048 DB00     		lsls	r3, r3, #3
 4722 004a 134A     		ldr	r2, .L310
 4723 004c 1344     		add	r3, r3, r2
 4724 004e 3B61     		str	r3, [r7, #16]
2774:./Drivers/FreeRTOS/queue.c ****                     break;
 4725              		.loc 1 2774 21
 4726 0050 13E0     		b	.L303
 4727              	.L305:
2775:./Drivers/FreeRTOS/queue.c ****                 }
2776:./Drivers/FreeRTOS/queue.c ****                 /* Otherwise, store in the next empty location */
2777:./Drivers/FreeRTOS/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
 4728              		.loc 1 2777 24
 4729 0052 3B69     		ldr	r3, [r7, #16]
 4730 0054 002B     		cmp	r3, #0
 4731 0056 0AD1     		bne	.L306
 4732              		.loc 1 2777 78 discriminator 1
 4733 0058 0F4A     		ldr	r2, .L310
 4734 005a 7B69     		ldr	r3, [r7, #20]
 4735 005c 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4736              		.loc 1 2777 53 discriminator 1
 4737 0060 002B     		cmp	r3, #0
 4738 0062 04D1     		bne	.L306
2778:./Drivers/FreeRTOS/queue.c ****                 {
2779:./Drivers/FreeRTOS/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 4739              		.loc 1 2779 36
 4740 0064 7B69     		ldr	r3, [r7, #20]
 4741 0066 DB00     		lsls	r3, r3, #3
 4742 0068 0B4A     		ldr	r2, .L310
 4743 006a 1344     		add	r3, r3, r2
 4744 006c 3B61     		str	r3, [r7, #16]
 4745              	.L306:
2768:./Drivers/FreeRTOS/queue.c ****             {
 4746              		.loc 1 2768 93 discriminator 2
 4747 006e 7B69     		ldr	r3, [r7, #20]
 4748 0070 0133     		adds	r3, r3, #1
 4749 0072 7B61     		str	r3, [r7, #20]
 4750              	.L304:
2768:./Drivers/FreeRTOS/queue.c ****             {
 4751              		.loc 1 2768 13 discriminator 1
 4752 0074 7B69     		ldr	r3, [r7, #20]
 4753 0076 072B     		cmp	r3, #7
 4754 0078 DDD9     		bls	.L307
 4755              	.L303:
2780:./Drivers/FreeRTOS/queue.c ****                 }
2781:./Drivers/FreeRTOS/queue.c ****                 else
2782:./Drivers/FreeRTOS/queue.c ****                 {
2783:./Drivers/FreeRTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2784:./Drivers/FreeRTOS/queue.c ****                 }
2785:./Drivers/FreeRTOS/queue.c ****             }
2786:./Drivers/FreeRTOS/queue.c ****         }
2787:./Drivers/FreeRTOS/queue.c **** 
2788:./Drivers/FreeRTOS/queue.c ****         if( pxEntryToWrite != NULL )
 4756              		.loc 1 2788 11
 4757 007a 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 138


 4758 007c 002B     		cmp	r3, #0
 4759 007e 05D0     		beq	.L309
2789:./Drivers/FreeRTOS/queue.c ****         {
2790:./Drivers/FreeRTOS/queue.c ****             /* Store the information on this queue. */
2791:./Drivers/FreeRTOS/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 4760              		.loc 1 2791 41
 4761 0080 3B69     		ldr	r3, [r7, #16]
 4762 0082 3A68     		ldr	r2, [r7]
 4763 0084 1A60     		str	r2, [r3]
2792:./Drivers/FreeRTOS/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 4764              		.loc 1 2792 37
 4765 0086 3B69     		ldr	r3, [r7, #16]
 4766 0088 7A68     		ldr	r2, [r7, #4]
 4767 008a 5A60     		str	r2, [r3, #4]
 4768              	.L309:
2793:./Drivers/FreeRTOS/queue.c **** 
2794:./Drivers/FreeRTOS/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2795:./Drivers/FreeRTOS/queue.c ****         }
2796:./Drivers/FreeRTOS/queue.c ****     }
 4769              		.loc 1 2796 5
 4770 008c 00BF     		nop
 4771 008e 1C37     		adds	r7, r7, #28
 4772              	.LCFI165:
 4773              		.cfi_def_cfa_offset 4
 4774 0090 BD46     		mov	sp, r7
 4775              	.LCFI166:
 4776              		.cfi_def_cfa_register 13
 4777              		@ sp needed
 4778 0092 5DF8047B 		ldr	r7, [sp], #4
 4779              	.LCFI167:
 4780              		.cfi_restore 7
 4781              		.cfi_def_cfa_offset 0
 4782 0096 7047     		bx	lr
 4783              	.L311:
 4784              		.align	2
 4785              	.L310:
 4786 0098 00000000 		.word	xQueueRegistry
 4787              		.cfi_endproc
 4788              	.LFE36:
 4790              		.section	.text.pcQueueGetName,"ax",%progbits
 4791              		.align	1
 4792              		.global	pcQueueGetName
 4793              		.syntax unified
 4794              		.thumb
 4795              		.thumb_func
 4796              		.fpu fpv4-sp-d16
 4798              	pcQueueGetName:
 4799              	.LFB37:
2797:./Drivers/FreeRTOS/queue.c **** 
2798:./Drivers/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2799:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2800:./Drivers/FreeRTOS/queue.c **** 
2801:./Drivers/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2802:./Drivers/FreeRTOS/queue.c **** 
2803:./Drivers/FreeRTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2804:./Drivers/FreeRTOS/queue.c ****     {
 4800              		.loc 1 2804 5
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 139


 4801              		.cfi_startproc
 4802              		@ args = 0, pretend = 0, frame = 24
 4803              		@ frame_needed = 1, uses_anonymous_args = 0
 4804              		@ link register save eliminated.
 4805 0000 80B4     		push	{r7}
 4806              	.LCFI168:
 4807              		.cfi_def_cfa_offset 4
 4808              		.cfi_offset 7, -4
 4809 0002 87B0     		sub	sp, sp, #28
 4810              	.LCFI169:
 4811              		.cfi_def_cfa_offset 32
 4812 0004 00AF     		add	r7, sp, #0
 4813              	.LCFI170:
 4814              		.cfi_def_cfa_register 7
 4815 0006 7860     		str	r0, [r7, #4]
2805:./Drivers/FreeRTOS/queue.c ****         UBaseType_t ux;
2806:./Drivers/FreeRTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
 4816              		.loc 1 2806 22
 4817 0008 0023     		movs	r3, #0
 4818 000a 3B61     		str	r3, [r7, #16]
2807:./Drivers/FreeRTOS/queue.c **** 
2808:./Drivers/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4819              		.loc 1 2808 9
 4820 000c 7B68     		ldr	r3, [r7, #4]
 4821 000e 002B     		cmp	r3, #0
 4822 0010 0AD1     		bne	.L313
 4823              	.LBB222:
 4824              	.LBB223:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4825              		.loc 2 198 9
 4826              		.syntax unified
 4827              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4828 0012 4FF05003 			mov r3, #80												
 4829 0016 83F31188 		msr basepri, r3											
 4830 001a BFF36F8F 		isb														
 4831 001e BFF34F8F 		dsb														
 4832              	
 4833              	@ 0 "" 2
 4834              		.thumb
 4835              		.syntax unified
 4836 0022 FB60     		str	r3, [r7, #12]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4837              		.loc 2 206 5
 4838 0024 00BF     		nop
 4839              	.L314:
 4840              	.LBE223:
 4841              	.LBE222:
 4842              		.loc 1 2808 9 discriminator 1
 4843 0026 FEE7     		b	.L314
 4844              	.L313:
2809:./Drivers/FreeRTOS/queue.c **** 
2810:./Drivers/FreeRTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2811:./Drivers/FreeRTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2812:./Drivers/FreeRTOS/queue.c **** 
2813:./Drivers/FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4845              		.loc 1 2813 17
 4846 0028 0023     		movs	r3, #0
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 140


 4847 002a 7B61     		str	r3, [r7, #20]
 4848              		.loc 1 2813 9
 4849 002c 10E0     		b	.L315
 4850              	.L318:
2814:./Drivers/FreeRTOS/queue.c ****         {
2815:./Drivers/FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4851              		.loc 1 2815 37
 4852 002e 0D4A     		ldr	r2, .L320
 4853 0030 7B69     		ldr	r3, [r7, #20]
 4854 0032 DB00     		lsls	r3, r3, #3
 4855 0034 1344     		add	r3, r3, r2
 4856 0036 5B68     		ldr	r3, [r3, #4]
 4857              		.loc 1 2815 15
 4858 0038 7A68     		ldr	r2, [r7, #4]
 4859 003a 9A42     		cmp	r2, r3
 4860 003c 05D1     		bne	.L316
2816:./Drivers/FreeRTOS/queue.c ****             {
2817:./Drivers/FreeRTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 4861              		.loc 1 2817 26
 4862 003e 094A     		ldr	r2, .L320
 4863 0040 7B69     		ldr	r3, [r7, #20]
 4864 0042 52F83330 		ldr	r3, [r2, r3, lsl #3]
 4865 0046 3B61     		str	r3, [r7, #16]
2818:./Drivers/FreeRTOS/queue.c ****                 break;
 4866              		.loc 1 2818 17
 4867 0048 05E0     		b	.L317
 4868              	.L316:
2813:./Drivers/FreeRTOS/queue.c ****         {
 4869              		.loc 1 2813 89 discriminator 2
 4870 004a 7B69     		ldr	r3, [r7, #20]
 4871 004c 0133     		adds	r3, r3, #1
 4872 004e 7B61     		str	r3, [r7, #20]
 4873              	.L315:
2813:./Drivers/FreeRTOS/queue.c ****         {
 4874              		.loc 1 2813 9 discriminator 1
 4875 0050 7B69     		ldr	r3, [r7, #20]
 4876 0052 072B     		cmp	r3, #7
 4877 0054 EBD9     		bls	.L318
 4878              	.L317:
2819:./Drivers/FreeRTOS/queue.c ****             }
2820:./Drivers/FreeRTOS/queue.c ****             else
2821:./Drivers/FreeRTOS/queue.c ****             {
2822:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2823:./Drivers/FreeRTOS/queue.c ****             }
2824:./Drivers/FreeRTOS/queue.c ****         }
2825:./Drivers/FreeRTOS/queue.c **** 
2826:./Drivers/FreeRTOS/queue.c ****         return pcReturn;
 4879              		.loc 1 2826 16
 4880 0056 3B69     		ldr	r3, [r7, #16]
2827:./Drivers/FreeRTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 4881              		.loc 1 2827 5
 4882 0058 1846     		mov	r0, r3
 4883 005a 1C37     		adds	r7, r7, #28
 4884              	.LCFI171:
 4885              		.cfi_def_cfa_offset 4
 4886 005c BD46     		mov	sp, r7
 4887              	.LCFI172:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 141


 4888              		.cfi_def_cfa_register 13
 4889              		@ sp needed
 4890 005e 5DF8047B 		ldr	r7, [sp], #4
 4891              	.LCFI173:
 4892              		.cfi_restore 7
 4893              		.cfi_def_cfa_offset 0
 4894 0062 7047     		bx	lr
 4895              	.L321:
 4896              		.align	2
 4897              	.L320:
 4898 0064 00000000 		.word	xQueueRegistry
 4899              		.cfi_endproc
 4900              	.LFE37:
 4902              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 4903              		.align	1
 4904              		.global	vQueueUnregisterQueue
 4905              		.syntax unified
 4906              		.thumb
 4907              		.thumb_func
 4908              		.fpu fpv4-sp-d16
 4910              	vQueueUnregisterQueue:
 4911              	.LFB38:
2828:./Drivers/FreeRTOS/queue.c **** 
2829:./Drivers/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2830:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2831:./Drivers/FreeRTOS/queue.c **** 
2832:./Drivers/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2833:./Drivers/FreeRTOS/queue.c **** 
2834:./Drivers/FreeRTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2835:./Drivers/FreeRTOS/queue.c ****     {
 4912              		.loc 1 2835 5
 4913              		.cfi_startproc
 4914              		@ args = 0, pretend = 0, frame = 16
 4915              		@ frame_needed = 1, uses_anonymous_args = 0
 4916              		@ link register save eliminated.
 4917 0000 80B4     		push	{r7}
 4918              	.LCFI174:
 4919              		.cfi_def_cfa_offset 4
 4920              		.cfi_offset 7, -4
 4921 0002 85B0     		sub	sp, sp, #20
 4922              	.LCFI175:
 4923              		.cfi_def_cfa_offset 24
 4924 0004 00AF     		add	r7, sp, #0
 4925              	.LCFI176:
 4926              		.cfi_def_cfa_register 7
 4927 0006 7860     		str	r0, [r7, #4]
2836:./Drivers/FreeRTOS/queue.c ****         UBaseType_t ux;
2837:./Drivers/FreeRTOS/queue.c **** 
2838:./Drivers/FreeRTOS/queue.c ****         configASSERT( xQueue );
 4928              		.loc 1 2838 9
 4929 0008 7B68     		ldr	r3, [r7, #4]
 4930 000a 002B     		cmp	r3, #0
 4931 000c 0AD1     		bne	.L323
 4932              	.LBB224:
 4933              	.LBB225:
 198:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****         (
 4934              		.loc 2 198 9
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 142


 4935              		.syntax unified
 4936              	@ 198 "Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 4937 000e 4FF05003 			mov r3, #80												
 4938 0012 83F31188 		msr basepri, r3											
 4939 0016 BFF36F8F 		isb														
 4940 001a BFF34F8F 		dsb														
 4941              	
 4942              	@ 0 "" 2
 4943              		.thumb
 4944              		.syntax unified
 4945 001e BB60     		str	r3, [r7, #8]
 206:Drivers/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 4946              		.loc 2 206 5
 4947 0020 00BF     		nop
 4948              	.L324:
 4949              	.LBE225:
 4950              	.LBE224:
 4951              		.loc 1 2838 9 discriminator 1
 4952 0022 FEE7     		b	.L324
 4953              	.L323:
2839:./Drivers/FreeRTOS/queue.c **** 
2840:./Drivers/FreeRTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2841:./Drivers/FreeRTOS/queue.c ****          * registry. */
2842:./Drivers/FreeRTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 4954              		.loc 1 2842 17
 4955 0024 0023     		movs	r3, #0
 4956 0026 FB60     		str	r3, [r7, #12]
 4957              		.loc 1 2842 9
 4958 0028 16E0     		b	.L325
 4959              	.L328:
2843:./Drivers/FreeRTOS/queue.c ****         {
2844:./Drivers/FreeRTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 4960              		.loc 1 2844 37
 4961 002a 104A     		ldr	r2, .L329
 4962 002c FB68     		ldr	r3, [r7, #12]
 4963 002e DB00     		lsls	r3, r3, #3
 4964 0030 1344     		add	r3, r3, r2
 4965 0032 5B68     		ldr	r3, [r3, #4]
 4966              		.loc 1 2844 15
 4967 0034 7A68     		ldr	r2, [r7, #4]
 4968 0036 9A42     		cmp	r2, r3
 4969 0038 0BD1     		bne	.L326
2845:./Drivers/FreeRTOS/queue.c ****             {
2846:./Drivers/FreeRTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2847:./Drivers/FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 4970              		.loc 1 2847 50
 4971 003a 0C4A     		ldr	r2, .L329
 4972 003c FB68     		ldr	r3, [r7, #12]
 4973 003e 0021     		movs	r1, #0
 4974 0040 42F83310 		str	r1, [r2, r3, lsl #3]
2848:./Drivers/FreeRTOS/queue.c **** 
2849:./Drivers/FreeRTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2850:./Drivers/FreeRTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2851:./Drivers/FreeRTOS/queue.c ****                  * added again. */
2852:./Drivers/FreeRTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 4975              		.loc 1 2852 46
 4976 0044 094A     		ldr	r2, .L329
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 143


 4977 0046 FB68     		ldr	r3, [r7, #12]
 4978 0048 DB00     		lsls	r3, r3, #3
 4979 004a 1344     		add	r3, r3, r2
 4980 004c 0022     		movs	r2, #0
 4981 004e 5A60     		str	r2, [r3, #4]
2853:./Drivers/FreeRTOS/queue.c ****                 break;
 4982              		.loc 1 2853 17
 4983 0050 06E0     		b	.L327
 4984              	.L326:
2842:./Drivers/FreeRTOS/queue.c ****         {
 4985              		.loc 1 2842 89 discriminator 2
 4986 0052 FB68     		ldr	r3, [r7, #12]
 4987 0054 0133     		adds	r3, r3, #1
 4988 0056 FB60     		str	r3, [r7, #12]
 4989              	.L325:
2842:./Drivers/FreeRTOS/queue.c ****         {
 4990              		.loc 1 2842 9 discriminator 1
 4991 0058 FB68     		ldr	r3, [r7, #12]
 4992 005a 072B     		cmp	r3, #7
 4993 005c E5D9     		bls	.L328
2854:./Drivers/FreeRTOS/queue.c ****             }
2855:./Drivers/FreeRTOS/queue.c ****             else
2856:./Drivers/FreeRTOS/queue.c ****             {
2857:./Drivers/FreeRTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2858:./Drivers/FreeRTOS/queue.c ****             }
2859:./Drivers/FreeRTOS/queue.c ****         }
2860:./Drivers/FreeRTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 4994              		.loc 1 2860 5
 4995 005e 00BF     		nop
 4996              	.L327:
 4997 0060 00BF     		nop
 4998 0062 1437     		adds	r7, r7, #20
 4999              	.LCFI177:
 5000              		.cfi_def_cfa_offset 4
 5001 0064 BD46     		mov	sp, r7
 5002              	.LCFI178:
 5003              		.cfi_def_cfa_register 13
 5004              		@ sp needed
 5005 0066 5DF8047B 		ldr	r7, [sp], #4
 5006              	.LCFI179:
 5007              		.cfi_restore 7
 5008              		.cfi_def_cfa_offset 0
 5009 006a 7047     		bx	lr
 5010              	.L330:
 5011              		.align	2
 5012              	.L329:
 5013 006c 00000000 		.word	xQueueRegistry
 5014              		.cfi_endproc
 5015              	.LFE38:
 5017              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 5018              		.align	1
 5019              		.global	vQueueWaitForMessageRestricted
 5020              		.syntax unified
 5021              		.thumb
 5022              		.thumb_func
 5023              		.fpu fpv4-sp-d16
 5025              	vQueueWaitForMessageRestricted:
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 144


 5026              	.LFB39:
2861:./Drivers/FreeRTOS/queue.c **** 
2862:./Drivers/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2863:./Drivers/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2864:./Drivers/FreeRTOS/queue.c **** 
2865:./Drivers/FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2866:./Drivers/FreeRTOS/queue.c **** 
2867:./Drivers/FreeRTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2868:./Drivers/FreeRTOS/queue.c ****                                          TickType_t xTicksToWait,
2869:./Drivers/FreeRTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2870:./Drivers/FreeRTOS/queue.c ****     {
 5027              		.loc 1 2870 5
 5028              		.cfi_startproc
 5029              		@ args = 0, pretend = 0, frame = 24
 5030              		@ frame_needed = 1, uses_anonymous_args = 0
 5031 0000 80B5     		push	{r7, lr}
 5032              	.LCFI180:
 5033              		.cfi_def_cfa_offset 8
 5034              		.cfi_offset 7, -8
 5035              		.cfi_offset 14, -4
 5036 0002 86B0     		sub	sp, sp, #24
 5037              	.LCFI181:
 5038              		.cfi_def_cfa_offset 32
 5039 0004 00AF     		add	r7, sp, #0
 5040              	.LCFI182:
 5041              		.cfi_def_cfa_register 7
 5042 0006 F860     		str	r0, [r7, #12]
 5043 0008 B960     		str	r1, [r7, #8]
 5044 000a 7A60     		str	r2, [r7, #4]
2871:./Drivers/FreeRTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
 5045              		.loc 1 2871 25
 5046 000c FB68     		ldr	r3, [r7, #12]
 5047 000e 7B61     		str	r3, [r7, #20]
2872:./Drivers/FreeRTOS/queue.c **** 
2873:./Drivers/FreeRTOS/queue.c ****         /* This function should not be called by application code hence the
2874:./Drivers/FreeRTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2875:./Drivers/FreeRTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2876:./Drivers/FreeRTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2877:./Drivers/FreeRTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2878:./Drivers/FreeRTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2879:./Drivers/FreeRTOS/queue.c ****          * section. */
2880:./Drivers/FreeRTOS/queue.c **** 
2881:./Drivers/FreeRTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2882:./Drivers/FreeRTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2883:./Drivers/FreeRTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2884:./Drivers/FreeRTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2885:./Drivers/FreeRTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2886:./Drivers/FreeRTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2887:./Drivers/FreeRTOS/queue.c ****         prvLockQueue( pxQueue );
 5048              		.loc 1 2887 9
 5049 0010 FFF7FEFF 		bl	vPortEnterCritical
 5050 0014 7B69     		ldr	r3, [r7, #20]
 5051 0016 93F84430 		ldrb	r3, [r3, #68]
 5052 001a 5BB2     		sxtb	r3, r3
 5053 001c B3F1FF3F 		cmp	r3, #-1
 5054 0020 03D1     		bne	.L332
 5055              		.loc 1 2887 9 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 145


 5056 0022 7B69     		ldr	r3, [r7, #20]
 5057 0024 0022     		movs	r2, #0
 5058 0026 83F84420 		strb	r2, [r3, #68]
 5059              	.L332:
 5060              		.loc 1 2887 9 discriminator 3
 5061 002a 7B69     		ldr	r3, [r7, #20]
 5062 002c 93F84530 		ldrb	r3, [r3, #69]
 5063 0030 5BB2     		sxtb	r3, r3
 5064 0032 B3F1FF3F 		cmp	r3, #-1
 5065 0036 03D1     		bne	.L333
 5066              		.loc 1 2887 9 discriminator 4
 5067 0038 7B69     		ldr	r3, [r7, #20]
 5068 003a 0022     		movs	r2, #0
 5069 003c 83F84520 		strb	r2, [r3, #69]
 5070              	.L333:
 5071              		.loc 1 2887 9 discriminator 6
 5072 0040 FFF7FEFF 		bl	vPortExitCritical
2888:./Drivers/FreeRTOS/queue.c **** 
2889:./Drivers/FreeRTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 5073              		.loc 1 2889 20 is_stmt 1 discriminator 6
 5074 0044 7B69     		ldr	r3, [r7, #20]
 5075 0046 9B6B     		ldr	r3, [r3, #56]
 5076              		.loc 1 2889 11 discriminator 6
 5077 0048 002B     		cmp	r3, #0
 5078 004a 06D1     		bne	.L334
2890:./Drivers/FreeRTOS/queue.c ****         {
2891:./Drivers/FreeRTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2892:./Drivers/FreeRTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
 5079              		.loc 1 2892 13
 5080 004c 7B69     		ldr	r3, [r7, #20]
 5081 004e 2433     		adds	r3, r3, #36
 5082 0050 7A68     		ldr	r2, [r7, #4]
 5083 0052 B968     		ldr	r1, [r7, #8]
 5084 0054 1846     		mov	r0, r3
 5085 0056 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 5086              	.L334:
2893:./Drivers/FreeRTOS/queue.c ****         }
2894:./Drivers/FreeRTOS/queue.c ****         else
2895:./Drivers/FreeRTOS/queue.c ****         {
2896:./Drivers/FreeRTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2897:./Drivers/FreeRTOS/queue.c ****         }
2898:./Drivers/FreeRTOS/queue.c **** 
2899:./Drivers/FreeRTOS/queue.c ****         prvUnlockQueue( pxQueue );
 5087              		.loc 1 2899 9
 5088 005a 7869     		ldr	r0, [r7, #20]
 5089 005c FFF7FEFF 		bl	prvUnlockQueue
2900:./Drivers/FreeRTOS/queue.c ****     }
 5090              		.loc 1 2900 5
 5091 0060 00BF     		nop
 5092 0062 1837     		adds	r7, r7, #24
 5093              	.LCFI183:
 5094              		.cfi_def_cfa_offset 8
 5095 0064 BD46     		mov	sp, r7
 5096              	.LCFI184:
 5097              		.cfi_def_cfa_register 13
 5098              		@ sp needed
 5099 0066 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 146


 5100              		.cfi_endproc
 5101              	.LFE39:
 5103              		.text
 5104              	.Letext0:
 5105              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\lib\\gcc\\arm-none-eabi\
 5106              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\arm-none-eabi\\include\\
 5107              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.07\\arm-none-eabi\\include\\
 5108              		.file 6 "Drivers/FreeRTOS/include/list.h"
 5109              		.file 7 "Drivers/FreeRTOS/include/task.h"
 5110              		.file 8 "Drivers/FreeRTOS/include/queue.h"
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 147


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:22     .bss.xQueueRegistry:00000000 xQueueRegistry
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:19     .bss.xQueueRegistry:00000000 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:25     .text.xQueueGenericReset:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:33     .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:262    .text.xQueueGenericReset:0000011c $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:267    .text.xQueueGenericCreate:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:274    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:404    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:398    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:470    .text.prvInitialiseMutex:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:476    .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:912    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:531    .text.xQueueCreateMutex:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:538    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:589    .text.xQueueGiveMutexRecursive:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:596    .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:698    .text.xQueueTakeMutexRecursive:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:705    .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2232   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:808    .text.xQueueCreateCountingSemaphore:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:815    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:905    .text.xQueueGenericSend:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3950   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4496   .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4208   .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1296   .text.xQueueGenericSend:000001f8 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1301   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1308   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1603   .text.xQueueGiveFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1610   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1884   .text.xQueueReceive:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:1891   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4126   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4348   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2220   .text.xQueueReceive:000001bc $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2225   .text.xQueueSemaphoreTake:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3887   .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2621   .text.xQueueSemaphoreTake:00000214 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2626   .text.xQueuePeek:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2633   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2964   .text.xQueuePeek:000001c0 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2969   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:2976   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3224   .text.xQueuePeekFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3231   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3431   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3438   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3506   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3513   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3589   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3596   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3667   .text.vQueueDelete:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3674   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4910   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3741   .text.uxQueueGetQueueNumber:00000000 $t
ARM GAS  C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s 			page 148


C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3748   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3787   .text.vQueueSetQueueNumber:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3794   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3835   .text.ucQueueGetQueueType:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3842   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3881   .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:3944   .text.prvCopyDataToQueue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4120   .text.prvCopyDataFromQueue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4202   .text.prvUnlockQueue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4342   .text.prvIsQueueEmpty:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4401   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4408   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4490   .text.prvIsQueueFull:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4552   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4559   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4644   .text.vQueueAddToRegistry:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4651   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4786   .text.vQueueAddToRegistry:00000098 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4791   .text.pcQueueGetName:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4798   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4898   .text.pcQueueGetName:00000064 $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:4903   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:5013   .text.vQueueUnregisterQueue:0000006c $d
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:5018   .text.vQueueWaitForMessageRestricted:00000000 $t
C:\Users\Benson\AppData\Local\Temp\ccGN1mq7.s:5025   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vListInitialise
vPortExitCritical
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
